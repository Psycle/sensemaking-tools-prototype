{"version":3,"file":"chunks/src_pages_about-us_tsx.js","mappings":";;;;;;;;;AAAa;AACb;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,0BAA0B;AAC1B,sBAAsB;AACtB,KAAK;AACL;AACA;AACA;AACA;AACA,wCAAwC,cAAc,IAAI,MAAM;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA,iCAAiC,0BAA0B;AAC3D;AACA;AACA;AACA;AACA,uBAAuB,QAAQ,EAAE,+BAA+B;AAChE;AACA;AACA,uBAAuB,QAAQ,EAAE,+BAA+B,GAAG,2BAA2B,IAAI,QAAQ;AAC1G;AACA;AACA;AACA,qBAAqB;AACrB;;;;;;;;;;;;;;;ACpHuC;AAExB,SAAS,IAAI;IAC1B,OAAO,CACL;QACE,6EAAiB;QACjB,wFAA2B,CACvB,CACP,CAAC;AACJ,CAAC","sources":["webpack://sensemaking-tools-prototype/./node_modules/typed-html/dist/src/elements.js","webpack://sensemaking-tools-prototype/./src/pages/about-us.tsx"],"sourcesContent":["\"use strict\";\n/// <reference path=\"./jsx/element-types.d.ts\" />\n/// <reference path=\"./jsx/events.d.ts\" />\n/// <reference path=\"./jsx/intrinsic-elements.d.ts\" />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createElement = void 0;\nconst capitalACharCode = 'A'.charCodeAt(0);\nconst capitalZCharCode = 'Z'.charCodeAt(0);\nconst isUpper = (input, index) => {\n    const charCode = input.charCodeAt(index);\n    return capitalACharCode <= charCode && capitalZCharCode >= charCode;\n};\nconst toKebabCase = (camelCased) => {\n    let kebabCased = '';\n    for (let i = 0; i < camelCased.length; i++) {\n        const prevUpperCased = i > 0 ? isUpper(camelCased, i - 1) : true;\n        const currentUpperCased = isUpper(camelCased, i);\n        const nextUpperCased = i < camelCased.length - 1 ? isUpper(camelCased, i + 1) : true;\n        if (!prevUpperCased && currentUpperCased || currentUpperCased && !nextUpperCased) {\n            kebabCased += '-';\n            kebabCased += camelCased[i].toLowerCase();\n        }\n        else {\n            kebabCased += camelCased[i];\n        }\n    }\n    return kebabCased;\n};\nconst escapeAttrNodeValue = (value) => {\n    return value.replace(/(&)|(\")|(\\u00A0)/g, function (_, amp, quote) {\n        if (amp)\n            return '&amp;';\n        if (quote)\n            return '&quot;';\n        return '&nbsp;';\n    });\n};\nconst attributeToString = (attributes) => (name) => {\n    const value = attributes[name];\n    const formattedName = toKebabCase(name);\n    const makeAttribute = (value) => `${formattedName}=\"${value}\"`;\n    if (value instanceof Date) {\n        return makeAttribute(value.toISOString());\n    }\n    else\n        switch (typeof value) {\n            case 'boolean':\n                // https://www.w3.org/TR/2008/WD-html5-20080610/semantics.html#boolean\n                if (value) {\n                    return formattedName;\n                }\n                else {\n                    return '';\n                }\n            default:\n                return makeAttribute(escapeAttrNodeValue(value.toString()));\n        }\n};\nconst attributesToString = (attributes) => {\n    if (attributes) {\n        return ' ' + Object.keys(attributes)\n            .filter(attribute => attribute !== 'children') // filter out children attributes\n            .map(attributeToString(attributes))\n            .filter(attribute => attribute.length) // filter out negative boolean attributes\n            .join(' ');\n    }\n    else {\n        return '';\n    }\n};\nconst contentsToString = (contents) => {\n    if (contents) {\n        return contents\n            .map(elements => Array.isArray(elements) ? elements.join('\\n') : elements)\n            .join('\\n');\n    }\n    else {\n        return '';\n    }\n};\nconst isVoidElement = (tagName) => {\n    return [\n        'area',\n        'base',\n        'br',\n        'col',\n        'command',\n        'embed',\n        'hr',\n        'img',\n        'input',\n        'keygen',\n        'link',\n        'meta',\n        'param',\n        'source',\n        'track',\n        'wbr'\n    ].indexOf(tagName) > -1;\n};\nfunction createElement(name, attributes = {}, ...contents) {\n    const children = attributes && attributes.children || contents;\n    if (typeof name === 'function') {\n        return name(children ? { children, ...attributes } : attributes, contents);\n    }\n    else {\n        const tagName = toKebabCase(name);\n        if (isVoidElement(tagName) && !contents.length) {\n            return `<${tagName}${attributesToString(attributes)}>`;\n        }\n        else {\n            return `<${tagName}${attributesToString(attributes)}>${contentsToString(contents)}</${tagName}>`;\n        }\n    }\n}\nexports.createElement = createElement;\n//# sourceMappingURL=elements.js.map","import * as elements from \"typed-html\";\n\nexport default function Home() {\n  return (\n    <div>\n      <h1>About us</h1>\n      <p>Welcome to our site!</p>\n    </div>\n  );\n}\n"],"names":[],"sourceRoot":""}