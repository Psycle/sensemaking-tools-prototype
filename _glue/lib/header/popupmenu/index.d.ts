//!! generated by tsickle from marketing/glue/lib/header/popupmenu/index.ts
import { Component } from '../../base';
import { Menu, MenuController } from '../popupmenu/constants';
/**
 * This class creates a PopupMenu instance, which uses a controller to
 * show and hide the menu.
 */
declare class PopupMenu extends Component implements Menu {
    readonly controller: MenuController;
    readonly menuItemCollection: MenuController[];
    private readonly firstChars;
    private firstItem;
    private lastItem;
    private readonly menuItems;
    hasFocus: boolean;
    hasHover: boolean;
    constructor(root: HTMLElement, controller: MenuController);
    init(): void;
    destroy(): void;
    /**
     * Add first charector of each link text to the collection.
     */
    private addFirstChar;
    /**
     * Sets hasHover to true when the menu is hovered.
     */
    private readonly handleMouseenter;
    /**
     * Waits for 300 mills to close the menu after moving mouse out of the menu.
     */
    private readonly handleMouseleave;
    /**
     * Checks whether the cursor is in the controller area,
     */
    private isInController;
    /** Assert this is a MenuItem */
    private isMenuItem;
    /**
     * Sets focus to the menubar item.
     * Looks for the parent node if the current node is a menu item.
     */
    private setFocusToMenubarItem;
    /**
     * Sets focus to the controller depending on the keys.
     * Sets focus to the controller element if no argument is passed.
     * Sets focus to the next or previous menubar item when command is passed.
     */
    setFocusToController(command?: undefined | 'previous' | 'next'): void;
    setFocusToFirstItem(): void;
    setFocusToLastItem(): void;
    setFocusToPreviousItem(currentItem: MenuController): void;
    setFocusToNextItem(currentItem: MenuController): void;
    /**
     * Sets focus to the item based on the first key that users press.
     */
    setFocusByFirstCharacter: (currentItem: MenuController, char: string) => void;
    open: () => void;
    /**
     * Closes the menu only when:
     *  - A true force flag is passed in.
     *  - The menu or its chlid menus do not have focus, and the menu does not
     *    have hover, and when its controller is a menubar item, it is not
     *    hovered.
     */
    close(force?: boolean): void;
}
export { PopupMenu };
