//!! generated by tsickle from marketing/glue/lib/header/deepnav/menubaritem.ts
import { Component } from '../../base';
import { PopupMenu } from '../popupmenu';
import { Menu, MenuController } from '../popupmenu/constants';
/**
 * This class creates a menu item instance, which may control a dropdown menu.
 */
declare class MenubarItem extends Component implements MenuController {
    readonly parentMenu: Menu;
    /** A popup menu component, controlled by the menu item. */
    popupMenu: PopupMenu | null;
    /** A flag to show menu bar item's focus status. */
    hasFocus: boolean;
    /** A flag to show menu bar item's hover status. */
    hasHover: boolean;
    /**
     * This flag is used to determine if this controller is a menu bar item.
     * This flag is set to false in other controllers such as site switcher and
     * popup menu item.
     */
    isMenubarItem: boolean;
    /** The menu argument is the menu bar element that contains this menu item. */
    constructor(root: HTMLElement, parentMenu: Menu);
    /**
     * Initializes the menu item and the associated popup menu.
     */
    init(): void;
    destroy(): void;
    /**
     * Handles keydown events.
     * - When press the Space, Enter or Down keys, open the menu if able and focus
     * to the first item.
     * - When press the Up key, open the popup menu if able and focus to the last
     * item.
     * - When press the left key, move focus to the previous menu item.
     * - When press the right key, move focus to the next menu item.
     * - When press the Home or PageUp key, move focus to the first item.
     * - When press the End or PageDown key, move focus to the last item.
     * - When press the Tab key, close the popup menu, and move focus to the next
     * focusable element.
     * - When press the ESC key, close the popup menu, move focus to the
     * controller.
     */
    private readonly handleKeydown;
    /** Sets expanded attribute. */
    setExpanded: (flag: boolean) => void;
    /** Sets hasFocus to true when the menu item is in focus. */
    private readonly handleFocus;
    /** Sets hasFocus to false when the menu item is blurred. */
    private readonly handleBlur;
    /**
     * When the menu item in hovered, set hasHover to true and open the
     * popupmenu if able.
     */
    private readonly handleMouseenter;
    /**
     * When the mouse is moved away from the menu item, set hasHover to false
     * and close the popupmenu after 300 mills.
     */
    private readonly handleMouseleave;
}
export { MenubarItem };
