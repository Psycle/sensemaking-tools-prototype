//!! generated by tsickle from marketing/glue/lib/header/drawer/index.ts
import { Component } from '../../base/';
declare class Drawer extends Component {
    private readonly toggleEl;
    private readonly transitionEndHandler;
    private readonly handleOpen;
    private readonly handleClose;
    closed: boolean;
    private isAnimating;
    private ariaHiddenElements;
    private readonly backdrop;
    private focusableElements;
    private readonly handleKeydown;
    /** Start time of the drag movement */
    private startTime;
    /** Initial touch position */
    private initialTouchPos;
    /** Last touch poistion */
    private lastTouchPos;
    /** True when it is ready to call request animatino frame */
    private rafPending;
    /**
     * @param root The element that contains options object.
     * @param toggleEl The element that toggles the drawer open and closed.
     */
    constructor(root: HTMLElement, toggleEl: HTMLElement);
    private registerTouchEvents;
    private deregisterTouchEvents;
    private readonly handleGestureStart;
    private readonly handleGestureMove;
    private readonly handleGestureEnd;
    destroy(): void;
    /** Determines whether the event is a TouchEvent. */
    private isTouchEvent;
    /** Determines whether the event is a PointerEvent. */
    private isPointerEvent;
    private onAnimFrame;
    private getGesturePointFromEvent;
    private updateDrawerPosition;
    /**
     * Opens the drawer
     */
    open(): void;
    /**
     * Removes keyboard focus from all the focusable elements outside the drawer.
     */
    private removeKeyboardFocus;
    /**
     * Adds keyboard focus for all the focusable elements outside the drawer.
     */
    private addKeyboardFocus;
    /**
     * Closes the drawer and sets the focus to the toggle btn.
     */
    close(): void;
    private setAttributes;
    /**
     * Check to see if drawer is open
     */
    isOpen(): boolean;
    /**
     * Check to see if the event target is a child element of the drawer component
     */
    containsElement(event: Event): boolean;
    /**
     * Check to see if the event target is a child element of the drawer component
     */
    isCtaElement(event: Event): boolean;
    /**
     * This method will take care of any logic that needs to run after the CSS
     * transition has ended.
     */
    private handleTransitionEndEvent;
    /**
     * This method will remove applied aria attributes
     */
    removeAriaHidden(): void;
    /**
     * This method will set aria attributes
     */
    setAriaHidden(): void;
    /**
     * This method sets default attributes when the drawer is opened
     */
    private setDefaultAttrs;
    /**
     * This method removes default attributes when the drawer is closed
     */
    private removeDefaultAttrs;
    /**
     * Set aria hidden to true for all other elements.
     * This method provides complementary A11y support before aria-modal
     * The code is referenced from
     * https://source.corp.google.com/piper///depot/google3/googledata/html/external_content/scs_corp/ariablueprints/dialog/dialog-modal-1.0.html;l=81-101
     * gets broader browser support.
     */
    private ariaHideElements;
    /**
     * Remove aria hidden to false for all other elements.
     */
    private ariaUnhideElements;
}
export { Drawer };
