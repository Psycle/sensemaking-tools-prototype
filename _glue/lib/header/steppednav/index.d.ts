//!! generated by tsickle from marketing/glue/lib/header/steppednav/index.ts
import { Component } from '../../base/';
declare class SteppedNav extends Component {
    private menuPages;
    private controlsPages;
    private steppedControlsTitle;
    private steppedControls;
    private steppedControlsContainer;
    private pagesContainer;
    private subnavIcon;
    private activeInitPageIndex;
    private readonly model;
    private readonly observer;
    private readonly modelDefaults;
    private readonly handleKeyPress;
    private readonly handleClick;
    private readonly updateHandler;
    /**
     * Get the element for the Stepped Nav. Useful in detemining if the
     * element is present.
     * @param root The element in which to look.
     * @return A stepped nav root element if present.
     */
    static getSteppedNavElement(root: HTMLElement): HTMLElement;
    constructor(root: HTMLElement);
    /**
     * Initialize the menu Page containers.
     */
    private initMenuPages;
    /**
     * Initialize the controls over the Pages.
     */
    private initControls;
    /**
     * Initialize all the menu pages. This adds them to the menu container and
     * sets up page and controls for UI actions.
     * @return activePageIndex {number}
     */
    private buildPagesFromNav;
    /**
     * Harvest a menu element. Creates a new page in the stepped nav.
     * @param menuElement The menu Element to look in.
     * @param menuParentTitle  The title of the menu parent.
     * @return The index of this menu page.
     */
    private harvestMenu;
    /**
     * Harvest a menu list item element. If it finds a menu, it is harvested
     * via harvestMenu();
     * @param parentMenuPageIndex The index of the parent menu.
     * @param listItemElement The menu list item element.
     */
    private harvestListItem;
    /**
     * Moves the page model to the next or previous page when the user uses
     * the enter, space or directional keys.
     */
    private keyPress;
    /**
     * Handle a select action without a forward/back direction.
     */
    private selectPage;
    /**
     * Handle when a new page has been selected from a submenu element action.
     */
    private selectSubPage;
    /**
     * Handle when we should go to the parent page of an elem.
     */
    private selectParentPage;
    /**
     * Get a child element from a parent of a specified type.
     * @param parent The element to look in.
     * @param type The type of node to get e.g. 'UL'
     * @return The first child of that type or undefined if not found.
     */
    private getChildOfNodeType;
    destroy(): void;
}
export { SteppedNav };
