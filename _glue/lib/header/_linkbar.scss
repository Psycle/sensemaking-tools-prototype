// Glue header linkbar styles

@use '../accessibility/mixins' as accessibility-mixins;
@use '../accessibility/variables' as accessibility-variables;
@use '../breakpoints/mixins' as breakpoints;
@use '../typography/mixins' as typography-mixins;
@use '../typography/variables' as typography-variables;
@use 'mixins';
@use 'variables';

// User-customized variable for breakpoint
$breakpoint-nav: variables.$breakpoint-default !default;

.glue-header--double {
  .glue-header__container {
    min-height: variables.$bar-height;
  }
}

.glue-header__link-bar {
  align-items: center;
  display: flex;
  flex: 1 1 auto;
  flex-direction: column;
  height: 100%;
  padding: 0;
  width: 100%;

  @include breakpoints.bp(lg) {
    flex-direction: row;
    display: initial;
    height: 100%;
    overflow: visible;
    padding-inline-start: 26px;
    padding-top: 0;
    position: relative;
  }
}

.glue-header__list {
  align-items: flex-start;
  display: flex;
  flex-direction: column;
  height: 100%;
  list-style: none;
  margin: 0;
  padding: 0;
  width: 100%;

  @include breakpoints.bp($breakpoint-nav) {
    flex-direction: row;
    min-height: variables.$bar-height;
  }

  .glue-header__link-bar > & {
    padding-block: variables.$drawer-list-padding-top
      variables.$drawer-list-padding-bottom;

    @include breakpoints.bp($breakpoint-nav) {
      padding: 0;
    }
  }
}

.glue-header__list--nested {
  @include breakpoints.bp($breakpoint-nav) {
    bottom: 0;
    display: none;
    left: 0;
    min-width: 500px;
    padding-left: 0;
    position: absolute;
  }

  .glue-header--is-active & {
    display: flex;
    height: auto;
  }
}

.glue-header__item {
  align-items: flex-start;
  display: flex;
  flex-direction: column;
  justify-content: center;
  padding: 0;
  width: 100%;

  .glue-header__list--nested & {
    position: relative;

    @include breakpoints.bp($breakpoint-nav) {
      &:first-child {
        margin-inline: 26px 0;
      }
    }
  }

  .glue-header--single & {
    position: relative;
  }

  // IE 11 Fix
  @media screen and (-ms-high-contrast: active),
    screen and (-ms-high-contrast: none) {
    align-items: center;
  }

  @include breakpoints.bp($breakpoint-nav) {
    align-items: center;
    flex-direction: row;
    justify-content: center;
    padding-block: variables.$link-bar-item-padding-top
      variables.$link-bar-item-padding-bottom;
    width: auto;
  }
}

.glue-header__link {
  @include mixins.button-states;
  @include typography-mixins.calculate-font-size-rem(
    variables.$link-bar-font-size
  );
  @include typography-mixins.calculate-unitless-line-height(
    variables.$link-bar-font-size-line-height,
    variables.$link-bar-font-size
  );
  @include typography-mixins.font-smoothing(
    typography-variables.$font-smoothing-moz,
    typography-variables.$font-smoothing-webkit,
    typography-variables.$font-smoothing-rendering
  );
  @include typography-mixins.language-font-stacks(
    typography-variables.$font-face-googlesans
  );

  align-items: center;
  border-end-end-radius: variables.$border-radius-active-mobile;
  border-start-end-radius: variables.$border-radius-active-mobile;
  color: variables.$link-bar-inactive;
  display: flex;
  flex-direction: row;
  font-weight: 500;
  height: 100%;
  letter-spacing: typography-variables.$copy-one-mobile-letter-spacing;
  max-height: variables.$link-bar-links-max-height;
  min-height: variables.$link-bar-links-max-height;
  overflow: hidden;
  padding-inline-end: variables.$link-bar-links-padding;
  padding-inline-start: variables.$drawer-link-padding;
  text-decoration: none;
  white-space: nowrap;
  width: calc(100% - variables.$drawer-link-active-padding);

  @include breakpoints.bp($breakpoint-nav) {
    border-radius: variables.$border-radius-active;
    padding-inline-start: variables.$link-bar-links-padding;
    width: initial;
  }

  @include accessibility-mixins.hcm-mq {
    color: accessibility-variables.$hcm-color-link-text;
  }

  .glue-header--is-active > & {
    color: variables.$link-bar-active;
  }

  // First tier notch arrow
  .glue-header__link-bar > .glue-header__list > .glue-header--is-active > & {
    @include breakpoints.bp($breakpoint-nav) {
      overflow: visible;
      position: relative;

      &::before {
        background-color: variables.$bg;
        border-bottom: 1px solid variables.$border;
        border-left: 1px solid variables.$border;
        bottom: variables.$caret-bottom;
        content: ' ';
        height: variables.$caret-height;
        left: calc(50% - variables.$caret-half-width);
        position: absolute;
        transform: rotate(135deg);
        width: variables.$caret-width;
        z-index: variables.$z-index-caret;

        .glue-header--transparent & {
          background-color: transparent;
        }
        .glue-header--transparent:not(.glue-header--active) & {
          border-color: variables.$border;
        }
      }

      .glue-header--transparent & {
        div {
          [dir='rtl'] & {
            transform: scaleX(-1);
          }
          width: 100%;
          height: 100%;
          position: absolute;

          // To make the caret transparent and still have a border across the
          // entire component, we must be split into two pseudo elements.
          // This will allow use to calulate the position with CSS.
          &::before {
            content: ' ';
            width: calc(100vw - variables.$caret-half-width);
            height: 1px;
            background-color: variables.$border;
            position: absolute;
            // The width changes once you transform and rotate the caret.
            // This is how we can calculate the width:
            // $caret-transformed-width: calc(($caret-width * cos(45deg)) + ($caret-height * sin(45deg))
            // calc(-100vw + calc(50% - $caret-transformed-width))
            left: calc(-100vw + variables.$link-bar-border-bottom-left-pos);
            bottom: -8px;
            pointer-events: none;
          }

          &::after {
            content: ' ';
            width: calc(100vw - variables.$caret-half-width);
            height: 1px;
            background-color: variables.$border;
            position: absolute;
            right: calc(-100vw + variables.$link-bar-border-bottom-right-pos);
            bottom: -8px;
            pointer-events: none;
            z-index: variables.$z-index-link-bar-border;
          }
        }
      }

      .glue-header--transparent.glue-header--active & {
        div {
          &::after,
          &::before {
            background-color: variables.$border;
          }
        }
      }
    }
  }

  // When the header is single-tier and there is a deep nav manu, the deep
  // nav links are at the top and don't need a notch arrow.
  .glue-header--single
    .glue-header__link-bar
    > .glue-header__list.glue-header__deep-nav
    > .glue-header--is-active
    > & {
    @include breakpoints.bp($breakpoint-nav) {
      &::before {
        display: none;
      }
    }
  }

  .glue-header__item--active & {
    background-color: variables.$link-bar-bg-focus;
    color: variables.$link-bar-active;

    .glue-header--transparent & {
      background-color: transparent;
    }

    @include breakpoints.bp($breakpoint-nav) {
      background-color: variables.$link-bar-bg;

      .glue-header--transparent {
        background-color: transparent;
      }
    }

    &:hover {
      background-color: variables.$link-bar-bg-hover;

      .glue-header--transparent & {
        background-color: transparent;
      }
    }
  }

  // Blue border under the active element
  .glue-header__item--active & {
    @include breakpoints.bp($breakpoint-nav) {
      &::after {
        background-color: variables.$link-bar-border-active;
        border-bottom: variables.$border-width solid
          variables.$link-bar-border-active;
        bottom: variables.$link-bar-active-border-bottom;
        content: '';
        height: 0;
        left: variables.$link-bar-links-padding;
        position: absolute;
        width: calc(100% - (variables.$link-bar-links-padding * 2));
        z-index: variables.$z-index-link-bar-item-active;
      }
    }

    &:not(.glue-header--active &) {
      .glue-header--transparent & {
        &::after {
          border-bottom: variables.$border-width solid
            variables.$link-bar-border-transparent-active;
        }
      }
    }
  }

  .glue-header--transparent:not(.glue-header--active):not(
      .glue-is-showing-drawer
    )
    & {
    color: variables.$link-bar-transparent;
    background-color: transparent;
  }

  .glue-header__list--nested & {
    padding-inline-start: variables.$drawer-link-nested-padding-left;

    @include breakpoints.bp($breakpoint-nav) {
      padding-inline: variables.$link-bar-links-padding;
    }

    @include accessibility-mixins.hcm-mq {
      svg {
        fill: accessibility-variables.$hcm-color-link-text;
      }
    }
  }
}

.glue-header__skip-content {
  display: flex;
  flex-direction: row;
  height: 1px;
  justify-content: center;
  inset-inline-start: -10px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  top: -999px;
  width: 1px;

  &:focus {
    @include accessibility-mixins.hcm-focus;
    height: variables.$link-bar-links-max-height;
    inset-inline-start: 10vw;
    min-width: variables.$skip-button-width;
    overflow: auto;
    top: variables.$skip-button-top;
    border-radius: variables.$border-radius-active;
  }
}
