//!! generated by tsickle from marketing/glue/lib/popover/index.ts
import { Component } from '../base/';
import { Placement } from '../base/utils';
import { PlacementOptions } from './constants';
declare interface PopoverOptions {
    placement: Placement;
    takeFocus: boolean;
}
declare interface PopoverDef {
    open: () => void;
    close: () => void;
}
/**
 * A components that shows a popover component by toggling a button.
 *
 * Responsibilities:
 *  - Attach component instance to root element
 *  - Initialize options object
 *  - Provide public methods for open, close and destroy
 *  - Set attributes and aria tags to elements.
 *  - Access all DOM api needs directly
 *  - Set and remove all event listeners
 *  - Controls and sets focus to elements
 *
 * Design doc: https://goto.google.com/glue-popover-mdc-dd
 *
 */
declare class Popover extends Component implements PopoverDef {
    private closeEl?;
    private buttonEl;
    private dialogEl;
    private buttonClickHandler;
    private readonly clickOutsideDialogHandler;
    private keyDownHandler;
    private readonly mouseLeaveHandler?;
    private readonly blurHandler?;
    private readonly options;
    private readonly resizeDebounce;
    /**
     * @param rootElement The element that contains the popover.
     * @param options Popover options object.
     * @param buttonEl The element that opens the popover.
     * @param dialogEl The element for the popover dialog.
     */
    constructor(rootElement: HTMLElement, options?: Partial<PopoverOptions>, buttonEl?: HTMLElement, dialogEl?: HTMLElement);
    /**
     * Set up the button interactive elements.
     */
    private initInteractiveElements;
    /**
     * Destroys the popover instance.
     */
    destroy(): void;
    /**
     * If an event is from the specified element.
     */
    private checkEventFromChild;
    /**
     * Get attributes from target element and constructor an options object.
     */
    private getAttributeOptions;
    /**
     *  Adds default attributes to the corresponding elements
     */
    private setDefaultElAttr;
    /**
     * Set focus to element based on status
     */
    private setElementFocus;
    /**
     * Shows popover and sets the pending flag.
     */
    open(): void;
    /**
     * Close popover and sets the pending flag
     */
    close(): void;
    /**
     * If the Dialog is currently open.
     */
    private isOpen;
    /**
     * The handler is attached to the root element and handles a few cases
     * 1. Opens and closes the dialog via clicking trigger button.
     * 1. Closes the dialog via clicking close button.
     */
    private handleButtonClick;
    /**
     * Event handler for Escape key and Enter key.
     */
    private handleKeyDown;
    /**
     * Click handler for closing window if user clicks outside the open
     * dialog window.
     */
    private handleClickOutsideDialog;
    /**
     * Calculate the position of the Popover.
     */
    private setPopoverPosition;
    /**
     * Resize handler for the Popover.
     * Recalculate the position of the Popover when the window resizes.
     */
    private readonly handleResize;
    /**
     * Resize debounce handler for the Popover.
     */
    private readonly handleResizeDebounce;
    /**
     * Default popover options
     */
    static get defaults(): PopoverOptions;
}
export { PlacementOptions, Popover, type PopoverOptions };
