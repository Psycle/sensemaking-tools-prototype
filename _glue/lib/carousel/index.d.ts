//!! generated by tsickle from marketing/glue/lib/carousel/index.ts
import { Component } from '../base';
import { Observer, ObserverDataObj } from '../observer';
declare interface CarouselOptions {
    currentSlide: number;
    peekOut: boolean;
    navigation: boolean;
    animation: boolean;
    cyclical: boolean;
    cardsPerPage: number;
    dragging: boolean;
}
declare interface CarouselObserverData extends ObserverDataObj {
    currentSlide: number;
}
declare interface CarouselDef {
    reset: () => void;
    next: () => void;
    previous: () => void;
    setCurrentSlide: (current: number) => void;
    getCurrentSlide: () => number;
}
/** The Glue Carousel component. */
declare class Carousel extends Component implements CarouselDef {
    /** The user defined options for the carousel. */
    readonly options: CarouselOptions;
    /** Parent element of slides, used to move content within the viewport. */
    private readonly slidesContainer;
    /** Viewport element, parent of slidesContainer */
    private readonly viewport;
    /** Every slide element (including dummies if required). */
    private slides;
    /** A reference to the original slides property (without dummies). */
    private readonly slidesRef;
    /** Button that when clicked navigates to the previous slide. */
    private readonly prevBtn;
    /** Button that when clicked navigates to the next slide. */
    private readonly nextBtn;
    /** Parent element for navigation dots. */
    private readonly navigation;
    /** Every navigation dot. */
    private readonly dots;
    /** Total number of pages. */
    private totalPages;
    /** The number of visible slides within the viewport. */
    private slidesPerPage;
    /**
     * A flag to turn on/off animation when the component loads.
     * It has been used to jump from the dummy slide to the first/last actual
     * slide.
     */
    private animateOnInitialLoad;
    /**
     * Observable instance storing the currently visible slide.
     */
    readonly observer: Observer<CarouselObserverData>;
    /** The container width. */
    private containerWidth;
    /** The slide width. */
    private slideWidth;
    /** Flag to determine whether this is a carousel of cards. */
    private readonly isCards;
    /** True if this is an RTL page. */
    private readonly isRtl;
    /**
     * Flag to determine whether we're using a tab panel navigation model.
     * @see https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Tab_Role
     */
    private isTabModel;
    /** Flag to determine whether the carousel should show the navigation dots. */
    private isShowingNavigation;
    /** A collection of scroll value for each page */
    private pagesX;
    /** Initial touch position */
    private initialTouchPos;
    /** Flag to determine if the carousel is currently being dragged. */
    private isDragging;
    /** Last touch poistion */
    private lastTouchPos;
    /** True when it is ready to call request animatino frame */
    private rafPending;
    /** Current horizontal position */
    private currentXPosition;
    /**
     * Set this value to false when dragging option is false and it is on desktop
     */
    private enableDragging;
    constructor(root: HTMLElement, options?: Partial<CarouselOptions>);
    /** Returns the default carousel options. */
    static get defaults(): CarouselOptions;
    /** Sets up the component to prepare for the initial rendering. */
    private setup;
    /** Registers event listeners. */
    private registerEvents;
    /** Unregisters event listeners on removal of component. */
    destroy(): void;
    /** Resets the component to the initial values. */
    reset(): void;
    /** Calculates carousel properties and scroll values. */
    private calculate;
    /** Calculates and sets properies for non-card carousels. */
    private calculateProperties;
    /**
     * Calculates items per page and total pages attributes (for card carousels)
     * and updates the CSS grid styles accordingly.
     */
    private calculateCardsProperties;
    /** Renders all the UI components in Carousel. */
    private render;
    /** Returns the currently active slide (1-indexed). */
    getCurrentSlide(): number;
    /** Returns the currently visible page (1-indexed). */
    private getCurrentPage;
    /** Sets the currently active slide in the state (1-indexed). */
    setCurrentSlide(slide: number): void;
    /** Sets the current slide value to the first slide of the requested page. */
    private setCurrentPage;
    /** Sets the current slide value to the previous page. */
    previous(): void;
    /** Sets the current slide value to the next page. */
    next(): void;
    /** Renders the appropriate slide attributes. */
    private renderSlides;
    /** Remove keyboard focus on focusable elements in the hidden slides. */
    private removeFocusOnHiddenElements;
    /**
     *  Turn on/off dragging based on settings and screen size.
     *  In small viewport, dragging is always enabled.
     *  In other viewport sizes, it depends on the component configurations.
     */
    private updateTouchEvents;
    /** Updates the transform for the viewport. */
    private transit;
    /** Turns on animation for slides (needs a slight buffer to avoid skips). */
    private turnOnAnimation;
    /** Renders the appropriate attributes in the dot navigation. */
    private renderNavigation;
    /** Shows or hides the next/previous buttons. */
    private renderButtons;
    /** Builds the dot navigation. */
    private buildNavigation;
    /** Destroys the dot navigation. */
    private destroyNavigation;
    /** Copies the first and last slides into the DOM (for cyclical carousels). */
    private copyDummySlides;
    /** Clones a slide (for first/last dummies). */
    private cloneSlide;
    /** Calculates the scroll values for each page. */
    private calcScrollValue;
    /** Re-renders the carousel when the current slide value changes. */
    private readonly handleCurrentSlideChange;
    /** Re-calculates and renders the carousel when the window resizes. */
    private readonly handleResize;
    /** Sets the current slide value to the appropriate slide on UI clicks. */
    private readonly handleClick;
    /**
     * Sets the current slide value to the appropriate slide on left/right
     * keyboard press.
     */
    private readonly handleKeydown;
    /** Jumps to the real slides (from a dummy) when the transition ends. */
    private readonly handleTransitionEnd;
    private registerTouchEvents;
    private deregisterTouchEvents;
    private readonly handleGestureStart;
    private readonly handleGestureMove;
    private readonly handleGestureEnd;
    private updateSwipeRestPosition;
    /** Calculates the x distance between 2 positions. */
    private getXDistance;
    private getGesturePointFromEvent;
    private onAnimFrame;
    /** Determines whether the event is a TouchEvent. */
    private isTouchEvent;
    /** Returns the options set via data attributes. */
    private getDataAttrs;
    /**
     * Retrieves the named breakpoint currently injected in DOM.
     */
    private getCurrentBreakpoint;
}
export { Carousel, type CarouselOptions };
