// Glue carousel component

@use 'sass:math';

@use '../accessibility/mixins' as accessibility-mixins;
@use '../accessibility/variables' as accessibility-variables;
@use '../breakpoints/mixins' as breakpoints;
@use '../colors/variables' as colors;
@use '../page/variables' as page;
@use 'variables';

.glue-carousel {
  margin: 0 auto;
  width: 100%;

  @include breakpoints.bp(md) {
    position: relative;
  }
}

.glue-carousel--cards {
  margin-bottom: -#{variables.$cards-bleed};
  margin-top: -#{variables.$cards-bleed};
}

.glue-carousel--peek-out {
  overflow-x: hidden;

  .glue-page & {
    margin-left: -#{page.$margin-sm};
    margin-right: -#{page.$margin-sm};
    width: calc(100% + (2 * page.$margin-sm));
  }

  @include breakpoints.bp(md) {
    overflow-x: visible;

    .glue-page & {
      margin-left: auto;
      margin-right: auto;
      width: 100%;
    }
  }

  &.glue-carousel--cards {
    @include breakpoints.bp(md) {
      overflow-x: hidden;

      .glue-page & {
        margin-left: -#{page.$margin-md};
        margin-right: -#{page.$margin-md};
        width: calc(100% + (2 * page.$margin-md));
      }
    }

    @include breakpoints.bp(lg) {
      overflow-x: visible;

      .glue-page & {
        margin-left: auto;
        margin-right: auto;
        width: 100%;
      }
    }
  }
}

// Viewport, this is whats being updated for animation.
.glue-carousel__viewport {
  margin: 0 auto;
  overflow: hidden;
  position: relative;
  width: 100%;

  .glue-carousel--cards & {
    margin: 0 -#{variables.$cards-bleed};
    padding: variables.$cards-bleed;
    width: calc(100% + (variables.$cards-bleed * 2));
  }

  .glue-carousel--peek-out & {
    overflow: visible;
    width: calc(100% - (variables.$peek-out-padding * 2));

    @include breakpoints.bp(md) {
      overflow: hidden;
      width: 100%;
    }
  }

  .glue-carousel--cards.glue-carousel--peek-out & {
    margin: 0 auto;
    padding-left: 0;
    padding-right: 0;
    width: calc(100% - (page.$margin-sm * 2));

    @include breakpoints.bp(md) {
      overflow: visible;
      width: calc(100% - (page.$margin-md * 2));
    }

    @include breakpoints.bp(lg) {
      margin: 0 -#{variables.$cards-bleed};
      overflow: hidden;
      padding-left: variables.$cards-bleed;
      padding-right: variables.$cards-bleed;
      width: calc(100% + (variables.$cards-bleed * 2));
    }
  }
}

.glue-carousel__list {
  align-content: center;
  cursor: grab;
  display: flex;
  flex-direction: row;
  list-style: none;
  margin: 0;
  padding: 0;
  touch-action: pan-y;
  transition: variables.$list-transition;
  width: 100%;

  .glue-carousel--cards & {
    display: grid;
    grid-gap: variables.$cards-gap-sm;
    grid-template-columns: repeat(1, 1fr);

    @include breakpoints.bp(md) {
      grid-gap: variables.$cards-gap-md;
      grid-template-columns: repeat(2, 1fr);
    }

    @include breakpoints.bp(lg) {
      grid-gap: variables.$cards-gap-lg;
      grid-template-columns: repeat(3, 1fr);
    }

    @include breakpoints.bp(xl) {
      grid-gap: variables.$cards-gap-xl;
    }
  }

  &.glue-carousel__list--disable-grab {
    cursor: auto;
  }
}

// Items
.glue-carousel__item {
  &.glue-card {
    display: none;

    // Show the first row of cards before JS is executed.
    &:nth-child(1) {
      display: block;
    }

    @include breakpoints.bp(md) {
      &:nth-child(2) {
        display: block;
      }
    }

    @include breakpoints.bp(lg) {
      &:nth-child(3) {
        display: block;
      }
    }

    .glue-carousel__list[aria-live='polite'] & {
      display: block;
    }
  }

  &:not(.glue-card) {
    border-radius: variables.$item-border-radius;
    list-style: none;
    min-width: 100%;
    outline: none;
    overflow: hidden;
    position: relative;
    transform: translateZ(0); // prevent flickering in Safari

    img {
      object-fit: fill;
    }
  }

  &.glue-video {
    &:focus {
      &::after {
        display: none; // Removes a doulbe border on focus state
      }
    }
  }

}

// Navigation
.glue-carousel__button {
  align-content: center;
  background-color: variables.$button-color;
  border: 0;
  border-radius: variables.$button-radius;
  color: black;
  display: none;
  flex-flow: row wrap;
  height: variables.$button-size;
  justify-content: center;
  margin: 0;
  max-height: variables.$button-size;
  min-width: variables.$button-size;
  opacity: variables.$button-opacity;
  outline: none;
  padding: 0;
  position: absolute;
  top: calc(50% - ((variables.$button-size * 0.5)));
  transition: opacity 250ms;
  width: variables.$button-size;
  z-index: 1;

  @include breakpoints.bp(md) {
    display: flex;
  }

  @include accessibility-mixins.hcm-mq {
    background: accessibility-variables.$hcm-color-button-background;
    border: 2px solid transparent;
    color: accessibility-variables.$hcm-color-button-text;
    opacity: 1;

    svg {
      fill: accessibility-variables.$hcm-color-button-text;
    }
  }

  .glue-carousel--cards & {
    height: variables.$cards-button-size;
    max-height: variables.$cards-button-size;
    min-width: variables.$cards-button-size;
    top: calc(50% - ((variables.$cards-button-size * 0.5)));
    width: variables.$cards-button-size;

    @include breakpoints.bp(md) {
      display: none;
    }

    @include breakpoints.bp(lg) {
      display: flex;
    }
  }

  .glue-carousel--has-navigation & {
    // This adjusts the top position to take into account the extra height that
    // navigation dots element adds to the container.
    margin-top: math.div(
      variables.$dots-spacing-top + variables.$dots-size-large,
      -2
    );

    @include breakpoints.bp(md) {
      margin-top: math.div(
        variables.$dots-spacing-top-md + variables.$dots-size,
        -2
      );
    }
  }

  &:hover,
  &:focus {
    background-color: #fff;
    box-shadow: variables.$button-hover-shadow;
    opacity: 1;
  }

  &:focus {
    border: 2px solid transparent;
    box-shadow: 0 0 0 2px colors.$blue-600;

    @include accessibility-mixins.hcm-mq {
      border-color: accessibility-variables.$hcm-color-selected-background;
      outline: 2px solid accessibility-variables.$hcm-color-selected-background;
    }
  }

  &.glue-is-inactive {
    display: none;
  }

  .glue-icon {
    pointer-events: none;
    transform: rotate(0deg);

    [dir='rtl'] &,
    :host([dir='rtl']) & {
      transform: rotate(180deg);
    }
  }
}

.glue-carousel__button--prev {
  inset-inline-start: variables.$button-size * 0.5;

  .glue-carousel--cards & {
    inset-inline-start: -#{variables.$cards-button-size + variables.$cards-button-position};
  }
}

.glue-carousel__button--next {
  inset-inline-end: variables.$button-size * 0.5;

  .glue-carousel--cards & {
    inset-inline-end: -#{variables.$cards-button-size + variables.$cards-button-position};
  }
}

.glue-carousel__navigation {
  align-content: center;
  display: none;
  flex-direction: row;
  justify-content: center;
  margin: variables.$dots-spacing-top 0 0;
  width: 100%;

  .glue-carousel--has-navigation & {
    display: flex;
  }

  @include breakpoints.bp(md) {
    margin-top: variables.$dots-spacing-top-md;
  }
}

.glue-carousel__dot {
  -moz-appearance: none;
  -webkit-appearance: none;
  appearance: none;
  background: transparent;
  border: 0;
  cursor: pointer;
  height: variables.$dots-size-large;
  outline: none;
  position: relative;
  width: variables.$dots-size-large;

  @include breakpoints.bp(md) {
    height: variables.$dots-size;
    width: variables.$dots-size;
  }

  @include breakpoints.bp(md-only) {
    @include breakpoints.orientation-mode(landscape) {
      height: variables.$dots-size-large;
      width: variables.$dots-size-large;
    }
  }

  &::before {
    border: 1px solid colors.$black;
    border-radius: 50%;
    content: '';
    display: block;
    height: variables.$dots-inner-size;
    left: calc((100% - variables.$dots-inner-size) / 2);
    position: absolute;
    top: calc((100% - variables.$dots-inner-size) / 2);
    width: variables.$dots-inner-size;
  }

  &.glue-is-active::before {
    background: colors.$black;
    border: 5px solid transparent;
  }

  &:focus::after {
    content: '';
    border-radius: 50%;
    border: variables.$dots-border-width solid variables.$dots-focus-color;
    display: block;
    height: variables.$dots-size;
    left: calc((100% - variables.$dots-size) / 2);
    outline: none;
    position: absolute;
    top: calc((100% - variables.$dots-size) / 2);
    width: variables.$dots-size;
  }
}
