// Glue social component
// Adds links to social media

@use '../accessibility/mixins' as accessibility-mixins;
@use '../accessibility/variables' as accessibility-variables;
@use '../breakpoints/mixins' as breakpoints;
@use '../buttons/index' as buttons;
@use '../colors/variables' as colors;
@use '../elevation/mixins' as elevation;
@use '../typography/mixins' as typography-mixins;
@use '../typography/variables' as typography-variables;
@use '../typography';
@use '../popover';
@use 'variables';

.glue-social {
  display: flex;
  flex: 1 0 auto;
  flex-wrap: wrap;
  max-width: 100%;

  &.glue-social--zippy {
    .glue-social__item {
      opacity: 0;
      position: absolute;
    }
  }
}

.glue-social__group {
  align-items: center;
  align-self: center;
  display: flex;
  flex: 0 0 100%;
  flex-wrap: wrap;
  margin: 0;

  & + .glue-social__group {
    margin-top: 30px;

    @include breakpoints.bp(lg) {
      margin-top: 0;
    }
  }

  &.glue-expansion-panel {
    border: 0;
    display: inline-flex;
    align-items: flex-start;
    height: variables.$glue-social-mobile-height;

    @include breakpoints.bp(md) {
      align-items: center;
      height: initial;
    }

    &:last-child {
      border: 0;
    }

    .glue-expansion-panel__content {
      // prevents tooltips from calculating position based on panel dimensions
      overflow: initial;
    }
  }

  .glue-social--zippy-opposite & {
    flex-direction: row-reverse;
  }
}

.glue-social__title {
  @extend %glue-cta;
  @extend %glue-social-title-margin;

  flex: 0 0 100%;

  svg {
    display: inline-flex;
  }

  &.glue-social__title--inline {
    align-self: start;
    display: inline-flex;
    flex: 0 0 auto;
    padding-block-start: 12px;
  }

  &.glue-social__title--trigger {
    margin: 0;
    position: relative;

    &:hover,
    &:focus {
      color: colors.$link-active;
    }

    &:focus {
      background: colors.$white;
    }
  }

  &.glue-social__title--zippy {
    position: relative;

    &.glue-expansion-panel__button {
      @extend .glue-button;
      @extend .glue-button--low-emphasis;
      @extend %glue-social-title-margin;

      border-bottom-color: transparent; // hide expansion panel style
      display: inline-flex;
      padding: 2px 12px 0;
      width: auto;

      svg {
        display: inline-flex;
      }

      &:focus {
        @include accessibility-mixins.hcm-focus;
      }
    }

    .glue-social--zippy-opposite & {
      @extend %glue-social-title-margin-opposite;
    }
  }
}

.glue-social__list {
  display: flex;
  flex: 1;
  flex-wrap: wrap;
  list-style: none;
  margin: 0;
  max-width: 100%;

  .glue-expansion-panel & {
    padding-top: variables.$glue-social-mobile-list-padding;
    @include breakpoints.bp(md) {
      flex-wrap: nowrap;
      padding-top: 0px;
    }
  }

  @include breakpoints.bp(md) {
    flex-wrap: nowrap;
  }

  .glue-social--zippy-opposite & {
    flex-direction: row-reverse;
  }
}

.glue-social__item {
  @extend %glue-social-button-margin;

  align-items: center;
  align-self: center;
  display: inline-flex;
  flex: 0 0 auto;
  height: variables.$icon-container-size;
  width: variables.$icon-container-size;

  &:last-child {
    margin-inline-end: 0;
  }

  &:focus-within {
    border: 2px solid variables.$glue-focus-border-color;
    border-radius: 50%;
  }

  .glue-social--zippy-opposite & {
    @extend %glue-social-button-margin-opposite;
  }

  .glue-social__link {
    align-items: center;
    border-radius: 50%;
    color: currentColor;
    display: flex;
    height: 100%;
    justify-content: center;
    margin: 0 auto;
    padding: 2px;
    transition: none;
    transition-property: none;
    width: 100%;

    &:hover,
    &:focus {
      background: variables.$glue-focus-bg-color;
      box-shadow: none;
      color: currentColor;
      outline: none;
    }
  }

  .glue-icon--social {
    @include accessibility-mixins.hcm-mq {
      fill: accessibility-variables.$hcm-color-link-text;
    }

    .glue-social--monochrome & {
      @include accessibility-mixins.hcm-mq {
        fill: accessibility-variables.$hcm-color-link-text;
      }
      fill: colors.$grey-900;
    }

    &.glue-icon--color-sharemail,
    &.glue-icon--color-email,
    &.glue-icon--color-sharelink {
      .glue-social--partialmonochrome & {
        @include accessibility-mixins.hcm-mq {
          fill: accessibility-variables.$hcm-color-link-text;
        }
        fill: colors.$grey-900;
      }
    }
  }

  .glue-social--zippy & {
    opacity: 0;
    position: absolute;
    transform: translateX(-(variables.$translate-distance));
    transition: transform variables.$animation-timing-close
        variables.$animation-function-close,
      opacity variables.$animation-timing-close
        variables.$animation-function-close;
  }
}

.glue-social__share-icon {
  fill: currentColor;
  margin-inline: 0 10px;
  padding: 0;

  @include accessibility-mixins.hcm-mq {
    fill: accessibility-variables.$hcm-color-link-text;
  }
}

// We use for loop to set translateX value for each link to implement
// the zippy animation. 10 is the max number of links we may have.
.glue-social--zippy {
  .glue-is-expanded {
    .glue-social__item {
      opacity: 1;
      pointer-events: auto;

      @for $i from 0 to variables.$num-links {
        &:nth-child(#{$i}) {
          transition: transform
              variables.$animation-timing-open
              variables.$animation-function-open,
            opacity
              variables.$animation-timing-open
              variables.$animation-function-open;

          // If icons are greater than the mobile limit, it will create a second row
          @if $i > variables.$link-mobile-row-max {
            transform: translate(
              variables.$translate-distance *
                (($i - variables.$link-mobile-row-max) - 1),
              variables.$translate-distance
            );
          } @else {
            transform: translate(variables.$translate-distance * ($i - 1), 0);
          }

          @include breakpoints.bp(md) {
            transform: translate(variables.$translate-distance * ($i - 1), 0);
          }

          [dir='rtl'] &,
          :host([dir='rtl']) & {
            @if $i > variables.$link-mobile-row-max {
              transform: translate(
                -(variables.$translate-distance) *
                  (($i - variables.$link-mobile-row-max) - 1),
                variables.$translate-distance
              );
            } @else {
              transform: translate(
                -(variables.$translate-distance) * ($i - 1),
                0
              );
            }

            @include breakpoints.bp(md) {
              transform: translate(
                -(variables.$translate-distance) * ($i - 1),
                0
              );
            }
          }
        }
      }
    }
  }

  .glue-is-collapsed {
    .glue-social__item {
      opacity: 0;
      pointer-events: none;

      @for $i from 0 to variables.$num-links {
        &:nth-child(#{$i}) {
          transform: translateX(
            (-(variables.$translate-distance) * 2) +
              ($i * variables.$translate-distance)
          );
          transition: transform
              variables.$animation-timing-close
              variables.$animation-function-close,
            opacity
              variables.$animation-timing-close
              variables.$animation-function-close;

          [dir='rtl'] &,
          :host([dir='rtl']) & {
            transform: translateX(
              (variables.$translate-distance * 2) -
                ($i * variables.$translate-distance)
            );
          }
        }
      }
    }
  }
}

.glue-social--zippy-opposite {
  .glue-is-expanded {
    .glue-social__item {
      @for $i from 0 to variables.$num-links {
        &:nth-child(#{$i}) {
          transition: transform
              variables.$animation-timing-open
              variables.$animation-function-open,
            opacity
              variables.$animation-timing-open
              variables.$animation-function-open;

          // If icons are greater than the mobile limit, it will create a second row
          @if $i > variables.$link-mobile-row-max {
            transform: translate(
              -(variables.$translate-distance) *
                (($i - variables.$link-mobile-row-max) - 1),
              variables.$translate-distance
            );
          } @else {
            transform: translate(
              -(variables.$translate-distance) * ($i - 1),
              0
            );
          }

          @include breakpoints.bp(md) {
            transform: translate(
              -(variables.$translate-distance) * ($i - 1),
              0
            );
          }

          [dir='rtl'] &,
          :host([dir='rtl']) & {
            @if $i > variables.$link-mobile-row-max {
              transform: translate(
                variables.$translate-distance *
                  (($i - variables.$link-mobile-row-max) - 1),
                variables.$translate-distance
              );
            } @else {
              transform: translate(variables.$translate-distance * ($i - 1), 0);
            }

            @include breakpoints.bp(md) {
              transform: translate(variables.$translate-distance * ($i - 1), 0);
            }
          }
        }
      }
    }
  }

  .glue-is-collapsed {
    .glue-social__item {
      @for $i from 0 to variables.$num-links {
        &:nth-child(#{$i}) {
          transform: translateX(
            (variables.$translate-distance * 2) -
              ($i * variables.$translate-distance)
          );
          transition: transform
              variables.$animation-timing-close
              variables.$animation-function-close,
            opacity
              variables.$animation-timing-close
              variables.$animation-function-close;

          [dir='rtl'] &,
          :host([dir='rtl']) & {
            transform: translateX(
              (-(variables.$translate-distance) * 2) +
                ($i * variables.$translate-distance)
            );
          }
        }
      }
    }
  }
}

.glue-social__popover {
  height: 100%;
  width: 100%;
}

.glue-social__dialog {
  @include elevation.set-level(1);
  @extend %glue-social-dialog-spacing;
  border: none;
  display: flex;
  outline: none;
  position: absolute;
  text-align: start;
  top: 0;
  z-index: variables.$popover-z-index;

  @include accessibility-mixins.hcm-mq {
    outline: 1px solid transparent;
  }

  .glue-social--zippy-opposite & {
    @extend %glue-social-dialog-spacing-opposite;
    flex-direction: row-reverse;
    text-align: end;

    .glue-icon--social {
      margin-inline: 14px 2px;
    }
  }

  .glue-icon--social {
    margin-block: 6px 0;
    margin-inline: 2px 14px;
  }

  .glue-button {
    &.glue-is-copied {
      color: variables.$copied-btn-color;
      min-width: 184px;

      &:hover {
        color: variables.$copied-btn-color;
      }

      @include accessibility-mixins.hcm-mq {
        color: accessibility-variables.$hcm-color-disabled-text;

        &:hover {
          background: accessibility-variables.$hcm-color-background;
          border-color: accessibility-variables.$hcm-color-disabled-text;
          color: accessibility-variables.$hcm-color-disabled-text;
        }
      }
    }
  }
}

.glue-social__close-btn {
  @include typography-mixins.calculate-unitless-line-height(
    variables.$close-btn-line-height,
    variables.$close-btn-font-size
  );

  color: colors.$grey-900;
  height: 16px;
  inset-inline-end: 4px;
  text-align: center;
  top: 4px;
  width: 16px;

  &:focus {
    background: variables.$glue-focus-bg-color;
  }

  .glue-social--zippy-opposite & {
    inset-inline-start: 4px;
    inset-inline-end: auto;
  }
}

.glue-social__copy-container {
  align-items: flex-end;
  background-color: variables.$copy-container-bg-color;
  display: flex;
  margin: 24px -24px -24px;
  padding: 4px 8px;
  width: calc(100% + 48px);
}

.glue-social__copy-input {
  @extend %glue-small-text;

  border: none;
  border-bottom: 2px solid colors.$grey-200;
  color: colors.$grey-700;
  display: block;
  min-width: 200px;
  padding: variables.$zippy-icon-padding 0;
  text-align: start;

  &:focus {
    border-bottom: 2px solid colors.$link-active;

    .glue-social__copy-container & {
      background: colors.$grey-200;
    }
  }

  .glue-social--zippy-opposite & {
    text-align: end;
  }
}

.glue-social__copy-btn {
  @extend .glue-button;
  @extend .glue-button--low-emphasis;

  margin-block: 8px;
  margin-inline: -14px 0;

  .glue-social--zippy & {
    margin-block: 4px;
    margin-inline: -12px 0;
  }

  .glue-social--zippy-opposite & {
    margin-block: 4px;
    margin-inline: 0 -12px;
    text-align: end;
  }
}

.glue-social__icon-trigger {
  align-items: center;
  border-radius: 50%;
  display: flex;
  height: 100%;
  justify-content: center;
  margin: 0 auto;
  padding: 0;
  position: relative;
  width: 100%;

  &:hover,
  &:focus {
    background: variables.$glue-focus-bg-color;
    outline: none;

    .glue-is-shown & {
      background: transparent;
      box-shadow: 0 0 0 variables.$zippy-icon-padding transparent;
    }
  }
}

.glue-social--zippy-opposite {
  flex-direction: row-reverse;
}

// Persistent social styles
.glue-social--persistent {
  background: colors.$white;
  border: 1px solid colors.$grey-200;
  border-radius: variables.$persistent-border-radius;
  bottom: variables.$persistent-mobile-edge-spacing;
  inset-inline-end: 50%;
  position: fixed;
  transform: translateX(50%);
  z-index: variables.$persistent-z-index;

  [dir='rtl'] &,
  :host[dir='rtl'] & {
    transform: translateX(-50%); // recenter on RTL pages
  }

  @include breakpoints.bp(md) {
    bottom: 50%;
    inset-inline-end: variables.$persistent-desktop-edge-spacing;
    transform: translateY(50%);

    [dir='rtl'] &,
    :host[dir='rtl'] & {
      transform: translateY(50%); // realign on RTL pages
    }
  }

  .glue-social__list {
    flex-wrap: nowrap;

    @include breakpoints.bp(md) {
      flex-direction: column;
    }
  }

  .glue-social__item {
    margin: 0;

    &:focus-within {
      border-color: colors.$white;
      box-shadow: inset 0 0 0 2px colors.$blue-500;
    }
  }

  .glue-social__link,
  .glue-social__icon-trigger {
    padding: 4px;

    &:hover {
      box-shadow: inset 0 0 0 2px colors.$white;
    }

    &:focus {
      background-color: transparent;

      &:hover {
        box-shadow: none;
      }

      & ~ .glue-social__tooltip-content {
        // Adjust tooltip position from adding border to focused trigger
        left: -2px;
        top: -(variables.$icon-container-size +
              variables.$persistent-mobile-tooltip-spacing + 2px);

        @include breakpoints.bp(md) {
          // Set custom position for tooltips at larger breakpoints
          left: initial;
          inset-inline-end: variables.$icon-container-size +
            variables.$persistent-desktop-tooltip-spacing;
          top: -2px;
          transform: none;
        }
      }
    }
  }

  .glue-social__dialog {
    inset-inline-start: 50%;
    position: fixed; // align with page, not component


    @include breakpoints.bp(md) {
      inset-inline: auto (variables.$persistent-desktop-tooltip-spacing + 48px);
      // To move dialog away from the edge of Social container.
      margin-inline: 0 12px;
      position: absolute; // realign with component, not page
      top: 0;


      // flip direction of content since it's fixed to the edge of the viewport
      flex-direction: row-reverse;
      padding-block: 4px 0;
      padding-inline: variables.$zippy-icon-padding;
      text-align: end;

      .glue-icon--social {
        margin-inline: 14px 2px;
      }

      .glue-social__copy-input {
        text-align: end;
      }

      .glue-social__copy-btn {
        margin-block: 4px;
        margin-inline: 0 -12px;
        text-align: end;
      }

      .glue-social__close-btn {
        inset-inline-start: 4px;
        inset-inline-end: auto;
      }
    }
  }

  .glue-social__popover {
    &.glue-is-shown {
      .glue-social__dialog {
        transform: translate(-50%, calc(-100% - 8px));

        [dir='rtl'] &,
        :host[dir='rtl'] & {
          transform: translate(50%, calc(-100% - 8px));
        }

        @include breakpoints.bp(md) {
          transform: none;

          [dir='rtl'] &,
          :host[dir='rtl'] & {
            transform: none;
          }
        }
      }
    }
  }

  .glue-social__tooltip-content {
    display: none; // hide tooltips before they are initialized
    // Set custom position for tooltips
    left: 0;
    top: -(variables.$icon-container-size +
          variables.$persistent-mobile-tooltip-spacing);
    transform: translateX(-25%);
    visibility: hidden; // enforce hidden for untoggled tooltips

    @include breakpoints.bp(md) {
      // Set custom position for tooltips at larger breakpoints
      left: initial;
      inset-inline-end: variables.$icon-container-size +
        variables.$persistent-desktop-tooltip-spacing + 2px;
      top: 0;
      transform: none;
    }

    &.glue-tooltip__content {
      display: block; // show tooltips after initialized
    }

    &.glue-tooltip__content--shown,
    &.glue-tooltip__content--animation {
      visibility: visible; // make tooltip visible when interacted with
    }
  }
}

// Tooltip adjustments
.glue-social__tooltip-content {
  &.glue-tooltip__content--shown,
  &.glue-tooltip__content--animation {
    z-index: (
      variables.$popover-z-index - 1
    ); // Make sure it doesn't show over popover
  }
}
