//!! generated by tsickle from marketing/glue/lib/tabs/index.ts
import { Component } from '../base';
import { Observer, ObserverDataObj } from '../observer';
declare interface TabsOptions {
    currentTab: number;
}
declare interface TabsObserverData extends ObserverDataObj {
    currentTab: number;
}
declare interface TabsDef {
    setActiveTab: (idx: number) => void;
    getActiveTab: () => number;
    observer: Observer<TabsObserverData>;
}
/**
 * Static Tabs creates tabs of content in a progressive, enhanced way and
 * is accessible through keyboard and screen reader.
 */
declare class Tabs extends Component implements TabsDef {
    observer: Observer<TabsObserverData>;
    private readonly tablist;
    private readonly tabs;
    private readonly tabPanels;
    private readonly totalTabs;
    private readonly currentTabChangeHandler;
    /**
     * @see {Compoment.constructor}
     */
    constructor(root: HTMLElement, options?: TabsOptions);
    private validateElements;
    /** Get the current Tab value from data attributes. */
    private getDataAttribute;
    /** Render the Tabs component. */
    private render;
    /**
     * Provide spoken feedback to describe this component as tabs. If you've
     * added new dom, you'll want to call this method.
     */
    private setAriaRoles;
    /** Remove all aria roles. */
    private removeAriaRoles;
    /**
     * Handles a click.
     * @param e The event from the click.
     */
    private readonly handleClick;
    /**
     * Handles key press events to trigger changing the selected page. When the
     * user uses arrow left/right, it changes the active tab in the component.
     */
    private readonly handleKeydown;
    setActiveTab(idx: number): void;
    getActiveTab(): number;
    /**
     * Return true if the tab index value is between 1 and the total tabs count.
     */
    private isValidTab;
    /** Restores DOM back to previous state and removes event listeners. */
    destroy(): void;
}
export { Tabs };
