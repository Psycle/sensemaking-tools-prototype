//!! generated by tsickle from marketing/glue/lib/math/box.ts
/**
 * @fileoverview A utility class for representing a numeric box.
 * This is lifted from closure goog.math.box function. This has been
 * moved to Glue to remove closure dependency.
 * https://github.com/google/closure-library/blob/master/closure/goog/math/box.js
 */
import { Coordinate } from './coordinate';
/**
 * Class for representing a box.
 */
declare class Box {
    top: number;
    right: number;
    bottom: number;
    left: number;
    constructor(top: number, right: number, bottom: number, left: number);
    /**
     * Returns whether the box contains a coordinate or another box.
     */
    contains(other: Coordinate | Box): boolean;
    /**
     * Returns whether a box contains a coordinate or another box.
     */
    static contains(box: Box, other: Coordinate | Box): boolean;
    /**
     * Returns whether two boxes intersect.
     */
    static intersects(a: Box, b: Box): boolean;
    /**
     * Returns the distance between a coordinate and the nearest corner/side of a
     * box. Returns zero if the coordinate is inside the box.
     */
    static distance(box: Box, coord: Coordinate): number;
    /**
     * Returns the distance between a coordinate and the nearest corner/side of a
     * box. Returns zero if the coordinate is inside the box.
     */
    distance(coord: Coordinate): number;
    /**
     * Returns the relative x position of a coordinate compared to a box.  Returns
     * zero if the coordinate is inside the box.
     */
    static relativePositionX(box: Box, coord: Coordinate): number;
    /**
     * Returns the relative x position of a coordinate compared to a box.  Returns
     * zero if the coordinate is inside the box.
     */
    relativePositionX(coord: Coordinate): number;
    /**
     * Returns the relative y position of a coordinate compared to a box.  Returns
     * zero if the coordinate is inside the box.
     */
    static relativePositionY(box: Box, coord: Coordinate): number;
    /**
     * Returns the relative y position of a coordinate compared to a box.  Returns
     * zero if the coordinate is inside the box.
     */
    relativePositionY(coord: Coordinate): number;
    /**
     * Translates this box by the given offsets. If a `Coordinate`
     * is given, then the left and right values are translated by the coordinate's
     * x value and the top and bottom values are translated by the coordinate's y
     * value.  Otherwise, `tx` and `ty` are used to translate the x
     * and y dimension values.
     * @param tx The value to translate the x
     *     dimension values by or the coordinate to translate this box by.
     * @param ty The value to translate y dimension values by.
     * @return This box after translating.
     */
    translate(tx: number | Coordinate, ty?: number): Box;
    /**
     * Scales this coordinate by the given scale factors.
     * @param sx The scale factor to use for the x dimension - or both dimensions
     *           if sy is omitted.
     * @param sy The scale factor to use for the y dimension.
     * @return This box after scaling.
     */
    scale(sx: number, sy?: number): Box;
    /**
     * Expand this box to include another box.
     * @param box The box to include in this one.
     */
    expandToInclude(box: Box): void;
    /**
     * Expands box with the given margins.
     * @param top Top margin or box with all margins.
     * @param right Right margin.
     * @param bottom Bottom margin.
     * @param left Left margin.
     * @return A reference to this Box.
     */
    expand(top: number | Box, right?: number, bottom?: number, left?: number): Box;
}
export { Box };
