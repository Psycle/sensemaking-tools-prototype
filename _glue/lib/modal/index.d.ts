//!! generated by tsickle from marketing/glue/lib/modal/index.ts
import { Component } from '../base';
declare interface ModalDef {
    open: () => void;
    close: () => void;
    setFocusAfterClosed: (el: HTMLElement) => void;
}
declare class Modal extends Component implements ModalDef {
    private readonly focusFirst;
    private focusAfterClosed;
    private lastFocus;
    private readonly closeBtn;
    private ignoreFocusChange;
    private ariaHiddenElements;
    private readonly handleKeyDown;
    private readonly handleCloseBtnClick;
    private readonly handleFocus;
    /** Handle modal transition ends. */
    private readonly handleTransitionEnds;
    /**
     * Modal object providing focus management.
     * The element is present in the DOM and hidden.
     * The modal has role='dialog'.
     * @param el the element serving as the modal dialog.
     * @param focusAfterClosed The element to focus when the modal closes.
     * @param focusFirst The first element will receive focus after modal opens.
     */
    constructor(el: HTMLElement, focusAfterClosed: HTMLElement, focusFirst?: HTMLElement | null);
    /**
     * Throw an error if close button does not exist.
     */
    private init;
    /**
     * Set focus on descendant nodes until the first focusable element is
     * found.
     * @param element DOM node for which to find the first focusable descendant.
     * @return true if a focusable element is found and focus is set.
     */
    private focusFirstDescendant;
    /**
     * Find the last descendant node that is focusable.
     * @param element DOM node for which to find the last focusable descendant.
     * @return true if a focusable element is found and focus is set.
     */
    private focusLastDescendant;
    /**
     * Attempt to set focus on the current node.
     * @param element The node to attempt to focus on.
     * @return true if element is focused.
     */
    private attemptFocus;
    /**
     * Trap focus inside the modal dialog.
     * @param e focus event.
     */
    private trapFocus;
    /**
     * Open the modal dialog.
     */
    open(): void;
    /**
     * Close the modal dialog and deregister event listeners.
     */
    close(): void;
    /**
     * Set aria hidden to true for all other elements.
     * This method provides complementary A11y support before aria-modal
     * The code is referenced from
     * https://source.corp.google.com/piper///depot/google3/googledata/html/external_content/scs_corp/ariablueprints/dialog/dialog-modal-1.0.html;l=81-101
     * gets broader browser support.
     */
    private ariaHideElements;
    /**
     * Remove aria hidden to false for all other elements.
     */
    private ariaUnhideElements;
    setFocusAfterClosed(el: HTMLElement): void;
    destroy(): void;
}
export { Modal };
