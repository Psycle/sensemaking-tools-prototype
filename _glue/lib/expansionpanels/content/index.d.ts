//!! generated by tsickle from marketing/glue/lib/expansionpanels/content/index.ts
import { Component } from '../../base';
/**
 * Class for creating expansion panels content.
 */
declare class ExpansionPanelsContent extends Component {
    private readonly model;
    private readonly groupEl;
    private readonly panelEl;
    private readonly toggleButton;
    /**
     * An array to hold the tabindex value of focusable child elements of panel
     * content, so it can be adjusted when the panel content is expanded or
     * collapsed.
     */
    private tabIndexArr;
    private isCollapsed;
    private readonly toggleContentHandler;
    private readonly expandHandler;
    private readonly collapseHandler;
    private readonly transitionendHandler;
    /**
     * Keeps track of the panel height (unitless, but ultimately in pixels).
     */
    private panelHeight;
    /**
     * @param root The HTML element containing the individual panel's content.
     */
    constructor(root: HTMLElement);
    init(): void;
    destroy(): void;
    /**
     * Expands (shows) the content, both visually and to screen readers
     */
    expand(): void;
    /**
     * Collapses (hides) the content, both visually and to screen readers
     */
    collapse(): void;
    /**
     * When toggle event is fired, expands or collapses the content element.
     * @param target The ID of the panel that should be toggled.
     */
    private toggleContent;
    /**
     * Updates content element's ARIA attributes and adds/removes classes based
     * on context (Expanded / Collapsed).
     * @param flag The flag to check if the state is
     * expanded or collapsed.
     */
    private updateHtmlAttributes;
    /**
     * Updates height of content element based on context (Expanded / Collapsed).
     * @param flag The flag to check if the state is
     * expanded or collapsed.
     */
    private updateHeight;
    /**
     * Updates status of content element based on context (Expanded / Collapsed).
     * @param flag The flag to check if the state is
     * expanded or collapsed.
     */
    private updateStatus;
    /**
     * Get tabindex array.
     */
    private getTabIndexArray;
    /**
     * Set content height.
     */
    private setPanelHeight;
    /**
     * Unset content height.
     */
    private unsetPanelHeight;
    /**
     * Get localised tooltip text from the template file
     * @param isPanelExpanded The flag to check if the panel is expanded or not
     */
    private getTooltipText;
    /**
     * Set aria attributes.
     */
    private setAriaAttributes;
    /**
     * Remove aria attributes.
     */
    private removeAriaAttributes;
    /**
     * Set focusable elements.
     */
    private setFocusableElements;
    /**
     * Add a11y features.
     */
    private addA11yFeatures;
    /**
     * Remove a11y features.
     */
    private removeA11yFeatures;
}
export { ExpansionPanelsContent };
