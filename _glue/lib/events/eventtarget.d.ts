//!! generated by tsickle from marketing/glue/lib/events/eventtarget.ts
/**
 * @fileoverview A lightweight implementation of the Observable pattern, with
 * a Closure-like API.
 */
/**
 * Also see {@code goog.events.EventLike}
 */
type EventLike = string | Record<string, unknown>;
type EventTargetHandler = (eventData?: EventLike) => void;
declare class EventTarget {
    private readonly listeners;
    constructor();
    /**
     * Emits an event.
     * Note: This interface differs from the Closure dispatchEvent method. The
     * parameters are different. See {@code goog.events.Listenable.dispatchEvent}
     * @param eventData Additional event data.
     */
    dispatchEvent(evtType: string, eventData?: EventLike): void;
    /**
     * Listens to an event, and executes a handler function when it fires.
     */
    listen(evtType: string, handler: EventTargetHandler): void;
    /**
     * Stops listening to an event.
     */
    unlisten(evtType: string, handler: EventTargetHandler): void;
    /**
     * Returns the list of listeners for a specific event type.
     */
    private getListenersList;
    /**
     * Removes all listeners on the host component.
     */
    removeAllListeners(): void;
}
export { EventTarget, type EventLike, type EventTargetHandler };
