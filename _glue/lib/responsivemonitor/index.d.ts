//!! generated by tsickle from marketing/glue/lib/responsivemonitor/index.ts
type ResponsiveChangeHandler = (size: string) => void;
type MediaQueryCallback = (mql: MediaQueryList) => void;
type Rule = MediaQueryRule | BreakpointRule;
type RuleSet = Rule | Rule[];
interface MediaQueryRule {
    media: string;
    transform: MediaQueryCallback;
    revert?: MediaQueryCallback;
}
interface BreakpointRule {
    breakpoint: string | string[];
    enter(size: string): void;
    leave?(size: string): void;
}
/**
 * Calls handler functions when the document object matches a media query, or
 * when a CSS-injected named breakpoint is included in a list of strings. Can
 * also call another handler when one of the condition above does not apply
 * anymore.
 *
 * This typically can be used to enable or disable a UI component based on the
 * viewport size.
 *
 * Example:
 *
 * new ResponsiveMonitor({
 *   breakpoint: ['medium', 'large'],
 *   enter: (size) => component.start(),
 *   leave: (size) => component.stop(),
 * });
 *
 * new ResponsiveMonitor({
 *   media: '(min-width: 600px)',
 *   transform: (mql) => component.start(),
 *   revert: (mql) => component.stop(),
 * });
 *
 * new ResponsiveMonitor([{
 *   media: '(max-width: 400px)',
 *   transform: (mql) => component1.start(),
 * }, {
 *   media: '(min-width: 501px) and (max-width: 800px)',
 *   transform: component2.start(),
 * }]);
 *
 * For simpler use cases, it is also possible to have a function called every
 * time the current breakpoint changes.
 *
 * const rm = new ResponsiveMonitor();
 * rm.listen((size) => {
 *   if (size == 'medium') {
 *     component.start();
 *   }
 * });
 */
declare class ResponsiveMonitor {
    private mqRuleHandlerMaps;
    private bpChangeHandlers;
    private bpRuleHandlerMaps;
    private currentBreakpoint;
    private previousBreakpoint;
    private readonly vpUpdateHandler;
    private static instance;
    /**
     * Returns unique monitor instance.
     */
    static getInstance(): ResponsiveMonitor;
    /**
     * @param configRules One or several media queries associated with callbacks
     *     to trigger when their result changes.
     */
    constructor(configRules?: RuleSet);
    /**
     * Listens to media query or breakpoint changes.
     */
    listen(handler: ResponsiveChangeHandler | Rule): void;
    /**
     * Stops listening to media query or breakpoint changes.
     */
    unlisten(handler: ResponsiveChangeHandler | Rule): void;
    /**
     * Stops listening to all media query and breakpoint rules.
     */
    destroy(): void;
    /**
     * Returns the last known named breakpoint.
     */
    getCurrentBreakpoint(): string;
    private isBreakpointRule;
    private isMediaQueryRuleRule;
    /**
     * Setup callback functions on a media query or a set of named breakpoints.
     * @param rule Configuration properties.
     */
    private addRule;
    /**
     * Disable callback functions on a media query or a set of named breakpoints.
     * @param rule Configuration properties.
     */
    private removeRule;
    /**
     * Setup callback functions on a set of named breakpoints.
     */
    private addBreakpointRule;
    /**
     * Disable callback functions on a set of named breakpoints.
     */
    private removeBreakpointRule;
    /**
     * Setup callback functions on a media query.
     */
    addMediaQueryRule(rule: MediaQueryRule): void;
    /**
     * Disable callback functions on a media query.
     */
    private removeMediaQueryRule;
    /**
     * Creates a function that will trigger callbacks based on the media
     * query's result.
     * @param transformFunc Function to call if the media query result is true.
     * @param revertFunc Function to call if the media query result reverts to
     *     false.
     * @return A function used as handler of a media query list.
     */
    private handleMediaQueryChange;
    /**
     * Fires breakpoint callbacks if the current named breakpoint parsed from the
     * DOM has changed since the previous call.
     */
    private handleViewportUpdate;
    /**
     * Retrieves the named breakpoint currently injected in DOM.
     */
    private readBreakpoint;
}
export { ResponsiveMonitor, type BreakpointRule, type MediaQueryRule, type Rule, type RuleSet, };
