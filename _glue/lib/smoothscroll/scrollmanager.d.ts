//!! generated by tsickle from marketing/glue/lib/smoothscroll/scrollmanager.ts
/**
 * @fileoverview Manages the scrolling animation operations for SmoothScroll.
 * Can be used independently of the SmoothScroll component to actuate scrolling.
 */
import { SmoothScrollOptions } from './constants';
declare class ScrollManager {
    private scrollElement;
    private elapsedTime;
    private startTime;
    animationFrame: number;
    private easingFunction;
    private position;
    private distance;
    private startPosition;
    private endPosition;
    private config;
    private readonly mousewheelHandlerFunc;
    constructor();
    /**
     * Starts scroll, broadcasts 'start scroll' event and attaches mousewheel
     * event listener to window object.
     * @param element The element to scroll to.
     * @param config The config object for this scroll.
     */
    startScroll(element: Element, config?: SmoothScrollOptions): void;
    /**
     * Stops smooth scroll.
     */
    stopScroll(): void;
    /**
     * Recursively scrolls the page until it reaches the element.
     */
    private animateScroll;
    /**
     * Calculates the position based on elapsed time.
     */
    private calculatePosition;
    /**
     * Gets the page scroll position.
     * @return Page scroll position.
     */
    private getScrollPosition;
    /**
     * Gets the scroll position of the element.
     * @return The scroll position of the element.
     */
    private getEndPosition;
    /**
     * Updates scroll position.
     */
    private updatePosition;
    /**
     * Updates scroll left position.
     */
    private updateScrollLeft;
    /**
     * Updates scroll top position.
     */
    private updateScrollTop;
    /**
     * Handler function for mousewheel event.
     */
    private mousewheelHandler;
    /**
     * Remove the moisewheel event listener.
     */
    removeMousewheelListener(): void;
    /**
     * Stopp the scrolling action and Destroy the component.
     */
    destroy(): void;
}
export { ScrollManager };
