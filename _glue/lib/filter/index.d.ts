//!! generated by tsickle from marketing/glue/lib/filter/index.ts
import { Component } from '../base';
import { FilterStateManager } from './state_manager';
declare interface FilterDef {
    reset: () => void;
    getFilteredItems: () => HTMLElement[] | undefined;
    getStateManager: () => FilterStateManager;
}
/** A class to filter a list of content. */
declare class Filter extends Component implements FilterDef {
    /** Instance of FilterChips. */
    private chips;
    /** A collection of filter categories. */
    private readonly categories;
    /** Instance of FilterResult. */
    private results;
    /** Reset all buttons */
    private resetAllEls;
    private readonly handleReset;
    private readonly handleUpdateResetButton;
    /** Modal subcomponent and its triggers */
    private modal?;
    private responsiveModal?;
    private readonly modalEl;
    private readonly modalToggleEl;
    private readonly modalCloseEl;
    private readonly handleOpenModal;
    private readonly handleCloseModal;
    /** Expansion panels subcomponent */
    private expansionPanels?;
    private readonly expansionPanelsEl;
    /** Creates an instance of GlueFilter. */
    constructor(root: HTMLElement);
    /** Initializes subfeatures of the filter component. */
    private init;
    /** Initializes filter category elements. */
    private initCategories;
    /** Initializes results container element. */
    private initResults;
    /** Initializes chips if the container element exists. */
    private initChips;
    /** Initializes reset all buttons if they exist. */
    private initResetAll;
    /** Initializes expansion panels if they exist */
    private initPanels;
    /** Initializes responsive monitor to create/destroy modal if modal exists */
    private initResponsiveModal;
    /**
     * Removes event listeners and destroys subcomponents.
     */
    destroy(): void;
    /**
     * Resets all filters, or a single filter if the filter category is specified.
     * @param category The filter category to reset.
     */
    reset(category?: string): void;
    /**
     * Returns a list of matched items.
     */
    getFilteredItems(): HTMLElement[];
    /**
     * Returns the StateManager.
     */
    getStateManager(): FilterStateManager;
    /**
     * Updates class on the Reset All buttons when filters are toggled.
     * Class should only be added when at least one filter is active.
     */
    private updateResetButton;
}
export { Filter, FilterStateManager };
