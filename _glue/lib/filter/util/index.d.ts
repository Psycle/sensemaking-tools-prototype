//!! generated by tsickle from marketing/glue/lib/filter/util/index.ts
interface FilterData {
    strategy?: string;
    [propName: string]: FilterGroup | string | undefined;
}
type FilterGroup = Record<string, boolean>;
type FilterTarget = Record<string, string[]>;
type FilterMatchFunc = (filter: FilterData, key: string, value: string) => boolean;
/**
 * Returns matching results for a list of data.
 *
 *  The first argument is targetArray which includes a list of targets.
 *  Each target is an object which represents a filter category and
 *  possible values.
 *  Example:
 *  targetArray: Target[] = [
 *    {
 *      'color': ['green', 'red'],
 *      'type': ['fruit'],
 *    },
 *    {
 *      'color': ['yellow'],
 *      'type': ['vegetable'],
 *    }
 *  ]
 *
 *  The second parameter is a filter object, which represents the matching
 *  criteria used to evaluate the list of items.
 *  Example:
 *  filter: Filter = {
 *    'type': {
 *      'vegetable': true,
 *      'fruit': false,
 *    },
 *    'color': {
 *      'red': true,
 *      'orange': true,
 *      'yellow': false,
 *      'green': false
 *    }
 *  }
 *  The output is an array of boolean values, they represent whether the
 *  corresponding items are matched. Example: [true,true,false].
 * @param targetArr The target data object to filter
 * @param filter The filter object with stategy and filters.
 * @param matchFunc An optional function to use for matching.
 * @return The result showing whether the data matches the filter.
 */
declare function filterlist(targetArr: FilterTarget[], filter: FilterData, matchFunc?: FilterMatchFunc): boolean[];
export { filterlist, type FilterData, type FilterGroup, type FilterMatchFunc, type FilterTarget, };
