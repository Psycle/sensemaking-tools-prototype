//!! generated by tsickle from marketing/glue/lib/filter/category/index.ts
import { Component } from '../../base';
import { Observer } from '../../observer';
import { FilterDataModel } from '../constants';
/**
 * A filter category class to manage an individual Glue filter.
 */
declare class FilterCategory extends Component {
    category?: string;
    chips: {
        [key: string]: string;
    };
    model: Observer<FilterDataModel>;
    private readonly nativeCategoryItems;
    private readonly materialCategoryItems;
    private readonly selectEl;
    private readonly materialSelectEl;
    private readonly mwc3SelectEl;
    private materialSelect?;
    private readonly categoryCountEl;
    private readonly stateManager;
    private readonly handleSelectChangeFunc;
    private readonly handleMaterialSelectChangeFunc;
    private readonly handleMWC3SelectChangeFunc;
    private readonly handleInputChangeFunc;
    /**
     * Creates an instance of GlueFilterCategory.
     */
    constructor(root: HTMLElement);
    private init;
    /**
     * Removes event listeners on filter elementss.
     */
    destroy(): void;
    /**
     * Resets the data model.
     */
    reset(): void;
    /** Initializes the select element. */
    private initSelect;
    /**
     * Initializes the Material Select element.
     */
    private initMaterialSelect;
    /**
     * Initializes the MWC3 Select element.
     */
    private initMWC3Select;
    /**
     * Initializes native HTML input checkbox or radio elements.
     */
    private initNativeInputs;
    /**
     * Initializes Material input checkbox or radio elements.
     */
    private initMaterialInputs;
    /**
     * Handles the select element when it changes using single-select parameters.
     * @param evt Change event.
     */
    private handleSelectChange;
    /**
     * Handles the Material Select element when it changes by updating the data
     * model and the Material Select element.
     * @param evt Change event from MDCSelect.
     */
    private handleMaterialSelectChange;
    /**
     * Handles the MWC3 Select element when it changes by updating the data
     * model and the Material Select element.
     * @param evt Change event from md-select.
     */
    private handleMWC3SelectChange;
    /**
     * Handles native HTML or Material input checkbox or radio elements on change.
     * @param evt Change event.
     */
    private handleInputChange;
    /**
     * Updates the filter item's value in the data model if it already exists, or
     * adds it to the model.
     * @param key The filter item's name
     * @param value Whether the filter item is active or inactive
     */
    private setModelProperty;
    /**
     * Renders the count of active filters into the counter element if it exists.
     * TODO(b/373719612): Optimize later by storing count in data model and
     * re-rendering whenever model is changed
     */
    private renderCategoryCounter;
}
export { FilterCategory };
