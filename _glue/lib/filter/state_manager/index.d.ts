//!! generated by tsickle from marketing/glue/lib/filter/state_manager/index.ts
import { Observer } from '../../observer/index';
import { FilterDataModel } from '../constants';
type FilterStateManagerModels = Record<string, Observer<FilterDataModel>>;
declare interface FilterStateManagerDef {
    getModel: (key: string) => Observer<FilterDataModel> | undefined;
    getModels: () => Record<string, Observer<FilterDataModel>>;
    setModel: (key: string, model: Observer<FilterDataModel>) => void;
}
/**
 * A class to manage state of list filter component.
 * It manages a collection of models.
 */
declare class FilterStateManager implements FilterStateManagerDef {
    private static instance?;
    private readonly models;
    constructor();
    /**
     * Returns the data object based on the key.
     * @param key The key of the data.
     */
    getModel(key: string): Observer<FilterDataModel> | undefined;
    /**
     * Returns all data objects.
     */
    getModels(): FilterStateManagerModels;
    /**
     * Sets data model.
     * @param key The key of the data.
     * @param model The data to be set.
     */
    setModel(key: string, model: Observer<FilterDataModel>): void;
    static reset(): void;
}
export { FilterStateManager, type FilterStateManagerModels };
