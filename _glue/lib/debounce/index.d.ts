//!! generated by tsickle from marketing/glue/lib/debounce/index.ts
/**
 * @fileoverview A simple function to create a debounced function.
 * A debounced function wraps a function, and delay its execution every time
 * the debounced function is called. This is equivalent to goog.async.Debouncer
 * but lighter and a simpler API.
 *
 * @see https://glue-docs.appspot.com/docs/components/raw/debounce
 *
 * Example:
 *
 * // Call a function 250ms after the last scroll event fires.
 * var handleScroll = function() {};
 * window.addEventListener('scroll', new Debounce(handleScroll, 250).debounce);
 *
 */
declare interface DebounceDef {
    debounce: () => void;
    cancel: () => void;
}
/**
 * Debounces a function after a given delay.
 */
declare class Debounce implements DebounceDef {
    private readonly fn;
    private readonly delay;
    private timeoutId;
    /**
     * @param fn The function to debounce.
     * @param delay The delay in ms until the function should be executed.
     */
    constructor(fn: (...args: unknown[]) => void, delay: number);
    /**
     * Debounces by reinitializing the timer until the function should execute.
     */
    debounce(): void;
    /**
     * Cancels any ongoing debouncing timer.
     */
    cancel(): void;
}
export { Debounce };
