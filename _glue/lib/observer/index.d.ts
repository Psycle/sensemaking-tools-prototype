//!! generated by tsickle from marketing/glue/lib/observer/index.ts
/**
 * @fileoverview An Observer class to create observables.
 */
interface ObserverDataObj {
    [propName: string]: unknown;
}
type WatcherFunction = () => unknown;
declare interface ObserverDef {
    data: ObserverDataObj;
    listen: (key: string | ObserverDataObj, callback: WatcherFunction) => void;
    unlisten: (key: string | ObserverDataObj, callback: () => unknown) => void;
    defineReactive: (obj: ObserverDataObj, key: string, val?: unknown) => void;
}
/**
 * Observer generates observables for data tracking.
 */
declare class Observer<T extends ObserverDataObj> implements ObserverDef {
    data: T;
    watchers: Map<string, WatcherFunction[]>;
    constructor(data: T);
    /**
     * Walk through all properties and convert them into
     * getter/setters. This method should only be called when
     * value type is Object.
     */
    private walk;
    /**
     * Define a reactive property on an object.
     */
    defineReactive(obj: ObserverDataObj, key: string, val?: unknown): void;
    /**
     * Add callback to the watchers list.
     * @param key The key or object that the model listens to
     *     changes on.
     */
    listen(key: string | ObserverDataObj, callback: WatcherFunction): void;
    /**
     * Remove callback from the watchers list.
     * @param key The key or object that the model listens to
     *     changes on.
     */
    unlisten(key: string | ObserverDataObj, callback: () => unknown): void;
    /**
     * Notify subscribers.
     */
    private notify;
}
export { Observer, type ObserverDataObj, type WatcherFunction };
