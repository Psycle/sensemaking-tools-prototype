// Glue header main styles

@use '../breakpoints/mixins' as breakpoints;
@use '../elevation/mixins' as elevation;
@use 'mixins';
@use 'variables';

// User-customized variable for breakpoint
$breakpoint-nav: variables.$breakpoint-default !default;

// Main header
.glue-header {
  background-color: variables.$bg;
  font-family: sans-serif;
  min-height: variables.$bar-height;
  width: 100%;
  z-index: variables.$z-index-root;

  .glue-header__bar {
    box-shadow: 0 0 0 0 rgba(0, 0, 0, 0);
    background: variables.$drawer-background-color;
    transition: transform variables.$transition,
      background variables.$transition, box-shadow variables.$transition; // Header rewind Fade-in
    width: 100%;

    @include breakpoints.bp($breakpoint-nav) {
      height: variables.$bar-height;
      min-height: variables.$bar-height;
    }

    // TODO(gfrausto): this needs to be merged in with the bar class at this point
    .glue-header__tier {
      align-items: stretch;
      display: flex;
      flex-direction: column;

      @include breakpoints.bp($breakpoint-nav) {
        align-items: flex-start;
        flex-direction: row;
      }
      min-height: variables.$bar-height;
    }

    &.glue-header-is-wholly-scrolled {
      transition: transform variables.$transition-long,
        background variables.$transition, box-shadow variables.$transition; // Header rewind Fade-out

      @include breakpoints.bp($breakpoint-nav) {
        transform: translate3d(0, variables.$height--full-size-offset * -2, 0);
      }

      &.glue-header__bar--mobile {
        transform: translate3d(0, variables.$height--full-size-offset * -2, 0);
        z-index: variables.$z-index-bar-mobile;
      }
    }

    // Drawer needs to have a -6px offset to avoid overflowing on mobile while the drawer is closed
    &.glue-header--rewind-box-shadow:not(.glue-header-is-wholly-scrolled) {
      @include elevation.set-level(1);

      &.glue-header__drawer {
        box-shadow: variables.$drawer-rewind-drop-shadow;

        @include breakpoints.bp($breakpoint-nav) {
          @include elevation.set-level(1);
        }
      }
    }

    &.glue-header__bar--desktop {
      .glue-header__tier {
        height: 100%;

        &:first-child {
          .glue-header__container:not(.glue-header__container--cta):not(.glue-header__site-switcher-menu) {
            position: relative;
          }
        }
      }
    }

    &.glue-header__bar--mobile {
      display: block;
      position: fixed;
      z-index: variables.$z-index-bar-mobile;

      @include breakpoints.bp($breakpoint-nav) {
        display: none;
      }

      .glue-header__tier {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        min-height: variables.$bar-height;
      }
    }
  }

  &.glue-header--no-drawer {
    .glue-header__hamburger {
      display: none;
    }
  }

  &.glue-header--no-cta {
    min-height: variables.$bar-height;

    .glue-header__bar--mobile {
      @include mixins.header-border-bottom(variables.$bar-height, none);
    }
  }

  // Single NAV: Height and Flex positioning
  &.glue-header--single {
    min-height: variables.$bar-height-double;

    // Have to adjust the height depending on when the CTA buttons go.
    @include breakpoints.bp(md) {
      min-height: variables.$bar-height;
    }

    .glue-header__bar {
      @include breakpoints.bp($breakpoint-nav) {
        height: variables.$bar-height;
        min-height: variables.$bar-height;
      }
    }

    // Hide border for non-complex
    .glue-header__bar--mobile {
      @include mixins.header-border-bottom(variables.$bar-height, none);

      // Single nav with CTA(non-complex)
      .glue-header__tier {
        @include breakpoints.bp(sm-only) {
          @include mixins.header-border-bottom;
          flex-direction: column;
        }
      }

      // Single nav with CTA(non-complex) and border for top of page only.
      &:not(.glue-header--rewind-box-shadow) {
        @include breakpoints.bp(sm-only) {
          @include mixins.header-border-bottom(variables.$bar-height-double);
        }
      }
    }

    // Single with CTA (complex stacked)
    &.glue-header--complex-stacked {
      .glue-header__bar--mobile:not(.glue-header--rewind-box-shadow) {
        @include breakpoints.bp(sm-only) {
          @include mixins.header-border-bottom(variables.$bar-height-double);
        }
      }
    }

    &.glue-header--no-cta:not(.glue-header--complex-stacked) {
      height: variables.$bar-height;
      min-height: variables.$bar-height;

      @include breakpoints.bp(sm-only) {
        .glue-header__bar--mobile {
          height: variables.$bar-height;
          min-height: variables.$bar-height;
          z-index: variables.$z-index-bar-mobile;

          // Single nav no-CTA (Complex)
          &:not(.glue-header--rewind-box-shadow) {
            @include breakpoints.bp(sm-only) {
              @include mixins.header-border-bottom(
                variables.$bar-height-double,
                none
              );
            }
          }
        }
      }
    }

    &.glue-header--simple {
      // Hide border for non-complex
      .glue-header__bar--mobile {
        @include mixins.header-border-bottom(
          variables.$bar-height-double,
          none
        );
      }
    }
  }

  // Double NAV: Height, Flex positioning and Borders
  &.glue-header--double {
    min-height: variables.$bar-height-double;

    // Have to adjust the height depending on when the CTA buttons go.
    @include breakpoints.bp(md) {
      min-height: variables.$bar-height;
    }

    @include breakpoints.bp(lg) {
      min-height: variables.$bar-height-double;
    }

    // These have the CTA mobile classes to be applied on the smallest viewport only
    .glue-header__bar--mobile {
      // Double nav with CTA(non-complex) and border for top of page only.
      &:not(.glue-header--rewind-box-shadow) {
        @include breakpoints.bp(sm-only) {
          @include mixins.header-border-bottom(variables.$bar-height-double);
        }
      }

      .glue-header__tier {
        @include mixins.header-border-bottom;

        @include breakpoints.bp(sm-only) {
          flex-direction: column;
        }
      }
    }

    &.glue-header--complex-stacked {
      .glue-header__bar {
        @include breakpoints.bp($breakpoint-nav) {
          @include mixins.header-border-bottom;
        }
      }
    }

    // Base styles for the tier and bar classes
    .glue-header__bar {
      @include breakpoints.bp($breakpoint-nav) {
        height: variables.$bar-height-double;
        min-height: variables.$bar-height-double;
      }

      &:not(.glue-header__drawer--is-open) {
        .glue-header__tier {
          // No border for MD bp
          @include breakpoints.bp(md) {
            @include mixins.header-border-bottom(variables.$bar-height, none);
          }

          // Must have border bottom for LG bp
          @include breakpoints.bp($breakpoint-nav) {
            @include mixins.header-border-bottom;
          }
        }
      }

      &.glue-header__drawer--is-open {
        @include mixins.header-border-bottom(false, none);
      }
    }

    &.glue-header--no-cta {
      @include breakpoints.bp(sm-only) {
        height: variables.$bar-height;
        min-height: variables.$bar-height;
      }
    }
  }

  &.glue-header--single,
  &.glue-header--double {
    &.glue-header--no-cta .glue-header__bar--mobile {
      @include breakpoints.bp(sm-only) {
        @include mixins.header-border-bottom(variables.$bar-height, none);
      }
    }
  }

  // Logo only styles
  &.glue-header--simple {
    min-height: variables.$bar-height;

    // Have to adjust the height depending on when the CTA buttons go.
    @include breakpoints.bp(md) {
      min-height: variables.$bar-height;
    }

    .glue-header__bar {
      @include breakpoints.bp($breakpoint-nav) {
        height: variables.$bar-height;
        min-height: variables.$bar-height;
      }
    }

    .glue-header__container {
      align-items: center;
      width: 100%;
    }

    .glue-header__bar--mobile {
      @include mixins.header-border-bottom(variables.$bar-height, none);
    }
  }

  &.glue-header--complex-stacked {
    &.glue-header--no-cta {
      @include breakpoints.bp(sm+md) {
        min-height: variables.$bar-height-double;
        height: variables.$bar-height-double;
      }
    }

    .glue-header__drawer--is-open {
      .glue-header__container {
        &:first-child {
          height: variables.$bar-height-double;
        }
      }
    }

    // These have the CTA mobile classes to be applied on the smallest viewport only
    .glue-header__bar--mobile {
      height: variables.$bar-height-double;
      min-height: variables.$bar-height-double;
      z-index: variables.$z-index-bar-mobile;

      .glue-header__tier {
        @include breakpoints.bp(sm-only) {
          flex-direction: column;
        }
      }
    }

    .glue-header__bar:not(.glue-header__drawer--is-open) {
      .glue-header__tier {
        @include mixins.header-border-bottom;

        @include breakpoints.bp($breakpoint-nav) {
          @include mixins.header-border-bottom(false, none);
        }
      }
    }
  }

  // FOR BG color states hover and focus
  &.glue-header--transparent {
    background: transparent;
    position: absolute;
    overflow-x: clip;
    top: 0;
    transition: background variables.$transition;

    @include breakpoints.bp(md) {
      overflow-x: clip;
    }

    .glue-header__bar {
      &.glue-header__bar--mobile {
        &:not(.glue-header-is-wholly-scrolled) {
          transform: none;
        }
      }

      &:not(.glue-header__drawer--is-open) {
        background: variables.$transparent-header;
      }
    }

    // Some containers don't take up full with and have different transiton
    // speed, so we will just transition the color from the glue-header__bar
    // class only
    &.glue-header--active {
      .glue-header__bar {
        background: variables.$bg;
      }
    }

    .glue-header__tier {
      @include breakpoints.bp(md) {
        // This brekpoint point has a collapsed header and only one tier, so a
        // border is not needed.
        &::after {
          opacity: 0;
        }
      }
    }
  }
}

.glue-header__container {
  align-items: flex-start;
  display: flex;
  flex-direction: column;
  transition: background variables.$transition;

  @include breakpoints.bp($breakpoint-nav) {
    height: 100%;
  }

  &.glue-header__container--flex-space-between {
    justify-content: space-between;
  }

  &.glue-header__container--flex-end {
    align-items: flex-end;
    justify-content: flex-end;
  }

  &.glue-header__container--cta {
    align-items: center;
    align-content: center;
    bottom: 0;
    position: absolute;
    width: 100%;

    @include breakpoints.bp($breakpoint-nav) {
      border-top: none;
      position: relative;
      width: auto;
    }
  }
}

// Overriding this so the nav links don't eat too much space.
.glue-header__container--linkbar {
  flex: none;

  @include breakpoints.bp($breakpoint-nav) {
    flex: auto;
  }
}

// This for CTA, supplemental links or no-cta variations. This helps keep the
// spacing of the last element correct
.glue-header__tier {
  .glue-header__container {
    @include breakpoints.bp(md) {
      &:last-child {
        margin-inline-end: variables.$link-margin-left-spacer;
      }
    }

    &:last-child {
      @include breakpoints.bp(sm-only) {
        .glue-header__bar--mobile & {
          .glue-header--no-cta & {
            padding-inline: 0;
          }
        }
      }
    }
  }
}
