/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./_glue/index.js":
/*!************************!*\
  !*** ./_glue/index.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AmbientVideo: () => (/* reexport safe */ _lib_ambientvideo__WEBPACK_IMPORTED_MODULE_0__.AmbientVideo),
/* harmony export */   Banner: () => (/* reexport safe */ _lib_banner__WEBPACK_IMPORTED_MODULE_1__.Banner),
/* harmony export */   Carousel: () => (/* reexport safe */ _lib_carousel___WEBPACK_IMPORTED_MODULE_2__.Carousel),
/* harmony export */   Copy: () => (/* reexport safe */ _lib_copy__WEBPACK_IMPORTED_MODULE_3__.Copy),
/* harmony export */   Debounce: () => (/* reexport safe */ _lib_debounce___WEBPACK_IMPORTED_MODULE_4__.Debounce),
/* harmony export */   ExpansionPanels: () => (/* reexport safe */ _lib_expansionpanels___WEBPACK_IMPORTED_MODULE_5__.ExpansionPanels),
/* harmony export */   Filter: () => (/* reexport safe */ _lib_filter___WEBPACK_IMPORTED_MODULE_6__.Filter),
/* harmony export */   FilterStateManager: () => (/* reexport safe */ _lib_filter___WEBPACK_IMPORTED_MODULE_6__.FilterStateManager),
/* harmony export */   Footer: () => (/* reexport safe */ _lib_footer__WEBPACK_IMPORTED_MODULE_7__.Footer),
/* harmony export */   Header: () => (/* reexport safe */ _lib_header__WEBPACK_IMPORTED_MODULE_8__.Header),
/* harmony export */   Jumplinks: () => (/* reexport safe */ _lib_jumplinks___WEBPACK_IMPORTED_MODULE_9__.Jumplinks),
/* harmony export */   Modal: () => (/* reexport safe */ _lib_modal__WEBPACK_IMPORTED_MODULE_10__.Modal),
/* harmony export */   ResponsiveMonitor: () => (/* reexport safe */ _lib_responsivemonitor___WEBPACK_IMPORTED_MODULE_11__.ResponsiveMonitor),
/* harmony export */   ScrollManager: () => (/* reexport safe */ _lib_smoothscroll_scrollmanager__WEBPACK_IMPORTED_MODULE_13__.ScrollManager),
/* harmony export */   SmoothScroll: () => (/* reexport safe */ _lib_smoothscroll___WEBPACK_IMPORTED_MODULE_12__.SmoothScroll),
/* harmony export */   Social: () => (/* reexport safe */ _lib_social__WEBPACK_IMPORTED_MODULE_14__.Social),
/* harmony export */   TabPanels: () => (/* reexport safe */ _lib_tabpanels__WEBPACK_IMPORTED_MODULE_15__.TabPanels),
/* harmony export */   Tabs: () => (/* reexport safe */ _lib_tabs__WEBPACK_IMPORTED_MODULE_16__.Tabs),
/* harmony export */   Tooltip: () => (/* reexport safe */ _lib_tooltip__WEBPACK_IMPORTED_MODULE_17__.Tooltip),
/* harmony export */   YoutubeVideo: () => (/* reexport safe */ _lib_ytvideo__WEBPACK_IMPORTED_MODULE_18__.YoutubeVideo)
/* harmony export */ });
/* harmony import */ var _lib_ambientvideo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/ambientvideo */ "./_glue/lib/ambientvideo/index.js");
/* harmony import */ var _lib_banner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/banner */ "./_glue/lib/banner/index.js");
/* harmony import */ var _lib_carousel___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/carousel/ */ "./_glue/lib/carousel/index.js");
/* harmony import */ var _lib_copy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/copy */ "./_glue/lib/copy/index.js");
/* harmony import */ var _lib_debounce___WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/debounce/ */ "./_glue/lib/debounce/index.js");
/* harmony import */ var _lib_expansionpanels___WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/expansionpanels/ */ "./_glue/lib/expansionpanels/index.js");
/* harmony import */ var _lib_filter___WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/filter/ */ "./_glue/lib/filter/index.js");
/* harmony import */ var _lib_footer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/footer */ "./_glue/lib/footer/index.js");
/* harmony import */ var _lib_header__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lib/header */ "./_glue/lib/header/index.js");
/* harmony import */ var _lib_jumplinks___WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lib/jumplinks/ */ "./_glue/lib/jumplinks/index.js");
/* harmony import */ var _lib_modal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./lib/modal */ "./_glue/lib/modal/index.js");
/* harmony import */ var _lib_responsivemonitor___WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./lib/responsivemonitor/ */ "./_glue/lib/responsivemonitor/index.js");
/* harmony import */ var _lib_smoothscroll___WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./lib/smoothscroll/ */ "./_glue/lib/smoothscroll/index.js");
/* harmony import */ var _lib_smoothscroll_scrollmanager__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./lib/smoothscroll/scrollmanager */ "./_glue/lib/smoothscroll/scrollmanager.js");
/* harmony import */ var _lib_social__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./lib/social */ "./_glue/lib/social/index.js");
/* harmony import */ var _lib_tabpanels__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./lib/tabpanels */ "./_glue/lib/tabpanels/index.js");
/* harmony import */ var _lib_tabs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./lib/tabs */ "./_glue/lib/tabs/index.js");
/* harmony import */ var _lib_tooltip__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./lib/tooltip */ "./_glue/lib/tooltip/index.js");
/* harmony import */ var _lib_ytvideo__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./lib/ytvideo */ "./_glue/lib/ytvideo/index.js");
/**
 * @fileoverview Glue lib component source re-export.
 * **ONLY USED FOR THE NODE MODULE**
 */























/***/ }),

/***/ "./_glue/lib/ambientvideo/constants.js":
/*!*********************************************!*\
  !*** ./_glue/lib/ambientvideo/constants.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CssClasses: () => (/* binding */ CssClasses),
/* harmony export */   ErrorMessage: () => (/* binding */ ErrorMessage)
/* harmony export */ });
var CssClasses;
(function(CssClasses) {
CssClasses['ROOT'] = 'glue-ambient-video';
CssClasses['BUTTON'] = 'glue-ambient-video__button';
CssClasses['BUTTON_PAUSE'] = 'glue-ambient-video__button--paused';
CssClasses['BUTTON_ICON'] = 'glue-ambient-video__icon';
CssClasses['BUTTON_ICON_PLAY'] = 'glue-ambient-video__icon-play';
CssClasses['BUTTON_ICON_PAUSE'] = 'glue-ambient-video__icon-pause';
CssClasses['VIDEO_CONTAINER'] = 'glue-ambient-video__container';
CssClasses['LIGHT'] = 'glue-ambient-video--light';
CssClasses['TOOLTIP'] = 'glue-ambient-video__tooltip';
CssClasses['TOOLTIP_PLAY'] = 'glue-ambient-video__tooltip-play';
CssClasses['TOOLTIP_PAUSE'] = 'glue-ambient-video__tooltip-pause';
})(CssClasses || (CssClasses = {}));
var ErrorMessage;
(function(ErrorMessage) {
ErrorMessage['BUTTON_ELEMENT_MISSING'] = 'Ambient Button element is missing.';
ErrorMessage['BUTTON_ICON_ELEMENT_MISSING'] =
    'Ambient Button Icon element is missing';
ErrorMessage['MEDIA_ELEMENT_MISSING'] = 'Ambient Media element is missing.';
ErrorMessage['PLAY_VIDEO_ERROR'] = 'Play video interrupted.';
ErrorMessage['TOOLTIP_PLAY_MISSING'] =
    'Ambient Tooltip play element is missing';
ErrorMessage['TOOLTIP_PAUSE_MISSING'] =
    'Ambient Tooltip pause element is missing';
})(ErrorMessage || (ErrorMessage = {}));



/***/ }),

/***/ "./_glue/lib/ambientvideo/index.js":
/*!*****************************************!*\
  !*** ./_glue/lib/ambientvideo/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AmbientVideo: () => (/* binding */ AmbientVideo)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _events_key__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events/key */ "./_glue/lib/events/key.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants */ "./_glue/lib/ambientvideo/constants.js");









/**
 * Glue Ambient Video component
 */
class AmbientVideo extends _base__WEBPACK_IMPORTED_MODULE_0__.Component {
  constructor(root) {
    super(root);
    /**
     * Checks the state of video and play/pause accordingly.
     * Adds/Removes the class to toggle the text of tooltip and svg icon
     */
    this.togglePlayerState = (event) => {
      if (event instanceof KeyboardEvent && event.key !== _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.ENTER &&
          event.key !== _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.SPACE) {
        return;
      }
      if (!this.videoContainer.paused) {
        this.pauseVideo();
      } else {
        this.playVideo();
      }
    };
    const mediaElement =
        this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.VIDEO_CONTAINER}`);
    if (!mediaElement) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_4__.ErrorMessage.MEDIA_ELEMENT_MISSING);
    } else {
      this.videoContainer = mediaElement;
    }
    let element = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.BUTTON}`);
    if (!element) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_4__.ErrorMessage.BUTTON_ELEMENT_MISSING);
    } else {
      this.button = element;
    }
    element = this.button.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.BUTTON_ICON}`);
    if (!element) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_4__.ErrorMessage.BUTTON_ICON_ELEMENT_MISSING);
    } else {
      this.icon = element;
    }
    element = this.button.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.TOOLTIP_PLAY}`);
    if (!element) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_4__.ErrorMessage.TOOLTIP_PLAY_MISSING);
    } else {
      this.tooltipPlay = element;
    }
    element = this.button.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.TOOLTIP_PAUSE}`);
    if (!element) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_4__.ErrorMessage.TOOLTIP_PAUSE_MISSING);
    } else {
      this.tooltipPause = element;
    }
    this.playVideo();
    this.initialize();
  }
  initialize() {
    this.button.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.BUTTON);
    this.button.tabIndex = _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.TABBABLE;
    this.icon.tabIndex = _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.NOT_TABBABLE;
    this.setTooltipId();
    this.button.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.togglePlayerState);
    this.button.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.togglePlayerState);
  }
  /**
   * Set default ID value for tooltips if they are not provided.
   */
  setTooltipId() {
    if (!this.tooltipPlay || !this.tooltipPause) return;
    if (!this.tooltipPlay.id) {
      this.tooltipPlay.id = _constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.TOOLTIP_PLAY;
    }
    if (!this.tooltipPause.id) {
      this.tooltipPause.id = _constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.TOOLTIP_PAUSE;
    }
  }
  /**
   * Plays video
   */
  playVideo() {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function*() {
      try {
        yield this.videoContainer.play();
        this.button.classList.add(_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.BUTTON_PAUSE);
        this.button.setAttribute(
            _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_LABELLEDBY, this.tooltipPause.id);
      } catch (error) {
        this.button.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.BUTTON_PAUSE);
        console.error(error);
      }
    });
  }
  /**
   * Pause video
   */
  pauseVideo() {
    this.videoContainer.pause();
    this.button.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.BUTTON_PAUSE);
    this.button.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_LABELLEDBY, this.tooltipPlay.id);
  }
  /**
   * Resets component and removes event listeners.
   */
  destroy() {
    this.button.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.TAB_INDEX);
    this.button.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_LABEL);
    this.button.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE);
    this.icon.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.TAB_INDEX);
    this.button.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.togglePlayerState);
    this.button.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.togglePlayerState);
  }
}



/***/ }),

/***/ "./_glue/lib/banner/constants.js":
/*!***************************************!*\
  !*** ./_glue/lib/banner/constants.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CssClasses: () => (/* binding */ CssClasses),
/* harmony export */   Numbers: () => (/* binding */ Numbers),
/* harmony export */   Strings: () => (/* binding */ Strings)
/* harmony export */ });
/**
 * @fileoverview Constants used by the Banner component.
 */
var CssClasses;
(function(CssClasses) {
CssClasses['BANNER'] = 'glue-banner';
CssClasses['BANNER_CONTENT'] = 'glue-banner__content';
CssClasses['BANNER_CLOSE_BUTTON'] = 'glue-banner__close-btn';
CssClasses['BANNER_HIDDEN'] = 'glue-banner--hidden';
})(CssClasses || (CssClasses = {}));
var Numbers;
(function(Numbers) {
Numbers[Numbers['BANNER_CLOSE_DELAY'] = 300] = 'BANNER_CLOSE_DELAY';
})(Numbers || (Numbers = {}));
var Strings;
(function(Strings) {
Strings['DEFAULT_CLOSE_BUTTON_ARIA_LABEL'] = 'Hide the banner';
Strings['DEFAULT_EMPHASIS'] = 'low';
})(Strings || (Strings = {}));



/***/ }),

/***/ "./_glue/lib/banner/index.js":
/*!***********************************!*\
  !*** ./_glue/lib/banner/index.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Banner: () => (/* binding */ Banner)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base */ "./_glue/lib/base/index.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./_glue/lib/banner/constants.js");





/**
 * A class that displays an important message or helps user perform action
 * through links or button.
 */
class Banner extends _base__WEBPACK_IMPORTED_MODULE_0__.Component {
  constructor(root) {
    var _a;
    super(root);
    this.handleClick = () => {
      this.close();
    };
    this.closeButton =
        this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_2__.CssClasses.BANNER_CLOSE_BUTTON}`);
    (_a = this.closeButton) === null || _a === void 0 ?
        void 0 :
        _a.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_1__.EventType.CLICK, this.handleClick);
  }
  /**
   * Hides the banner component when close button is clicked or is a
   * public method that can directly be called.
   */
  close() {
    this.root.classList.add(_constants__WEBPACK_IMPORTED_MODULE_2__.CssClasses.BANNER_HIDDEN);
    setTimeout(() => {
      this.root.style.display = 'none';
    }, _constants__WEBPACK_IMPORTED_MODULE_2__.Numbers.BANNER_CLOSE_DELAY);
  }
  /**
   * Removes event listeners.
   */
  destroy() {
    var _a;
    (_a = this.closeButton) === null || _a === void 0 ?
        void 0 :
        _a.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_1__.EventType.CLICK, this.handleClick);
  }
}



/***/ }),

/***/ "./_glue/lib/base/index.js":
/*!*********************************!*\
  !*** ./_glue/lib/base/index.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Component: () => (/* binding */ Component)
/* harmony export */ });
/**
 * @fileoverview Parent class for Vanilla components
 */
class Component {
  constructor(root) {
    this.root = root;
  }
  /**
   * Subclasses may implement this method to release any resources / deregister
   * any listeners they have attached. An example of this might be
   * deregistering a resize event from the window object.
   */
  destroy() {}
  /**
   * Fires a cross-browser-compatible custom event from the component root of
   * the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    const evt = new CustomEvent(evtType, {
      detail: evtData,
      bubbles: shouldBubble,
    });
    this.root.dispatchEvent(evt);
  }
}



/***/ }),

/***/ "./_glue/lib/base/utils.js":
/*!*********************************!*\
  !*** ./_glue/lib/base/utils.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getOverlayAutoPosition: () => (/* binding */ getOverlayAutoPosition)
/* harmony export */ });
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/attribute */ "./_glue/lib/constants/attribute.js");
/**
 * @fileoverview Shared utility functions for Glue components.
 */

/**
 * Extract numbers from CSS properties, like 20px -> 20.
 * @param val CSS property value.
 */
function toNum(val) {
  return Number(val.slice(0, -2));
}
/**
 * Calculates left/top coordinates for an Overlay element based on the
 * position of the Trigger element and the placement option (default: bottom).
 *
 * By default is uses auto placement which will try to position the Overlay
 * relative to the middle of the trigger element.
 * If there is not enough space it will try to position the Overlay on the
 * opposite side of the trigger element.
 * If there is not enough space on the opposite side it will try to position
 * the Overlay on the edge of the window.
 *
 * If placement is set to left/right/top/bottom it will try to position the
 * Overlay on the specified side of the trigger element. If there is not enough
 * space it will use the auto positioning logic.
 *
 *
 * @param root Root element that contains the Content and Trigger elements.
 * @param overlay Element that contains Overlay content.
 * @param trigger Element that triggers the Overlay.
 * @param placement? Placement of the Overlay, default is bottom. Possible
 *     values are: left, right, top, bottom.
 * @return Array containing overlay absolute positions [left, top].
 */
function getOverlayAutoPosition(
    root, overlay, trigger, placement = 'bottom') {
  const overlayStyle = getComputedStyle(overlay);
  // Ignore auto-positioning if overlay is fixed (such as in Social/mobile).
  if (overlayStyle.position === 'fixed') {
    return null;
  }
  const triggerStyle = getComputedStyle(trigger);
  const triggerCoords = trigger.getBoundingClientRect();
  const overlayCoords = overlay.getBoundingClientRect();
  const firstSrollableParent = getScrollableParent(root);
  const scrollbarParentCoords = firstSrollableParent.getBoundingClientRect();
  const isBody = firstSrollableParent === document.body;
  const scrollableParentHeight =
      isBody ? window.innerHeight : scrollbarParentCoords.bottom;
  // Mirror placement in RTL direction.
  const isRtl = triggerStyle.direction === _constants_attribute__WEBPACK_IMPORTED_MODULE_0__.Direction.RTL ||
      document.documentElement.dir === _constants_attribute__WEBPACK_IMPORTED_MODULE_0__.Direction.RTL;
  if (isRtl) {
    if (placement === 'left') {
      placement = 'right';
    } else if (placement === 'right') {
      placement = 'left';
    }
  }
  let noSpaceAtRight = false;
  let noSpaceAtLeft = false;
  let noSpaceAtTop = false;
  let noSpaceAtBottom = false;
  const horizOffset = placement === 'top' || placement === 'bottom' ?
      Math.abs(triggerCoords.width - overlayCoords.width) / 2 :
      overlayCoords.width;
  // Check left edge of the container.
  noSpaceAtLeft = triggerCoords.left - horizOffset < scrollbarParentCoords.left;
  // Check right edge of the container.
  noSpaceAtRight =
      triggerCoords.right + horizOffset > scrollbarParentCoords.right;
  // Check bottom edge of the container.
  noSpaceAtBottom =
      triggerCoords.top + triggerCoords.height + overlayCoords.height >=
      scrollableParentHeight;
  // Check top edge of the container.
  noSpaceAtTop =
      triggerCoords.top - overlayCoords.height < scrollbarParentCoords.top;
  // If there is not enough space on both left and right side of the trigger,
  // align the center of the overlay with the center of the trigger.
  if (noSpaceAtLeft && noSpaceAtRight) {
    const left = (triggerCoords.width - overlayCoords.width) / 2;
    return noSpaceAtTop ?
        [left, triggerCoords.height + toNum(overlayStyle.marginTop)] :
        [left, -overlayCoords.height - toNum(overlayStyle.marginTop)];
  }
  if (placement === 'left' || placement === 'right') {
    return getOverlayAutoPositionHorizontal(
        placement, triggerCoords, overlayCoords, triggerStyle, overlayStyle,
        noSpaceAtTop, noSpaceAtBottom, noSpaceAtLeft, noSpaceAtRight);
  } else {
    return getOverlayAutoPositionVertical(
        placement, triggerCoords, overlayCoords, triggerStyle, overlayStyle,
        noSpaceAtTop, noSpaceAtBottom, noSpaceAtLeft, noSpaceAtRight);
  }
}
/**
 * Calculates overlay position for horizontal placements.
 */
function getOverlayAutoPositionHorizontal(
    placement, triggerCoords, overlayCoords, triggerStyle, overlayStyle,
    noSpaceAtTop, noSpaceAtBottom, noSpaceAtLeft, noSpaceAtRight) {
  let left = 0;
  let top = 0;
  if (!noSpaceAtTop && !noSpaceAtBottom) {
    // If there is enough space, aligns the center of the overlay with the
    // center of the trigger, including margins.
    const triggerVerticalSpace = triggerCoords.height +
        toNum(triggerStyle.marginTop) + toNum(triggerStyle.marginBottom);
    const overlayVerticalSpace = overlayCoords.height +
        toNum(overlayStyle.marginTop) + toNum(overlayStyle.marginBottom);
    top = (triggerVerticalSpace - overlayVerticalSpace) / 2;
  } else {
    // Align the top of the overlay with the top of the trigger.
    // If there is not enough space, align the bottom of the overlay with the
    // bottom of the trigger.
    top = noSpaceAtTop ? 0 : triggerCoords.height - overlayCoords.height;
    top += toNum(triggerStyle.marginTop) - toNum(overlayStyle.marginTop);
  }
  // Horizontal position after the trigger, including trigger content.
  const rightDistanceFromTrigger =
      triggerCoords.width + toNum(triggerStyle.marginRight);
  // Horizontal position before the trigger, including overlay content.
  const leftDistanceFromTrigger =
      overlayCoords.width + toNum(overlayStyle.marginRight);
  // LEFT: before the trigger.
  // RIGHT: after the trigger.
  // Switch to the opposite side if there is not enough space.
  if (placement === 'left') {
    left = noSpaceAtLeft ? rightDistanceFromTrigger : -leftDistanceFromTrigger;
  } else {
    left = noSpaceAtRight ? -leftDistanceFromTrigger : rightDistanceFromTrigger;
  }
  return [left, top];
}
/**
 * Calculates overlay position for vertical placements.
 */
function getOverlayAutoPositionVertical(
    placement, triggerCoords, overlayCoords, triggerStyle, overlayStyle,
    noSpaceAtTop, noSpaceAtBottom, noSpaceAtLeft, noSpaceAtRight) {
  let left = 0;
  let top = 0;
  if (!noSpaceAtLeft && !noSpaceAtRight) {
    // If there is enough space, aligns the center of the overlay with the
    // center of the trigger.
    left = (triggerCoords.width - overlayCoords.width) / 2;
  } else {
    // Align the left of the overlay with the right of the trigger.
    // If there is not enough space, align the right of the overlay with the
    // left of the trigger.
    let triggerHorizSpace = toNum(triggerStyle.marginLeft);
    let overlayHorizSpace = toNum(overlayStyle.marginLeft);
    if (noSpaceAtRight) {
      triggerHorizSpace += triggerCoords.width;
      overlayHorizSpace += overlayCoords.width;
    }
    left = triggerHorizSpace - overlayHorizSpace;
  }
  // Vertical position above the trigger, including trigger content.
  const downDistanceFromTrigger =
      triggerCoords.height + toNum(overlayStyle.marginTop);
  // Vertical position below the trigger, including overlay content.
  const upDistanceFromTrigger =
      overlayCoords.height + toNum(overlayStyle.marginTop);
  // TOP: above the trigger.
  // BOTTOM: below the trigger.
  // Switch to the opposite side if there is not enough space.
  if (placement === 'top') {
    top = noSpaceAtTop ? downDistanceFromTrigger : -upDistanceFromTrigger;
  } else {
    top = noSpaceAtBottom ? -upDistanceFromTrigger : downDistanceFromTrigger;
  }
  return [left, top];
}
/**
 * Determines scrollable parent element for calculating overlay position.
 * @param elem DOM node for which to find the scrollable parent
 * @return elem DOM node which is the first scrollable parent
 */
function getScrollableParent(elem) {
  // check if overflow property is set.
  const isOverflowSet = (overflowValue) =>
      /auto|hidden|scroll|overlay/.test(overflowValue);
  const computedStyle = getComputedStyle(elem);
  if (elem === document.documentElement) return document.body;
  if (isOverflowSet(computedStyle.overflow) ||
      isOverflowSet(computedStyle.overflowY) ||
      isOverflowSet(computedStyle.overflowX)) {
    return elem;
  } else {
    return getScrollableParent(elem.parentElement);
  }
}


/***/ }),

/***/ "./_glue/lib/carousel/constants.js":
/*!*****************************************!*\
  !*** ./_glue/lib/carousel/constants.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CarouselType: () => (/* binding */ CarouselType),
/* harmony export */   CssClasses: () => (/* binding */ CssClasses),
/* harmony export */   Icons: () => (/* binding */ Icons),
/* harmony export */   Numbers: () => (/* binding */ Numbers),
/* harmony export */   Strings: () => (/* binding */ Strings)
/* harmony export */ });
/**
 * @fileoverview Constants used by the Carousel component.
 */
var CssClasses;
(function(CssClasses) {
CssClasses['ACTIVE'] = 'glue-is-active';
CssClasses['BUTTON'] = 'glue-carousel__button';
CssClasses['BUTTON_NEXT'] = 'glue-carousel__button--next';
CssClasses['BUTTON_PREV'] = 'glue-carousel__button--prev';
CssClasses['CARDS'] = 'glue-carousel--cards';
CssClasses['CAROUSEL'] = 'glue-carousel';
CssClasses['DISABLE_GRAB'] = 'glue-carousel__list--disable-grab';
CssClasses['HAS_NAVIGATION'] = 'glue-carousel--has-navigation';
CssClasses['INACTIVE'] = 'glue-is-inactive';
CssClasses['ITEM'] = 'glue-carousel__item';
CssClasses['LIST'] = 'glue-carousel__list';
CssClasses['MODALS'] = 'glue-carousel__modals';
CssClasses['NAVIGATION'] = 'glue-carousel__navigation';
CssClasses['NAVIGATION_DOT'] = 'glue-carousel__dot';
CssClasses['PEEK_OUT'] = 'glue-carousel--peek-out';
CssClasses['VIEWPORT'] = 'glue-carousel__viewport';
})(CssClasses || (CssClasses = {}));
var Icons;
(function(Icons) {
Icons['CHEVRON_RIGHT'] = 'chevron-right';
Icons['CHEVRON_LEFT'] = 'chevron-left';
})(Icons || (Icons = {}));
var Numbers;
(function(Numbers) {
/**
 * A threshold value that corresponds to the Carousel viewport width.
 * It is factor, a value between 0 to 1.
 * E.g. drag threshold is 0.2 * containerWidth.
 */
Numbers[Numbers['DRAG_THRESHOLD'] = 0.2] = 'DRAG_THRESHOLD';
/**
 * The minimum distance that the user needs to move before the carousel
 * recognizes the gesture as a drag (rather than a click, etc).
 */
Numbers[Numbers['DRAGSTART_THRESHOLD_PX'] = 10] = 'DRAGSTART_THRESHOLD_PX';
/**
 * Distance in pixels for the card carousel to peek out on small viewport
 */
Numbers[Numbers['PEEK_DISTANCE'] = 24] = 'PEEK_DISTANCE';
/**
 * When determining the number of slides per page, if the resulting value is
 * within this range from an integer, round up, otherwise round down.
 * E.g. 1.9999962591720426 => 2
 */
Numbers[Numbers['ROUNDING_THRESHOLD'] = 0.05] = 'ROUNDING_THRESHOLD';
})(Numbers || (Numbers = {}));
var Strings;
(function(Strings) {
Strings['DATA_CAROUSEL_ANIMATION_ATTR'] = 'data-glue-carousel-animation';
Strings['DATA_CAROUSEL_NAVIGATION_LABEL_ATTR'] =
    'data-glue-carousel-navigation-label';
Strings['DATA_DOT'] = 'dot';
Strings['DATA_NAVIGATION_LABEL'] = 'glueCarouselNavigationLabel';
Strings['NAVIGATION_ARIA_LABEL_DEFAULT'] = 'Choose slide to display';
Strings['NAVIGATION_LABEL_DEFAULT'] =
    'Selected tab $glue_carousel_page_number$ of $glue_carousel_page_total$';
Strings['NAVIGATION_LABEL_NUMBER_VAR_NAME'] = '$glue_carousel_page_number$';
Strings['NAVIGATION_LABEL_TOTAL_VAR_NAME'] = '$glue_carousel_page_total$';
Strings['NAVIGATION_NEXT_LABEL_DEFAULT'] = 'Go to the next slide';
Strings['NAVIGATION_PREV_LABEL_DEFAULT'] = 'Go to the previous slide';
Strings['RTL'] = 'rtl';
Strings['SLIDE_CHANGE'] = 'gluecarouselslidechange';
Strings['TRANSITION_NONE'] = 'none';
})(Strings || (Strings = {}));
var CarouselType;
(function(CarouselType) {
CarouselType['CARDS'] = 'cards';
CarouselType['IMAGE'] = 'image';
CarouselType['CUSTOM'] = 'custom';
})(CarouselType || (CarouselType = {}));



/***/ }),

/***/ "./_glue/lib/carousel/index.js":
/*!*************************************!*\
  !*** ./_glue/lib/carousel/index.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Carousel: () => (/* binding */ Carousel)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _events_key__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events/key */ "./_glue/lib/events/key.js");
/* harmony import */ var _focus___WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../focus/ */ "./_glue/lib/focus/index.js");
/* harmony import */ var _observer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../observer */ "./_glue/lib/observer/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./constants */ "./_glue/lib/carousel/constants.js");









/** The Glue Carousel component. */
class Carousel extends _base__WEBPACK_IMPORTED_MODULE_0__.Component {
  constructor(root, options) {
    super(root);
    /** Every navigation dot. */
    this.dots = [];
    /** Total number of pages. */
    this.totalPages = 1;
    /** The number of visible slides within the viewport. */
    this.slidesPerPage = 1;
    /**
     * A flag to turn on/off animation when the component loads.
     * It has been used to jump from the dummy slide to the first/last actual
     * slide.
     */
    this.animateOnInitialLoad = false;
    /** The container width. */
    this.containerWidth = 0;
    /** The slide width. */
    this.slideWidth = 0;
    /** True if this is an RTL page. */
    this.isRtl = document.documentElement.dir === _constants__WEBPACK_IMPORTED_MODULE_6__.Strings.RTL;
    /**
     * Flag to determine whether we're using a tab panel navigation model.
     * @see https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Tab_Role
     */
    this.isTabModel = true;
    /**
     * Flag to determine whether the carousel should show the navigation dots.
     */
    this.isShowingNavigation = true;
    /** A collection of scroll value for each page */
    this.pagesX = [];
    /** Initial touch position */
    this.initialTouchPos = null;
    /** Flag to determine if the carousel is currently being dragged. */
    this.isDragging = false;
    /** Last touch poistion */
    this.lastTouchPos = null;
    /** True when it is ready to call request animatino frame */
    this.rafPending = false;
    /** Current horizontal position */
    this.currentXPosition = 0;
    /**
     * Set this value to false when dragging option is false and it is on
     * desktop
     */
    this.enableDragging = null;
    /** Re-renders the carousel when the current slide value changes. */
    this.handleCurrentSlideChange = () => {
      this.emit(_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.SLIDE_CHANGE, this.getCurrentSlide());
      this.render();
    };
    /** Re-calculates and renders the carousel when the window resizes. */
    this.handleResize = () => {
      this.animateOnInitialLoad = false;
      this.calculate();
      this.render();
      this.updateTouchEvents();
    };
    /** Sets the current slide value to the appropriate slide on UI clicks. */
    this.handleClick = (event) => {
      const target = event.target;
      if (target instanceof HTMLElement ||
          // iOS VoiceOver triggers the event from the svg (b/192919688)
          target instanceof window['SVGElement']) {
        if (target.closest(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.BUTTON_NEXT}`) === this.nextBtn) {
          this.next();
        } else if (
            target.closest(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.BUTTON_PREV}`) === this.prevBtn) {
          this.previous();
        } else if (
            target instanceof HTMLButtonElement && this.dots.includes(target)) {
          const page = Number(target.dataset[_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.DATA_DOT]);
          this.setCurrentPage(page);
        } else if (this.isCards && this.isDragging) {
          // Do not trigger a card click if the carousel has been dragged.
          event.preventDefault();
        }
      }
    };
    /**
     * Sets the current slide value to the appropriate slide on left/right
     * keyboard press.
     */
    this.handleKeydown = (event) => {
      const isLeft = event.code === _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.LEFT;
      const isRight = event.code === _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.RIGHT;
      if (isLeft || isRight) {
        const isNext = this.isRtl ? isLeft : isRight;
        if (event.target instanceof HTMLButtonElement &&
            this.dots.includes(event.target)) {
          isNext ? this.next() : this.previous();
        } else if (
            event.target instanceof HTMLElement &&
            this.slides.includes(event.target)) {
          const increment = isNext ? 1 : -1;
          this.setCurrentSlide(this.getCurrentSlide() + increment);
        }
      }
    };
    /** Jumps to the real slides (from a dummy) when the transition ends. */
    this.handleTransitionEnd = (event) => {
      if (event.target !== this.slidesContainer) {
        return;
      }
      // Jump to the first or last page if it is cyclical.
      if (this.options.cyclical) {
        const currentSlide = this.getCurrentSlide();
        if (currentSlide > this.totalPages) {
          // Set the flag to false to prevent animation when it jumps from the
          // dummy slide to the real slide.
          this.animateOnInitialLoad = false;
          this.setCurrentSlide(1);
        } else if (currentSlide < 1) {
          this.animateOnInitialLoad = false;
          this.setCurrentSlide(this.totalPages);
        }
      }
    };
    this.handleGestureStart = (event) => {
      event.preventDefault();
      if ((this.isTouchEvent(event) && event.touches.length > 1) ||
          (event instanceof PointerEvent && event.button !== 0)) {
        return;
      }
      // Add the move and end listeners
      if (window.PointerEvent && event instanceof PointerEvent &&
          event.target instanceof Element) {
        event.target.setPointerCapture(event.pointerId);
      } else {
        // Add Mouse Listeners
        document.addEventListener(
            _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEMOVE, this.handleGestureMove, true);
        document.addEventListener(
            _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEUP, this.handleGestureEnd, true);
      }
      this.initialTouchPos = this.getGesturePointFromEvent(event);
      this.slidesContainer.style.transition = 'initial';
    };
    this.handleGestureMove = (event) => {
      event.preventDefault();
      if (!this.initialTouchPos) {
        return;
      }
      // Prevent small taps/etc triggering a dragging interaction
      const currentTouchPos = this.getGesturePointFromEvent(event);
      if (!this.isDragging) {
        const distanceDragged =
            Math.abs(this.getXDistance(this.initialTouchPos, currentTouchPos));
        if (distanceDragged < _constants__WEBPACK_IMPORTED_MODULE_6__.Numbers.DRAGSTART_THRESHOLD_PX) {
          return;
        }
      }
      this.isDragging = true;
      this.lastTouchPos = currentTouchPos;
      if (this.rafPending) {
        return;
      }
      this.rafPending = true;
      window.requestAnimationFrame(() => {
        this.onAnimFrame();
      });
    };
    this.handleGestureEnd = (event) => {
      var _a;
      event.preventDefault();
      if (this.isTouchEvent(event) &&
          ((_a = event.touches) === null || _a === void 0 ? void 0 :
                                                            _a.length) > 0) {
        return;
      }
      this.rafPending = false;
      // Remove Event Listeners
      if (window.PointerEvent && event instanceof PointerEvent &&
          event.target instanceof Element) {
        event.target.releasePointerCapture(event.pointerId);
      } else {
        // Remove Mouse Listeners
        document.removeEventListener(
            _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEMOVE, this.handleGestureMove, true);
        document.removeEventListener(
            _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEUP, this.handleGestureEnd, true);
      }
      this.updateSwipeRestPosition();
      this.initialTouchPos = null;
      this.lastTouchPos = null;
      // Resetting after to allow for click handler to be called first
      // (to determine actions based on if carousel has been dragged)
      setTimeout(() => {
        this.isDragging = false;
      }, 0);
    };
    this.isCards = this.root.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.CARDS);
    this.viewport = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.VIEWPORT}`);
    this.slidesContainer = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.LIST}`);
    this.slides = Array.from(
        this.slidesContainer.querySelectorAll(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.ITEM}`));
    this.slidesRef = Array.from(this.slides);
    this.navigation = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.NAVIGATION}`);
    this.prevBtn = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.BUTTON_PREV}`);
    this.nextBtn = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.BUTTON_NEXT}`);
    this.options = Object.assign(
        Object.assign(Object.assign({}, Carousel.defaults), options),
        this.getDataAttrs());
    this.observer = new _observer__WEBPACK_IMPORTED_MODULE_5__.Observer({currentSlide: this.options.currentSlide});
    this.setup();
    this.registerEvents();
  }
  /** Returns the default carousel options. */
  static get defaults() {
    return {
      currentSlide: 1,
      peekOut: true,
      navigation: true,
      animation: true,
      cyclical: false,
      cardsPerPage: 3,
      dragging: true,
    };
  }
  /** Sets up the component to prepare for the initial rendering. */
  setup() {
    // Add peek out feature class
    if (this.options.peekOut) {
      this.root.classList.add(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.PEEK_OUT);
    }
    // Copy dummyslides if it is cyclical
    if (this.options.cyclical) {
      this.copyDummySlides();
    }
    // Add a11y attributes (note dynamic values are set in render functions)
    this.slidesContainer.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_LIVE, 'polite');
    this.nextBtn.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_CONTROLS, this.root.id);
    this.prevBtn.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_CONTROLS, this.root.id);
    // Calculate and render
    this.calculate();
    this.currentXPosition = -1 * this.pagesX[this.getCurrentPage()];
    this.render();
  }
  /** Registers event listeners. */
  registerEvents() {
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.handleClick);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleKeydown);
    this.slidesContainer.addEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TRANSITIONEND, this.handleTransitionEnd);
    window.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.RESIZE, this.handleResize);
    this.updateTouchEvents();
    this.observer.listen('currentSlide', this.handleCurrentSlideChange);
  }
  /** Unregisters event listeners on removal of component. */
  destroy() {
    for (const slide of this.slides) {
      slide.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.TAB_INDEX);
      slide.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE);
      slide.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HIDDEN);
    }
    this.slidesContainer.style.removeProperty('transform');
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.handleClick);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleKeydown);
    this.slidesContainer.removeEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TRANSITIONEND, this.handleTransitionEnd);
    this.destroyNavigation();
    window.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.RESIZE, this.handleResize);
    if (this.enableDragging) {
      this.deregisterTouchEvents();
    }
    this.observer.unlisten('currentSlide', this.handleCurrentSlideChange);
  }
  /** Resets the component to the initial values. */
  reset() {
    this.setCurrentSlide(this.options.currentSlide);
  }
  /** Calculates carousel properties and scroll values. */
  calculate() {
    this.isCards ? this.calculateCardsProperties() : this.calculateProperties();
    this.calcScrollValue();
  }
  /** Calculates and sets properies for non-card carousels. */
  calculateProperties() {
    this.containerWidth =
        toNumber(getComputedStyle(this.slidesContainer).width);
    this.slideWidth = toNumber(getComputedStyle(this.slides[0]).width);
    const slidesPerPage = this.containerWidth / this.slideWidth;
    this.slidesPerPage = 1 - (slidesPerPage % 1) < _constants__WEBPACK_IMPORTED_MODULE_6__.Numbers.ROUNDING_THRESHOLD ?
        Math.ceil(slidesPerPage) :
        Math.floor(slidesPerPage);
    this.totalPages = Math.ceil(this.slidesRef.length / this.slidesPerPage);
    this.isShowingNavigation = this.options.navigation;
    // Only use tabs if there's a 1:1 relationship between slide and dot
    this.isTabModel = this.isShowingNavigation && this.slidesPerPage === 1;
  }
  /**
   * Calculates items per page and total pages attributes (for card carousels)
   * and updates the CSS grid styles accordingly.
   */
  calculateCardsProperties() {
    // Determine number of cards to show on the page
    const breakpoint = this.getCurrentBreakpoint();
    let cardsPerPage;
    switch (breakpoint) {
      case 'sm':
        // Always show one card at a time on mobile
        cardsPerPage = 1;
        break;
      case 'md':
        // Tablet shows one less card per page than desktop (minimum one)
        cardsPerPage = Math.max(1, this.options.cardsPerPage - 1);
        break;
      default:
        // Desktop uses the number of cards set in options
        cardsPerPage = this.options.cardsPerPage;
    }
    // Calculate card & container widths
    const viewportStyles = getComputedStyle(this.viewport);
    let viewportWidth = toNumber(viewportStyles.width) -
        toNumber(viewportStyles.paddingLeft) -
        toNumber(viewportStyles.paddingRight);
    if (this.options.peekOut && breakpoint === 'sm') {
      // Adjust how much of next slide peeks out on small viewport
      viewportWidth = viewportWidth - _constants__WEBPACK_IMPORTED_MODULE_6__.Numbers.PEEK_DISTANCE;
    }
    const gutter =
        toNumber(getComputedStyle(this.slidesContainer)['columnGap']);
    const totalPages = this.slides.length / cardsPerPage;
    const containerWidth =
        Math.floor(viewportWidth * totalPages + (totalPages - 1) * gutter);
    // Update element styles
    this.slidesContainer.style.width = `${containerWidth}px`;
    this.slidesContainer.style['gridTemplateColumns'] =
        `repeat(${this.slides.length}, 1fr)`;
    // Set properties
    this.containerWidth = viewportWidth + gutter;
    this.slidesPerPage = cardsPerPage;
    this.slideWidth = this.containerWidth / cardsPerPage;
    this.totalPages = Math.ceil(totalPages);
    // Never show navigation dots on mobile
    this.isShowingNavigation = this.options.navigation && breakpoint !== 'sm';
    // Never use tab model as items are anchors
    this.isTabModel = false;
  }
  /** Renders all the UI components in Carousel. */
  render() {
    this.renderSlides();
    this.renderButtons();
    this.renderNavigation();
  }
  /** Returns the currently active slide (1-indexed). */
  getCurrentSlide() {
    return this.observer.data['currentSlide'];
  }
  /** Returns the currently visible page (1-indexed). */
  getCurrentPage() {
    return Math.ceil(this.getCurrentSlide() / this.slidesPerPage);
  }
  /** Sets the currently active slide in the state (1-indexed). */
  setCurrentSlide(slide) {
    // Allow setting value to dummies (+/-1) if an animated cyclical carousel
    const buffer = this.options.cyclical && this.options.animation ? 1 : 0;
    const min = 1 - buffer;
    const max = this.slidesRef.length + buffer;
    // Wrap value if cyclical, behaving like a carousel does visually
    // eg. Slide 4 of a 3 slide cylical carousel is 1
    this.observer.data['currentSlide'] =
        this.options.cyclical ? wrap(slide, min, max) : clamp(slide, min, max);
  }
  /** Sets the current slide value to the first slide of the requested page. */
  setCurrentPage(page) {
    const slide = (page - 1) * this.slidesPerPage + 1;
    this.setCurrentSlide(slide);
  }
  /** Sets the current slide value to the previous page. */
  previous() {
    const previousPage = this.getCurrentPage() - 1;
    this.setCurrentPage(previousPage);
  }
  /** Sets the current slide value to the next page. */
  next() {
    const nextPage = this.getCurrentPage() + 1;
    this.setCurrentPage(nextPage);
  }
  /** Renders the appropriate slide attributes. */
  renderSlides() {
    this.transit();
    const currentIndex =
        wrap(this.getCurrentSlide(), 1, this.slidesRef.length) - 1;
    const currentPage = this.getCurrentPage();
    const currentPageIndex = currentPage - 1;
    const isFocused = document.activeElement instanceof HTMLElement &&
        this.slides.includes(document.activeElement);
    for (const [index, slide] of this.slidesRef.entries()) {
      const isCurrent = index === currentIndex;
      const isVisible = isCurrent ||
          // [or] slide is part of the current page
          Math.floor(index / this.slidesPerPage) === currentPageIndex ||
          // [or] it's visible on the last page due to edge alignment
          (currentPage === this.totalPages &&
           index >= this.slidesRef.length - this.slidesPerPage);
      if (isVisible ||
          (this.isCards && document.documentElement.clientWidth < 600)) {
        slide.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HIDDEN);
      } else {
        slide.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HIDDEN, 'true');
      }
      this.isTabModel ? slide.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.TABPANEL) :
                        slide.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE);
      if (this.isCards) {
        slide.tabIndex = isCurrent ? _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.TABBABLE : _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.NOT_TABBABLE;
      }
      // If any slide is in focus, move focus to current
      if (isCurrent && isFocused) {
        // Preventing scroll to ensure browser doesn't try and bring the
        // focussed element into view during transition.
        slide.focus({preventScroll: true});
        // To prevent Safari from scrolling.
        // https://caniuse.com/mdn-api_htmlelement_focus_preventscroll_option
        setTimeout(() => {
          this.viewport.scrollLeft = 0;
        }, 0);
      }
    }
    this.removeFocusOnHiddenElements();
  }
  /** Remove keyboard focus on focusable elements in the hidden slides. */
  removeFocusOnHiddenElements() {
    const index = wrap(this.getCurrentSlide(), 1, this.slidesRef.length) - 1;
    const currentIndex = this.options.cyclical ? index + 1 : index;
    for (const [index, slide] of this.slides.entries()) {
      const focusableElements = _focus___WEBPACK_IMPORTED_MODULE_4__.getFocusableElements(slide);
      for (const focusableElement of focusableElements) {
        if (index === currentIndex) {
          focusableElement.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.TAB_INDEX);
        } else {
          focusableElement.tabIndex = _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.NOT_TABBABLE;
        }
      }
    }
  }
  /**
   *  Turn on/off dragging based on settings and screen size.
   *  In small viewport, dragging is always enabled.
   *  In other viewport sizes, it depends on the component configurations.
   */
  updateTouchEvents() {
    const breakpoint = this.getCurrentBreakpoint();
    if (!this.options.dragging && breakpoint !== 'sm') {
      if (this.enableDragging) this.deregisterTouchEvents();
      this.slidesContainer.classList.add(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.DISABLE_GRAB);
      this.enableDragging = false;
    } else {
      if (!this.enableDragging) this.registerTouchEvents();
      this.slidesContainer.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.DISABLE_GRAB);
      this.enableDragging = true;
    }
  }
  /** Updates the transform for the viewport. */
  transit() {
    // Turn off animation in the initial loading and when it jumps from the
    // dummy slide to the real slide.
    if (!(this.animateOnInitialLoad && this.options.animation)) {
      this.slidesContainer.style.transition = 'initial';
    }
    // Retrieve the new translateX values
    const newTranslateX = this.pagesX[this.getCurrentPage()];
    this.slidesContainer.style.transform =
        `translate3d(${newTranslateX}px, 0, 0)`;
    this.currentXPosition = newTranslateX;
    // Turn on animation if it is temporarily turned off.
    if (this.options.animation && !this.animateOnInitialLoad) {
      this.turnOnAnimation();
    }
  }
  /** Turns on animation for slides (needs a slight buffer to avoid skips). */
  turnOnAnimation() {
    this.animateOnInitialLoad = true;
    // Use setTimeout to prevent the animation on the initial loading.
    // There is probably a gap before CSS takes the transform value setup in JS.
    setTimeout(() => {
      this.slidesContainer.style.transition = '';
    }, 10);
  }
  /** Renders the appropriate attributes in the dot navigation. */
  renderNavigation() {
    // If no navigation is required, hide
    if (!this.isShowingNavigation) {
      this.root.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.HAS_NAVIGATION);
      return;
    }
    // Show navigation and set a11y attributes
    this.root.classList.add(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.HAS_NAVIGATION);
    this.isTabModel ?
        this.navigation.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.TABLIST) :
        this.navigation.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE);
    // Build dots if number of pages has changed (or first render)
    if (this.dots.length !== this.totalPages) {
      this.buildNavigation();
    }
    const currentIndex = wrap(this.getCurrentPage(), 1, this.totalPages) - 1;
    const isFocused = document.activeElement instanceof HTMLButtonElement &&
        this.dots.includes(document.activeElement);
    for (const [index, dot] of this.dots.entries()) {
      const isCurrent = index === currentIndex;
      dot.classList.toggle(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.ACTIVE, isCurrent);
      dot.tabIndex = isCurrent ? _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.TABBABLE : _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.NOT_TABBABLE;
      if (this.isTabModel) {
        dot.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_SELECTED, `${isCurrent}`);
      } else {
        dot.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_CURRENT, `${isCurrent}`);
      }
      // If any dot is in focus, move focus to current
      if (isCurrent && isFocused) {
        dot.focus();
      }
    }
  }
  /** Shows or hides the next/previous buttons. */
  renderButtons() {
    if (this.options.cyclical) {
      return;
    }
    const activeElement = document.activeElement;
    const currentPage = this.getCurrentPage();
    const isFirstPage = currentPage === 1;
    const isLastPage = currentPage === this.totalPages;
    // Show/hide buttons
    this.prevBtn.classList.toggle(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.INACTIVE, isFirstPage);
    this.nextBtn.classList.toggle(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.INACTIVE, isLastPage);
    // If a button was in focus and now hidden, move to other
    if (isLastPage && activeElement === this.nextBtn) {
      this.prevBtn.focus();
    } else if (isFirstPage && activeElement === this.prevBtn) {
      this.nextBtn.focus();
    }
  }
  /** Builds the dot navigation. */
  buildNavigation() {
    var _a;
    this.destroyNavigation();
    // Create a dot per page
    for (let i = 0; i < this.totalPages; i++) {
      const dot = document.createElement('button');
      dot.classList.add(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.NAVIGATION_DOT);
      dot.dataset[_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.DATA_DOT] = `${i + 1}`;
      if (this.isTabModel) {
        const id = (_a = this.slidesRef[i * this.slidesPerPage]) === null ||
                _a === void 0 ?
            void 0 :
            _a.id;
        dot.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_CONTROLS, id);
        dot.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_LABELLEDBY, id);
        dot.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.TAB);
      } else {
        const template =
            this.navigation.dataset[_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.DATA_NAVIGATION_LABEL] ||
            _constants__WEBPACK_IMPORTED_MODULE_6__.Strings.NAVIGATION_LABEL_DEFAULT;
        const label =
            template
                .replace(_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.NAVIGATION_LABEL_NUMBER_VAR_NAME, `${i + 1}`)
                .replace(
                    _constants__WEBPACK_IMPORTED_MODULE_6__.Strings.NAVIGATION_LABEL_TOTAL_VAR_NAME,
                    `${this.totalPages}`);
        dot.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_CONTROLS, this.root.id);
        dot.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_LABEL, label);
      }
      this.navigation.appendChild(dot);
      this.dots.push(dot);
    }
  }
  /** Destroys the dot navigation. */
  destroyNavigation() {
    var _a;
    while (this.dots.length) {
      (_a = this.dots.pop()) === null || _a === void 0 ? void 0 : _a.remove();
    }
  }
  /** Copies the first and last slides into the DOM (for cyclical carousels). */
  copyDummySlides() {
    const firstSlide = this.cloneSlide(this.slides[0]);
    const lastSlide = this.cloneSlide(this.slides[this.slides.length - 1]);
    this.slidesContainer.append(firstSlide);
    this.slidesContainer.prepend(lastSlide);
    this.slides = [lastSlide, ...this.slides, firstSlide];
  }
  /** Clones a slide (for first/last dummies). */
  cloneSlide(slide) {
    const clone = slide.cloneNode(true);
    clone.id = `${slide.id}-copy`;
    clone.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HIDDEN, 'true');
    clone.tabIndex = _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.NOT_TABBABLE;
    return clone;
  }
  /** Calculates the scroll values for each page. */
  calcScrollValue() {
    // Determine min/max pages (depending on dummy slides)
    const delta = this.options.cyclical ? 1 : 0;
    const min = 1 - delta;
    const max = this.totalPages + delta;
    // The direction we're moving the slide container in
    const direction = this.isRtl ? 1 : -1;
    this.pagesX = [];
    for (let page = min; page <= max; page++) {
      const pageX =
          page < max ?  // Calculate the x position for the first slide within
                        // that page (not using page - 1 * containerWidth as
                        // slides may not fit exactly)
          (page - 1 + delta) * this.slidesPerPage *
              this.slideWidth :  // For final page, ensure end position is flush
                                   // against container edge
          this.slides.length * this.slideWidth - this.containerWidth;
      this.pagesX[page] = pageX * direction;
    }
  }
  registerTouchEvents() {
    if (window.PointerEvent) {
      // Add Pointer Event Listener
      this.viewport.addEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.POINTERDOWN, this.handleGestureStart, true);
      this.viewport.addEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.POINTERMOVE, this.handleGestureMove, true);
      this.viewport.addEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.POINTERUP, this.handleGestureEnd, true);
      this.viewport.addEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.POINTERCANCEL, this.handleGestureEnd, true);
    } else {
      // Add Touch Listener
      this.viewport.addEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TOUCHSTART, this.handleGestureStart, true);
      this.viewport.addEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TOUCHMOVE, this.handleGestureMove, true);
      this.viewport.addEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TOUCHEND, this.handleGestureEnd, true);
      this.viewport.addEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TOUCHCANCEL, this.handleGestureEnd, true);
      // Add Mouse Listener
      this.viewport.addEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEDOWN, this.handleGestureStart, true);
    }
  }
  deregisterTouchEvents() {
    if (window.PointerEvent) {
      // Add Pointer Event Listener
      this.viewport.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.POINTERDOWN, this.handleGestureStart, true);
      this.viewport.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.POINTERMOVE, this.handleGestureMove, true);
      this.viewport.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.POINTERUP, this.handleGestureEnd, true);
      this.viewport.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.POINTERCANCEL, this.handleGestureEnd, true);
    } else {
      // Add Touch Listener
      this.viewport.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TOUCHSTART, this.handleGestureStart, true);
      this.viewport.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TOUCHMOVE, this.handleGestureMove, true);
      this.viewport.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TOUCHEND, this.handleGestureEnd, true);
      this.viewport.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TOUCHCANCEL, this.handleGestureEnd, true);
      // Add Mouse Listener
      this.viewport.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEDOWN, this.handleGestureStart, true);
    }
  }
  updateSwipeRestPosition() {
    const differenceInX =
        this.getXDistance(this.initialTouchPos, this.lastTouchPos);
    // Let CSS transition to take charge it
    this.slidesContainer.style.transition = '';
    const validDrag =
        Math.abs(differenceInX) >= this.containerWidth * _constants__WEBPACK_IMPORTED_MODULE_6__.Numbers.DRAG_THRESHOLD;
    // If dragging distance is over 20% of the viewport width, transit to
    // the next/prev page, otherwise rewind to the original position.
    if (validDrag) {
      if ((differenceInX > 0 && !this.isRtl) ||
          (differenceInX < 0 && this.isRtl)) {
        this.next();
      }
      if ((differenceInX < 0 && !this.isRtl) ||
          (differenceInX > 0 && this.isRtl)) {
        this.previous();
      }
    }
    this.transit();
  }
  /** Calculates the x distance between 2 positions. */
  getXDistance(startPosition, endPosition) {
    return startPosition && endPosition ? startPosition.x - endPosition.x : 0;
  }
  getGesturePointFromEvent(event) {
    const point = {x: 0, y: 0};
    if (this.isTouchEvent(event)) {
      if (event.targetTouches) {
        // Prefer Touch Events
        point.x = event.targetTouches[0].clientX;
        point.y = event.targetTouches[0].clientY;
      }
    } else {
      // Either Mouse event or Pointer Event
      point.x = event.clientX;
      point.y = event.clientY;
    }
    return point;
  }
  onAnimFrame() {
    if (!this.rafPending) {
      return;
    }
    const differenceInX =
        this.getXDistance(this.initialTouchPos, this.lastTouchPos);
    const newXTransform = this.currentXPosition - differenceInX;
    const transformStyle = `translate3d(${newXTransform}px, 0, 0)`;
    this.slidesContainer.style.transform = transformStyle;
    this.rafPending = false;
  }
  /** Determines whether the event is a TouchEvent. */
  isTouchEvent(event) {
    return window.TouchEvent && event instanceof TouchEvent;
  }
  /** Returns the options set via data attributes. */
  getDataAttrs() {
    const options = {};
    for (const option of Object.keys(Carousel.defaults)) {
      const attr =
          `glueCarousel${option.toUpperCase().slice(0, 1)}${option.slice(1)}`;
      if (this.root.dataset[attr]) {
        if (option === 'currentSlide' || option === 'cardsPerPage') {
          const value = Number(this.root.dataset[attr]);
          if (!isNaN(value)) options[option] = value;
        } else {
          options[option] = this.root.dataset[attr] === 'true';
        }
      }
    }
    return options;
  }
  /**
   * Retrieves the named breakpoint currently injected in DOM.
   */
  getCurrentBreakpoint() {
    const styles = window.getComputedStyle(document.body, ':after');
    const content = styles.getPropertyValue('content');
    const breakpoint = content.replace(/["']/g, '');
    return breakpoint;
  }
}
/** Clamps a number between the min and max values. */
function clamp(num, min, max) {
  return Math.max(min, Math.min(max, num));
}
/** Converts a CSS property value (as a pixel string) to a number. */
function toNumber(propertyValue) {
  return Number(propertyValue.replace('px', ''));
}
/**
 * Wraps a number between the min and max values (different to clamp as will
 * loop around).
 */
function wrap(num, min, max) {
  const range = max + 1 - min;
  const wrapped = min + ((num - min) % range);
  return wrapped < min ? wrapped + range : wrapped;
}



/***/ }),

/***/ "./_glue/lib/constants/attribute.js":
/*!******************************************!*\
  !*** ./_glue/lib/constants/attribute.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Attribute: () => (/* binding */ Attribute),
/* harmony export */   DataAttrs: () => (/* binding */ DataAttrs),
/* harmony export */   Direction: () => (/* binding */ Direction),
/* harmony export */   Role: () => (/* binding */ Role),
/* harmony export */   TabIndex: () => (/* binding */ TabIndex)
/* harmony export */ });
/**
 * @fileoverview A list of Glue attributes.
 */
var Attribute;
(function(Attribute) {
Attribute['ARIA_CONTROLS'] = 'aria-controls';
Attribute['ARIA_CURRENT'] = 'aria-current';
Attribute['ARIA_DESCRIBEDBY'] = 'aria-describedby';
Attribute['ARIA_EXPANDED'] = 'aria-expanded';
Attribute['ARIA_HASPOPUP'] = 'aria-haspopup';
Attribute['ARIA_HIDDEN'] = 'aria-hidden';
Attribute['ARIA_LABELLEDBY'] = 'aria-labelledby';
Attribute['ARIA_LABEL'] = 'aria-label';
Attribute['ARIA_LIVE'] = 'aria-live';
Attribute['ARIA_MODAL'] = 'aria-modal';
Attribute['ARIA_SELECTED'] = 'aria-selected';
Attribute['INERT'] = 'inert';
Attribute['ROLE'] = 'role';
Attribute['TAB_INDEX'] = 'tabindex';
Attribute['TYPE'] = 'type';
})(Attribute || (Attribute = {}));
var DataAttrs;
(function(DataAttrs) {
DataAttrs['NO_SNIPPET'] = 'nosnippet';
})(DataAttrs || (DataAttrs = {}));
var Direction;
(function(Direction) {
Direction['LTR'] = 'ltr';
Direction['RTL'] = 'rtl';
})(Direction || (Direction = {}));
var Role;
(function(Role) {
Role['COMPLEMENTARY'] = 'complementary';
Role['BUTTON'] = 'button';
Role['DIALOG'] = 'dialog';
Role['REGION'] = 'region';
Role['TABPANEL'] = 'tabpanel';
Role['TABLIST'] = 'tablist';
Role['NAVIGATION'] = 'navigation';
Role['TAB'] = 'tab';
Role['MENU'] = 'menu';
Role['MENUITEM'] = 'menuitem';
Role['MENUBAR'] = 'menubar';
Role['TOOLTIP'] = 'tooltip';
Role['GRIDCELL'] = 'gridcell';
Role['ROW'] = 'row';
Role['PRESENTATION'] = 'presentation';
Role['NONE'] = 'none';
})(Role || (Role = {}));
var TabIndex;
(function(TabIndex) {
TabIndex[TabIndex['TABBABLE'] = 0] = 'TABBABLE';
TabIndex[TabIndex['NOT_TABBABLE'] = -1] = 'NOT_TABBABLE';
})(TabIndex || (TabIndex = {}));



/***/ }),

/***/ "./_glue/lib/constants/classes.js":
/*!****************************************!*\
  !*** ./_glue/lib/constants/classes.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CssClasses: () => (/* binding */ CssClasses)
/* harmony export */ });
/**
 * @fileoverview A list of Glue classes.
 */
var CssClasses;
(function(CssClasses) {
CssClasses['SHOW'] = 'glue-is-shown';
CssClasses['ACTIVE'] = 'glue-is-active';
})(CssClasses || (CssClasses = {}));



/***/ }),

/***/ "./_glue/lib/copy/constants.js":
/*!*************************************!*\
  !*** ./_glue/lib/copy/constants.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CssClasses: () => (/* binding */ CssClasses),
/* harmony export */   Demos: () => (/* binding */ Demos),
/* harmony export */   Message: () => (/* binding */ Message),
/* harmony export */   Strings: () => (/* binding */ Strings)
/* harmony export */ });
/**
 * @fileoverview Constants used by the Copy component.
 */
/**
 * Classes that identify sub elements or adjust display of sub elements.
 */
var CssClasses;
(function(CssClasses) {
CssClasses['ROOT'] = 'glue-copy';
CssClasses['VALUE'] = 'glue-copy-value';
CssClasses['BUTTON'] = 'glue-copy-button';
CssClasses['IS_COPIED'] = 'glue-is-copied';
CssClasses['POPOVER_ROOT'] = 'glue-popover';
CssClasses['SOCIAL_POPOVER_ROOT'] = 'glue-social__popover';
})(CssClasses || (CssClasses = {}));
/**
 * List of demos used by demo server.
 */
var Demos;
(function(Demos) {
Demos['BASE'] = 'base';
Demos['SOCIAL'] = 'social';
})(Demos || (Demos = {}));
/**
 * Data properties that identify user-provided messages.
 */
var Message;
(function(Message) {
Message['SUCCESS'] = 'glue-copy-success';
Message['FAIL'] = 'glue-copy-fail';
})(Message || (Message = {}));
/**
 * Various strings used throughout the copy component.
 */
var Strings;
(function(Strings) {
/**
 * Error message provided if input element is not found.
 */
Strings['MISSING_INPUT'] = 'Input element is missing';
/**
 * Error message provided if copy button element is not found.
 */
Strings['MISSING_COPY_BUTTON'] = 'Copy button is missing';
/**
 * Default message shown to users after successful copy operation.
 */
Strings['SUCCESS_MESSAGE'] = 'Copied to clipboard';
/**
 * Default message shown to users after failed copy operation.
 */
Strings['FAIL_MESSAGE'] = 'Press Ctrl+C or \u2318+C to copy';
})(Strings || (Strings = {}));



/***/ }),

/***/ "./_glue/lib/copy/index.js":
/*!*********************************!*\
  !*** ./_glue/lib/copy/index.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Copy: () => (/* binding */ Copy)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base */ "./_glue/lib/base/index.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _events_key__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events/key */ "./_glue/lib/events/key.js");
/* harmony import */ var _popover_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../popover/constants */ "./_glue/lib/popover/constants.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants */ "./_glue/lib/copy/constants.js");









/**
 * A class to copy text input content to clipboard.
 */
class Copy extends _base__WEBPACK_IMPORTED_MODULE_0__.Component {
  /** @param root root element for the Copy component. */
  constructor(root) {
    var _a;
    super(root);
    // Message to show if copy command succeeds.
    this.successMsg = _constants__WEBPACK_IMPORTED_MODULE_4__.Strings.SUCCESS_MESSAGE;
    // Message to show if copy command fails.
    this.failMsg = _constants__WEBPACK_IMPORTED_MODULE_4__.Strings.FAIL_MESSAGE;
    // Original label of the copy button.
    this.originalLabel = '';
    const copyValEl = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.VALUE}`);
    const copyButtonEl = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.BUTTON}`);
    this.popoverParentEl =
        (_a = this.root.closest(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.POPOVER_ROOT}`)) !== null &&
            _a !== void 0 ?
        _a :
        this.root.closest(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.SOCIAL_POPOVER_ROOT}`);
    if (!copyValEl) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_4__.Strings.MISSING_INPUT);
    }
    if (!copyButtonEl) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_4__.Strings.MISSING_COPY_BUTTON);
    }
    this.copyValueEl = copyValEl;
    this.copyButtonEl = copyButtonEl;
    this.selection = window.getSelection();
    this.clickHandler = (evt) => {
      this.copy();
      evt.preventDefault();
    };
    this.keyDownHandler = (evt) => {
      if (evt.key === _events_key__WEBPACK_IMPORTED_MODULE_2__.Key.ENTER) {
        this.copy();
        evt.preventDefault();
      }
    };
    this.closeHandler = () => {
      this.reset();
    };
    this.init();
  }
  /** Initializes the copy component. */
  init() {
    var _a;
    const success = this.root.getAttribute(_constants__WEBPACK_IMPORTED_MODULE_4__.Message.SUCCESS);
    const fail = this.root.getAttribute(_constants__WEBPACK_IMPORTED_MODULE_4__.Message.FAIL);
    this.successMsg = success ? success : this.successMsg;
    this.failMsg = fail ? fail : this.failMsg;
    this.originalLabel =
        this.copyButtonEl.textContent ? this.copyButtonEl.textContent : '';
    this.copyButtonEl.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_1__.EventType.CLICK, this.clickHandler);
    this.copyButtonEl.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_1__.EventType.KEYDOWN, this.keyDownHandler);
    // Resets the copy button if its parent popover is closed
    (_a = this.popoverParentEl) === null || _a === void 0 ?
        void 0 :
        _a.addEventListener(_popover_constants__WEBPACK_IMPORTED_MODULE_3__.CustomEvent.CLOSE_EVENT, this.closeHandler);
  }
  /**
   * Resets component and removes all event listeners.
   */
  destroy() {
    var _a;
    this.reset();
    this.copyButtonEl.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_1__.EventType.CLICK, this.clickHandler);
    this.copyButtonEl.removeEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_1__.EventType.KEYDOWN, this.keyDownHandler);
    (_a = this.popoverParentEl) === null || _a === void 0 ?
        void 0 :
        _a.removeEventListener(_popover_constants__WEBPACK_IMPORTED_MODULE_3__.CustomEvent.CLOSE_EVENT, this.closeHandler);
  }
  /** Copies text input string to clipboard. */
  copy() {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function*() {
      var _a, _b;
      if (this.copyValueEl && this.copyValueEl.select) {
        this.copyValueEl.select();
        const userAgentMatch = navigator.userAgent.match(/ipad|iphone/i);
        if (userAgentMatch) {
          const range = document.createRange();
          range.selectNodeContents(this.copyValueEl);
          (_a = this.selection) === null || _a === void 0 ?
              void 0 :
              _a.removeAllRanges();
          (_b = this.selection) === null || _b === void 0 ? void 0 :
                                                            _b.addRange(range);
          this.copyValueEl.setSelectionRange(0, 999999);
        }
      }
      yield navigator.clipboard.writeText(this.copyValueEl.value)
          .then(
              () => {
                // Shows success message and updates various elements
                this.copyButtonEl.textContent = this.successMsg;
                this.copyButtonEl.classList.add(_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.IS_COPIED);
                this.copyButtonEl.disabled = true;
                this.copyValueEl.blur();
              },
              () => {
                // Render failure message
                this.copyButtonEl.textContent = this.failMsg;
              });
      this.copyValueEl.focus();
    });
  }
  /**
   * Resets input and copy button and re-enables copy button.
   */
  reset() {
    var _a;
    this.copyButtonEl.textContent = this.originalLabel;
    this.copyButtonEl.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.IS_COPIED);
    this.copyButtonEl.disabled = false;
    this.copyValueEl.setSelectionRange(0, 0);
    (_a = this.selection) === null || _a === void 0 ? void 0 :
                                                      _a.removeAllRanges();
  }
}



/***/ }),

/***/ "./_glue/lib/debounce/index.js":
/*!*************************************!*\
  !*** ./_glue/lib/debounce/index.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Debounce: () => (/* binding */ Debounce)
/* harmony export */ });
/**
 * @fileoverview A simple function to create a debounced function.
 * A debounced function wraps a function, and delay its execution every time
 * the debounced function is called. This is equivalent to goog.async.Debouncer
 * but lighter and a simpler API.
 *
 * @see https://glue-docs.appspot.com/docs/components/raw/debounce
 *
 * Example:
 *
 * // Call a function 250ms after the last scroll event fires.
 * var handleScroll = function() {};
 * window.addEventListener('scroll', new Debounce(handleScroll, 250).debounce);
 *
 */
/**
 * Debounces a function after a given delay.
 */
class Debounce {
  /**
   * @param fn The function to debounce.
   * @param delay The delay in ms until the function should be executed.
   */
  constructor(fn, delay) {
    this.fn = fn;
    this.delay = delay;
  }
  /**
   * Debounces by reinitializing the timer until the function should execute.
   */
  debounce() {
    clearTimeout(this.timeoutId);
    this.timeoutId = window.setTimeout(this.fn, this.delay);
  }
  /**
   * Cancels any ongoing debouncing timer.
   */
  cancel() {
    clearTimeout(this.timeoutId);
  }
}



/***/ }),

/***/ "./_glue/lib/easing/index.js":
/*!***********************************!*\
  !*** ./_glue/lib/easing/index.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ease: () => (/* binding */ ease),
/* harmony export */   easeInBack: () => (/* binding */ easeInBack),
/* harmony export */   easeInBounce: () => (/* binding */ easeInBounce),
/* harmony export */   easeInCirc: () => (/* binding */ easeInCirc),
/* harmony export */   easeInCubic: () => (/* binding */ easeInCubic),
/* harmony export */   easeInElastic: () => (/* binding */ easeInElastic),
/* harmony export */   easeInExpo: () => (/* binding */ easeInExpo),
/* harmony export */   easeInOutBack: () => (/* binding */ easeInOutBack),
/* harmony export */   easeInOutBounce: () => (/* binding */ easeInOutBounce),
/* harmony export */   easeInOutCirc: () => (/* binding */ easeInOutCirc),
/* harmony export */   easeInOutCubic: () => (/* binding */ easeInOutCubic),
/* harmony export */   easeInOutElastic: () => (/* binding */ easeInOutElastic),
/* harmony export */   easeInOutExpo: () => (/* binding */ easeInOutExpo),
/* harmony export */   easeInOutQuad: () => (/* binding */ easeInOutQuad),
/* harmony export */   easeInOutQuart: () => (/* binding */ easeInOutQuart),
/* harmony export */   easeInOutQuint: () => (/* binding */ easeInOutQuint),
/* harmony export */   easeInOutSine: () => (/* binding */ easeInOutSine),
/* harmony export */   easeInQuad: () => (/* binding */ easeInQuad),
/* harmony export */   easeInQuart: () => (/* binding */ easeInQuart),
/* harmony export */   easeInQuint: () => (/* binding */ easeInQuint),
/* harmony export */   easeInSine: () => (/* binding */ easeInSine),
/* harmony export */   easeOutBack: () => (/* binding */ easeOutBack),
/* harmony export */   easeOutBounce: () => (/* binding */ easeOutBounce),
/* harmony export */   easeOutCirc: () => (/* binding */ easeOutCirc),
/* harmony export */   easeOutCubic: () => (/* binding */ easeOutCubic),
/* harmony export */   easeOutElastic: () => (/* binding */ easeOutElastic),
/* harmony export */   easeOutExpo: () => (/* binding */ easeOutExpo),
/* harmony export */   easeOutQuad: () => (/* binding */ easeOutQuad),
/* harmony export */   easeOutQuart: () => (/* binding */ easeOutQuart),
/* harmony export */   easeOutQuint: () => (/* binding */ easeOutQuint),
/* harmony export */   easeOutSine: () => (/* binding */ easeOutSine),
/* harmony export */   easingFunctions: () => (/* binding */ easingFunctions),
/* harmony export */   linear: () => (/* binding */ linear)
/* harmony export */ });
/**
 * @fileoverview A series of utility functions for use in implementing easing in
 * javascript animations.
 *
 * Closure provides three easing functions (goog.fx.easing.easeIn,
 * goog.fx.easing.easeOut, goog.fx.easing.inAndOut), but as that is a woefully
 * inadequate library for broad animation use, this series of functions adds
 * many more options to be used in a similar way. Easing functions are useful
 * for adding a natural feel to what would otherwise be unrealistic, linear
 * animations.
 *
 * Example usage: Say you have a DOM element that you want to animate by moving
 * it between two arbitrary locations in a page, over 2 seconds. Normally you'd
 * determine its starting position, its ending position, set up an interval,
 * then with each iteration, determine the position you should move it to based
 * on its initial and ending position values and a percentage that represents
 * its progress from start to finish, based on the 2 second duration. Call that
 * percentage T. In order to implement an easing method using glue.fx.easing,
 * simply pass T through your desired easing method, and the returned value is
 * an "eased" value of T. Using that new T, you set the element's position,
 * and the resulting animation will have a smooth ease to it, instead of its
 * original, jarring linear movement. It's hard to understand this without
 * seeing it in action, so visit the example link below for some live animation
 * utilizing all of the easing functions provided in this library.
 *
 * If you are more familiar with jQuery's style of easing methods which expect
 * four arguments (t, b, c, d), you can use glue.fx.easing.ease(), passing in
 * those four arguments and a reference to the easing method you'd like to use.
 * Whether you should use this, or directly call one of the single-argument
 * methods, is up to the developer, and largely depends on circumstance.
 *
 * Note: Frequently, you will have the easing method by name in string form (as
 * when contained in some JSON configuration data), so you can also call it
 * like: glue.fx.easing[methodName](percentage);
 *
 * For examples, see:
 * https://glue-docs.appspot.com/docs/components/raw/fx-easing
 *
 * A namespace for the easing functions. This is being created and exported
 * because we will often have the name of our desired easing method by string
 * only, so we'll need to test to see if glue.fx.easing contains a property
 * (function) with that name, and then call it like so:
 * glue.fx.easing[methodName](percentage);
 */
/**
 * Eases values based on the typical four-argument easing method structure used
 * by popular libraries like jQuery. This is an adapter to interface with the
 * single-argument easing methods in this class.
 * @param t Current time of the animation.
 * @param b Beginning value of the property to be eased.
 * @param c Total change in the property value across this animation.
 * @param d Total duration of the animation.
 * @param func The easing method to call.
 * @return The final eased value.
 */
function ease(t, b, c, d, func) {
  return b + c * func(t / d);
}
/**
 * Eases the value in with a Sine curve.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeInSine(t) {
  return t === 0 || t === 1 ? t : 1 - Math.cos(t * (Math.PI / 2));
}
/**
 * Eases the value out with a Sine curve.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeOutSine(t) {
  return t === 0 || t === 1 ? t : Math.sin(t * (Math.PI / 2));
}
/**
 * Eases the value in and out with a Sine curve.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeInOutSine(t) {
  return t === 0 || t === 1 ? t : -0.5 * (Math.cos(Math.PI * t) - 1);
}
/**
 * Eases the value in with a quadratic curve.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeInQuad(t) {
  return t === 0 || t === 1 ? t : t * t;
}
/**
 * Eases the value out with a quadratic curve.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeOutQuad(t) {
  return t === 0 || t === 1 ? t : t * (2 - t);
}
/**
 * Eases the value in and out with a quadratic curve.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeInOutQuad(t) {
  if (t === 0 || t === 1) {
    return t;
  } else if (t < 0.5) {
    return 2 * t * t;
  } else {
    return -1 + (4 - 2 * t) * t;
  }
}
/**
 * Eases the value in with a cubic curve.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeInCubic(t) {
  return t === 0 || t === 1 ? t : t * t * t;
}
/**
 * Eases the value out with a cubic curve.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeOutCubic(t) {
  return t === 0 || t === 1 ? t : --t * t * t + 1;
}
/**
 * Eases the value in and out with a cubic curve.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeInOutCubic(t) {
  if (t === 0 || t === 1) {
    return t;
  } else if (t < 0.5) {
    return 4 * t * t * t;
  } else {
    return (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
  }
}
/**
 * Eases the value in with a quartic curve.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeInQuart(t) {
  return t === 0 || t === 1 ? t : t * t * t * t;
}
/**
 * Eases the value out with a quartic curve.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeOutQuart(t) {
  return t === 0 || t === 1 ? t : 1 - --t * t * t * t;
}
/**
 * Eases the value in and out with a quartic curve.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeInOutQuart(t) {
  if (t === 0 || t === 1) {
    return t;
  } else if (t < 0.5) {
    return 8 * t * t * t * t;
  } else {
    return 1 - 8 * --t * t * t * t;
  }
}
/**
 * Eases the value in with a quintic curve.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeInQuint(t) {
  return t === 0 || t === 1 ? t : t * t * t * t * t;
}
/**
 * Eases the value out with a quintic curve.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeOutQuint(t) {
  return t === 0 || t === 1 ? t : 1 + --t * t * t * t * t;
}
/**
 * Eases the value in and out with a quintic curve.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeInOutQuint(t) {
  return t === 0 || t === 1 ? t :
      t < 0.5               ? 16 * t * t * t * t * t :
                              1 + 16 * --t * t * t * t * t;
}
/**
 * Eases the value in with an exponential curve.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeInExpo(t) {
  return t === 0 || t === 1 ? t : Math.pow(2, 10 * (t - 1));
}
/**
 * Eases the value out with an exponential curve.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeOutExpo(t) {
  return t === 0 || t === 1 ? t : 1 - Math.pow(2, -10 * t);
}
/**
 * Eases the value in and out with an exponential curve.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeInOutExpo(t) {
  if (t === 0 || t === 1) {
    return t;
  } else if (t < 0.5) {
    return 0.5 * Math.pow(2, 10 * (t * 2 - 1));
  } else {
    return 0.5 * (2 - Math.pow(2, -10 * (t * 2 - 1)));
  }
}
/**
 * Eases the value in with a circular curve.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeInCirc(t) {
  return t === 0 || t === 1 ? t : 1 - Math.sqrt(1 - t * t);
}
/**
 * Eases the value out with a circular curve.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeOutCirc(t) {
  return t === 0 || t === 1 ? t : Math.sqrt(1 - (t - 1) * (t - 1));
}
/**
 * Eases the value in and out with a circular curve.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeInOutCirc(t) {
  if (t === 0 || t === 1) {
    return t;
  } else if (t < 0.5) {
    return -0.5 * (Math.sqrt(1 - t * t * 4) - 1);
  } else {
    return 0.5 * (Math.sqrt(1 - 4 * (t - 1) * (t - 1)) + 1);
  }
}
/**
 * Eases the value in after bounding backwards at the beginning.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeInBack(t) {
  return t === 0 || t === 1 ? t : t * t * (2.70158 * t - 1.70158);
}
/**
 * Eases the value out after bounding past the end point and back.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeOutBack(t) {
  return t === 0 || t === 1 ?
      t :
      (t - 1) * (t - 1) * (2.70158 * (t - 1) + 1.70158) + 1;
}
/**
 * Eases the value in and out with an initial and ending movement beyond the
 * full range.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeInOutBack(t) {
  if (t === 0 || t === 1) {
    return t;
  } else if (t < 0.5) {
    return 0.5 * (t * 2) * (t * 2) * (3.5949095 * (t * 2) - 2.5949095);
  } else {
    return (
        0.5 *
        ((t * 2 - 2) * (t * 2 - 2) * (3.5949095 * (t * 2 - 2) + 2.5949095) +
         2));
  }
}
/**
 * Eases the value in with an elastic springy motion.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeInElastic(t) {
  if (t === 0 || t === 1) {
    return t;
  } else {
    return (
        -1 *
        (Math.pow(2, 10 * (t - 1)) *
         Math.sin(((t - 1.075) * (2 * Math.PI)) / 0.3)));
  }
}
/**
 * Eases the value out with an elastic springy motion.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeOutElastic(t) {
  return t === 0 || t === 1 ?
      t :
      Math.pow(2, -10 * t) * Math.sin(((t - 0.075) * (2 * Math.PI)) / 0.3) + 1;
}
/**
 * Eases the value in and out with an elastic springy motion.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeInOutElastic(t) {
  if (t === 0 || t === 1) {
    return t;
  } else if (t < 0.5) {
    return (
        -0.5 *
        (Math.pow(2, 10 * (t * 2 - 1)) *
         Math.sin(((t * 2 - 1.1125) * 2 * Math.PI) / 0.45)));
  } else {
    return (
        0.5 * Math.pow(2, -10 * (t * 2 - 1)) *
            Math.sin(((t * 2 - 1.1125) * 2 * Math.PI) / 0.45) +
        1);
  }
}
/**
 * Eases the value in with a simple physics bounce.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeInBounce(t) {
  return t === 0 || t === 1 ? t : 1 - easeOutBounce(1 - t);
}
/**
 * Eases the value out with a simple physics bounce.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeOutBounce(t) {
  if (t === 0 || t === 1) {
    return t;
  } else if (t < 1 / 2.75) {
    return 7.5625 * t * t;
  } else if (t < 2 / 2.75) {
    return 7.5625 * (t - 1.5 / 2.75) * (t - 1.5 / 2.75) + 0.75;
  } else if (t < 2.5 / 2.75) {
    return 7.5625 * (t - 2.25 / 2.75) * (t - 2.25 / 2.75) + 0.9375;
  } else {
    return 7.5625 * (t - 2.625 / 2.75) * (t - 2.625 / 2.75) + 0.984375;
  }
}
/**
 * Eases the value in and out with starting and ending bounces.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function easeInOutBounce(t) {
  if (t === 0 || t === 1) {
    return t;
  } else if (t < 0.5) {
    return easeInBounce(t * 2) * 0.5;
  } else {
    return easeOutBounce(t * 2 - 1) * 0.5 + 0.5;
  }
}
/**
 * Returns the value without any easing. This is only useful if a script is
 * expecting an easing method, but one isn't needed in that instance.
 * @param t Input between 0 and 1.
 * @return Output between 0 and 1.
 */
function linear(t) {
  return t;
}
/**
 * A Record/Map for easing functions.
 * This is for looking up an easing function by name.
 */
const easingFunctions = {
  'easeInSine': easeInSine,
  'easeOutSine': easeOutSine,
  'easeInOutSine': easeInOutSine,
  'easeInQuad': easeInQuad,
  'easeOutQuad': easeOutQuad,
  'easeInOutQuad': easeInOutQuad,
  'easeInCubic': easeInCubic,
  'easeOutCubic': easeOutCubic,
  'easeInOutCubic': easeInOutCubic,
  'easeInQuart': easeInQuart,
  'easeOutQuart': easeOutQuart,
  'easeInOutQuart': easeInOutQuart,
  'easeInQuint': easeInQuint,
  'easeOutQuint': easeOutQuint,
  'easeInOutQuint': easeInOutQuint,
  'easeInExpo': easeInExpo,
  'easeOutExpo': easeOutExpo,
  'easeInOutExpo': easeInOutExpo,
  'easeInCirc': easeInCirc,
  'easeOutCirc': easeOutCirc,
  'easeInOutCirc': easeInOutCirc,
  'easeInBack': easeInBack,
  'easeOutBack': easeOutBack,
  'easeInOutBack': easeInOutBack,
  'easeInElastic': easeInElastic,
  'easeOutElastic': easeOutElastic,
  'easeInOutElastic': easeInOutElastic,
  'easeInBounce': easeInBounce,
  'easeOutBounce': easeOutBounce,
  'easeInOutBounce': easeInOutBounce,
  'linear': linear,
};


/***/ }),

/***/ "./_glue/lib/events/eventtarget.js":
/*!*****************************************!*\
  !*** ./_glue/lib/events/eventtarget.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EventTarget: () => (/* binding */ EventTarget)
/* harmony export */ });
/**
 * @fileoverview A lightweight implementation of the Observable pattern, with
 * a Closure-like API.
 */
class EventTarget {
  constructor() {
    this.listeners = {};
  }
  /**
   * Emits an event.
   * Note: This interface differs from the Closure dispatchEvent method. The
   * parameters are different. See {@code goog.events.Listenable.dispatchEvent}
   * @param eventData Additional event data.
   */
  dispatchEvent(evtType, eventData) {
    const listeners = this.getListenersList(evtType);
    let listener;
    for (let i = 0; i < listeners.length; i++) {
      listener = listeners[i];
      listener(eventData);
    }
  }
  /**
   * Listens to an event, and executes a handler function when it fires.
   */
  listen(evtType, handler) {
    const listeners = this.getListenersList(evtType);
    listeners.push(handler);
  }
  /**
   * Stops listening to an event.
   */
  unlisten(evtType, handler) {
    const listeners = this.getListenersList(evtType);
    for (let i = listeners.length - 1; i >= 0; i--) {
      const h = listeners[i];
      if (h === handler) {
        listeners.splice(i, 1);
      }
    }
  }
  /**
   * Returns the list of listeners for a specific event type.
   */
  getListenersList(evtType) {
    if (!this.listeners[evtType]) {
      this.listeners[evtType] = [];
    }
    return this.listeners[evtType];
  }
  /**
   * Removes all listeners on the host component.
   */
  removeAllListeners() {
    for (const evtType of Object.keys(this.listeners)) {
      if (Object.prototype.hasOwnProperty.call(this.listeners, evtType)) {
        this.listeners[evtType].forEach((handler) => {
          this.unlisten(evtType, handler);
        });
      }
    }
  }
}



/***/ }),

/***/ "./_glue/lib/events/eventtype.js":
/*!***************************************!*\
  !*** ./_glue/lib/events/eventtype.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EventType: () => (/* binding */ EventType)
/* harmony export */ });
/**
 * @fileoverview Constants of event types.
 */
var EventType;
(function(EventType) {
// Mouse
EventType['CLICK'] = 'click';
EventType['FOCUS'] = 'focus';
EventType['MOUSEENTER'] = 'mouseenter';
EventType['MOUSEOVER'] = 'mouseover';
EventType['MOUSELEAVE'] = 'mouseleave';
EventType['MOUSEOUT'] = 'mouseout';
EventType['MOUSEWHEEL'] = 'mousewheel';
EventType['HOVER'] = 'hover';
EventType['NONE'] = 'none';
EventType['MOUSEDOWN'] = 'mousedown';
EventType['MOUSEMOVE'] = 'mousemove';
EventType['MOUSEUP'] = 'mouseup';
// Keyboard
EventType['KEYDOWN'] = 'keydown';
EventType['KEYPRESS'] = 'keypress';
EventType['KEYUP'] = 'keyup';
EventType['BLUR'] = 'blur';
EventType['LOAD'] = 'load';
EventType['PAN'] = 'pan';
EventType['PAN_LEFT'] = 'panleft';
EventType['PAN_RIGHT'] = 'panright';
EventType['PAN_END'] = 'panend';
EventType['PAN_START'] = 'panstart';
EventType['PAN_MOVE'] = 'panmove';
EventType['SCROLL'] = 'scroll';
// Element
EventType['CHANGE'] = 'change';
EventType['FOCUS_IN'] = 'focusin';
EventType['FOCUS_OUT'] = 'focusout';
// CSS Event
EventType['TRANSITIONEND'] = 'transitionend';
EventType['TRANSITIONSTART'] = 'transitionstart';
// Viewport
EventType['RESIZE'] = 'resize';
EventType['ORIENTATION_CHANGE'] = 'orientationchange';
EventType['DOM_CONTENT_READY'] = 'DOMContentReady';
EventType['HASHCHANGE'] = 'hashchange';
// Pointer
EventType['POINTERDOWN'] = 'pointerdown';
EventType['POINTERMOVE'] = 'pointermove';
EventType['POINTERUP'] = 'pointerup';
EventType['POINTERCANCEL'] = 'pointercancel';
// Touch
EventType['TOUCHSTART'] = 'touchstart';
EventType['TOUCHMOVE'] = 'touchmove';
EventType['TOUCHEND'] = 'touchend';
EventType['TOUCHCANCEL'] = 'touchcancel';
})(EventType || (EventType = {}));



/***/ }),

/***/ "./_glue/lib/events/key.js":
/*!*********************************!*\
  !*** ./_glue/lib/events/key.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Key: () => (/* binding */ Key),
/* harmony export */   KeyCode: () => (/* binding */ KeyCode)
/* harmony export */ });
/**
 * @fileoverview Constants used when working with key events.
 */
var Key;
(function(Key) {
Key['ENTER'] = 'Enter';
Key['SPACE'] = ' ';
Key['TAB'] = 'Tab';
Key['ESC'] = 'Escape';
// These only trigger with `keydown` not `keypress` on Chrome.
Key['LEFT'] = 'ArrowLeft';
Key['UP'] = 'ArrowUp';
Key['RIGHT'] = 'ArrowRight';
Key['DOWN'] = 'ArrowDown';
Key['HOME'] = 'Home';
Key['END'] = 'End';
Key['PAGEUP'] = 'PageUp';
Key['PAGEDOWN'] = 'PageDown';
})(Key || (Key = {}));
var KeyCode;
(function(KeyCode) {
KeyCode[KeyCode['ENTER'] = 13] = 'ENTER';
KeyCode[KeyCode['SPACE'] = 32] = 'SPACE';
KeyCode[KeyCode['TAB'] = 9] = 'TAB';
KeyCode[KeyCode['ESC'] = 27] = 'ESC';
KeyCode[KeyCode['LEFT'] = 37] = 'LEFT';
KeyCode[KeyCode['UP'] = 38] = 'UP';
KeyCode[KeyCode['RIGHT'] = 39] = 'RIGHT';
KeyCode[KeyCode['DOWN'] = 40] = 'DOWN';
KeyCode[KeyCode['HOME'] = 36] = 'HOME';
KeyCode[KeyCode['END'] = 35] = 'END';
KeyCode[KeyCode['PAGEUP'] = 33] = 'PAGEUP';
KeyCode[KeyCode['PAGEDOWN'] = 34] = 'PAGEDOWN';
})(KeyCode || (KeyCode = {}));



/***/ }),

/***/ "./_glue/lib/expansionpanels/constants.js":
/*!************************************************!*\
  !*** ./_glue/lib/expansionpanels/constants.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CssClasses: () => (/* binding */ CssClasses),
/* harmony export */   DataAttr: () => (/* binding */ DataAttr),
/* harmony export */   ErrorMessages: () => (/* binding */ ErrorMessages),
/* harmony export */   EventNames: () => (/* binding */ EventNames),
/* harmony export */   Strings: () => (/* binding */ Strings)
/* harmony export */ });
/**
 * @fileoverview Constants used in expansion panels components.
 */
var CssClasses;
(function(CssClasses) {
CssClasses['GROUP'] = 'glue-expansion-panels';
CssClasses['PANEL'] = 'glue-expansion-panel';
CssClasses['CONTENT'] = 'glue-expansion-panel__content';
CssClasses['TOGGLE'] = 'glue-expansion-panel__toggle';
CssClasses['BUTTON'] = 'glue-expansion-panel__button';
CssClasses['HEADER'] = 'glue-expansion-panels__header';
CssClasses['HEADER_TEXT'] = 'glue-expansion-panel__header-text';
CssClasses['TOGGLE_ALL'] = 'glue-expansion-panels__toggle-all';
CssClasses['TOGGLE_ALL_TEXT'] = 'glue-expansion-panels__toggle-text';
CssClasses['ARROW'] = 'glue-expansion-panel__header-arrow';
CssClasses['IS_EXPANDED'] = 'glue-is-expanded';
CssClasses['IS_COLLAPSED'] = 'glue-is-collapsed';
CssClasses['IS_MIXED'] = 'glue-is-mixed';
})(CssClasses || (CssClasses = {}));
var DataAttr;
(function(DataAttr) {
DataAttr['KEY'] = 'glueExpansionPanelsKey';
DataAttr['SMOOTHANIMTIMING'] = 'glueExpansionPanelsSmoothAnimTiming';
DataAttr['TOGGLEFOR'] = 'glueExpansionPanelToggleFor';
DataAttr['INITIAL'] = 'glueExpansionPanelInitial';
DataAttr['EXPAND_TOOLTIP'] = 'glueExpansionPanelExpandTooltip';
DataAttr['COLLAPSE_TOOLTIP'] = 'glueExpansionPanelCollapseTooltip';
})(DataAttr || (DataAttr = {}));
var Strings;
(function(Strings) {
Strings['DEFAULT_INSTANCE_ID'] = 'expansion_panels';
Strings['EXPANDED'] = 'expanded';
Strings['COLLAPSED'] = 'collapsed';
Strings['MIXED'] = 'mixed';
Strings['TOOLTIP_EXPAND'] = 'Press to expand';
Strings['TOOLTIP_COLLAPSE'] = 'Press to collapse';
})(Strings || (Strings = {}));
var EventNames;
(function(EventNames) {
// dispatched by model whenever there is a change in the group status
EventNames['PANELGROUP_STATUS_CHANGED'] = 'glueExpansionPanelsStatusChanged';
// dispatched by toggle to trigger content component to expand or collapse
EventNames['TOGGLE_CONTENT'] = 'glueExpansionPanelsToggleContent';
// dispatched to trigger all content components to expand
EventNames['EXPAND_ALL_CONTENT'] = 'glueExpansionPanelsExpandAllContent';
// dispatched to trigger all content components to collapse
EventNames['COLLAPSE_ALL_CONTENT'] = 'glueExpansionPanelsCollapseAllContent';
})(EventNames || (EventNames = {}));
var ErrorMessages;
(function(ErrorMessages) {
ErrorMessages['TOGGLE_MISSING_CONTENT_ID'] =
    '[Glue Expansion Panels Toggle] - Toggle is not linked to a content element.';
ErrorMessages['TOGGLE_MISSING_CONTENT_ELEMENT'] =
    '[Glue Expansion Panels Toggle] - Cannot find content element to link toggle to.';
ErrorMessages['MISSING_CONTENT_ID'] =
    '[Glue Expansion Panels Content] - An ID must be set on the content element.';
})(ErrorMessages || (ErrorMessages = {}));



/***/ }),

/***/ "./_glue/lib/expansionpanels/content/index.js":
/*!****************************************************!*\
  !*** ./_glue/lib/expansionpanels/content/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExpansionPanelsContent: () => (/* binding */ ExpansionPanelsContent)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _focus___WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../focus/ */ "./_glue/lib/focus/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants */ "./_glue/lib/expansionpanels/constants.js");
/* harmony import */ var _model_modelfactory__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../model/modelfactory */ "./_glue/lib/expansionpanels/model/modelfactory.js");






/**
 * Class for creating expansion panels content.
 */
class ExpansionPanelsContent extends _base__WEBPACK_IMPORTED_MODULE_0__.Component {
  /**
   * @param root The HTML element containing the individual panel's content.
   */
  constructor(root) {
    var _a, _b, _c;
    super(root);
    /**
     * An array to hold the tabindex value of focusable child elements of panel
     * content, so it can be adjusted when the panel content is expanded or
     * collapsed.
     */
    this.tabIndexArr = [];
    this.isCollapsed = true;
    /**
     * Keeps track of the panel height (unitless, but ultimately in pixels).
     */
    this.panelHeight = 0;
    this.groupEl = this.root.closest(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.GROUP}`);
    this.panelEl = this.root.closest(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.PANEL}`);
    this.toggleButton =
        (_b = (_a = this.panelEl) === null || _a === void 0 ?
             void 0 :
             _a.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.BUTTON}`)) !== null &&
            _b !== void 0 ?
        _b :
        null;
    this.toggleContentHandler = (target) => {
      this.toggleContent(target);
    };
    this.expandHandler = () => {
      this.expand();
    };
    this.collapseHandler = () => {
      this.collapse();
    };
    this.transitionendHandler = () => {
      this.unsetPanelHeight();
    };
    const modelKey =
        (_c = this.root.closest(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.GROUP}`)) === null ||
            _c === void 0 ?
        void 0 :
        _c.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.DataAttr.KEY];
    this.model = _model_modelfactory__WEBPACK_IMPORTED_MODULE_5__.ModelFactory.get(modelKey);
    if (!this.root.id) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_4__.ErrorMessages.MISSING_CONTENT_ID);
    }
    this.init();
  }
  init() {
    // Store initial tabIndex value for all focusable elements in panel content.
    this.tabIndexArr = this.getTabIndexArray();
    // Toggle the panel's initial state
    if (this.root.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.DataAttr.INITIAL] === 'expanded') {
      this.isCollapsed = false;
      this.updateHtmlAttributes(false);
      this.setPanelHeight('');
      this.updateStatus(false);
    } else {
      this.isCollapsed = true;
      this.updateHtmlAttributes(true);
      this.setPanelHeight('0px');
    }
    // start listening for events
    this.model.listen(_constants__WEBPACK_IMPORTED_MODULE_4__.EventNames.TOGGLE_CONTENT, this.toggleContentHandler);
    this.model.listen(_constants__WEBPACK_IMPORTED_MODULE_4__.EventNames.EXPAND_ALL_CONTENT, this.expandHandler);
    this.model.listen(_constants__WEBPACK_IMPORTED_MODULE_4__.EventNames.COLLAPSE_ALL_CONTENT, this.collapseHandler);
    if (this.model.isAnimated === true) {
      this.root.addEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TRANSITIONEND, this.transitionendHandler);
    }
    // set aria properties
    this.addA11yFeatures();
  }
  destroy() {
    var _a;
    // remove styles and attributes
    (_a = this.panelEl) === null || _a === void 0 ?
        void 0 :
        _a.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.IS_COLLAPSED, _constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.IS_EXPANDED);
    this.setPanelHeight('');
    // reset accessibility properties from expanded/collapsed state
    this.removeAriaAttributes();
    this.setFocusableElements(false, this.tabIndexArr);
    // clear tabindex values
    this.tabIndexArr = [];
    // stop listening for events
    this.model.unlisten(_constants__WEBPACK_IMPORTED_MODULE_4__.EventNames.TOGGLE_CONTENT, this.toggleContentHandler);
    this.model.unlisten(_constants__WEBPACK_IMPORTED_MODULE_4__.EventNames.EXPAND_ALL_CONTENT, this.expandHandler);
    this.model.unlisten(_constants__WEBPACK_IMPORTED_MODULE_4__.EventNames.COLLAPSE_ALL_CONTENT, this.collapseHandler);
    if (this.model.isAnimated === true) {
      this.root.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TRANSITIONEND, this.transitionendHandler);
    }
    // reset aria properties
    this.removeA11yFeatures();
  }
  /**
   * Expands (shows) the content, both visually and to screen readers
   */
  expand() {
    if (this.isCollapsed === false) {
      return;
    }
    this.updateHtmlAttributes(false);
    this.updateHeight(false);
    this.updateStatus(false);
  }
  /**
   * Collapses (hides) the content, both visually and to screen readers
   */
  collapse() {
    if (this.isCollapsed === true) {
      return;
    }
    this.updateHtmlAttributes(true);
    this.updateHeight(true);
    this.updateStatus(true);
  }
  /**
   * When toggle event is fired, expands or collapses the content element.
   * @param target The ID of the panel that should be toggled.
   */
  toggleContent(target) {
    if (target === this.root.id) {
      this.isCollapsed ? this.expand() : this.collapse();
    }
  }
  /**
   * Updates content element's ARIA attributes and adds/removes classes based
   * on context (Expanded / Collapsed).
   * @param flag The flag to check if the state is
   * expanded or collapsed.
   */
  updateHtmlAttributes(flag) {
    var _a, _b;
    this.setAriaAttributes(flag);
    this.setFocusableElements(flag, this.tabIndexArr);
    const addClass = flag ? _constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.IS_COLLAPSED : _constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.IS_EXPANDED;
    const removeClass = flag ? _constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.IS_EXPANDED : _constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.IS_COLLAPSED;
    (_a = this.panelEl) === null || _a === void 0 ? void 0 :
                                                    _a.classList.add(addClass);
    (_b = this.panelEl) === null || _b === void 0 ?
        void 0 :
        _b.classList.remove(removeClass);
  }
  /**
   * Updates height of content element based on context (Expanded / Collapsed).
   * @param flag The flag to check if the state is
   * expanded or collapsed.
   */
  updateHeight(flag) {
    this.panelHeight = this.root.scrollHeight;
    if (this.model.isAnimated === true) {
      this.setPanelHeight(`${this.panelHeight}px`);
      // Applicable when the panels are to be collapsed.
      if (flag) {
        // Force a redraw of the layout by calling scrollHeight again,
        // then set the height to 0 after a brief delay (1ms)
        // This is so broswers will reliably transition the height change
        this.panelHeight = this.root.scrollHeight;
        window.setTimeout(this.setPanelHeight.bind(this), 1, '0px');
      }
    } else {
      // If no animation is set, immediately set the height to
      // 0 or unset depending on the context.
      this.setPanelHeight(flag ? '0px' : '');
    }
  }
  /**
   * Updates status of content element based on context (Expanded / Collapsed).
   * @param flag The flag to check if the state is
   * expanded or collapsed.
   */
  updateStatus(flag) {
    flag ? this.model.panelsCollapsed++ : this.model.panelsCollapsed--;
    this.model.updatePanelsStatus();
    this.isCollapsed = flag;
  }
  /**
   * Get tabindex array.
   */
  getTabIndexArray() {
    const focusableEls = _focus___WEBPACK_IMPORTED_MODULE_3__.getFocusableElements(this.root);
    const tabIndexArray = focusableEls.map((el) => el.tabIndex);
    return tabIndexArray;
  }
  /**
   * Set content height.
   */
  setPanelHeight(height) {
    this.root.style.height = height;
  }
  /**
   * Unset content height.
   */
  unsetPanelHeight() {
    if (this.root.style.height !== '0px') {
      this.root.style.height = '';
    }
  }
  /**
   * Get localised tooltip text from the template file
   * @param isPanelExpanded The flag to check if the panel is expanded or not
   */
  getTooltipText(isPanelExpanded = false) {
    var _a, _b, _c, _d;
    const tooltipText = isPanelExpanded ?
        (_b = (_a = this.groupEl) === null || _a === void 0 ?
             void 0 :
             _a.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.DataAttr.EXPAND_TOOLTIP]) !== null &&
                _b !== void 0 ?
        _b :
        _constants__WEBPACK_IMPORTED_MODULE_4__.Strings.TOOLTIP_EXPAND :
        (_d = (_c = this.groupEl) === null || _c === void 0 ?
             void 0 :
             _c.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.DataAttr.COLLAPSE_TOOLTIP]) !== null &&
            _d !== void 0 ?
        _d :
        _constants__WEBPACK_IMPORTED_MODULE_4__.Strings.TOOLTIP_COLLAPSE;
    return tooltipText;
  }
  /**
   * Set aria attributes.
   */
  setAriaAttributes(isPanelCollapsed) {
    this.root.hidden = isPanelCollapsed;
    if (this.toggleButton) {
      this.toggleButton.title = this.getTooltipText(isPanelCollapsed);
      this.toggleButton.setAttribute(
          _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_EXPANDED, String(!isPanelCollapsed));
    }
    if (isPanelCollapsed) {
      this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HIDDEN, String(isPanelCollapsed));
    } else {
      this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HIDDEN);
    }
  }
  /**
   * Remove aria attributes.
   */
  removeAriaAttributes() {
    var _a, _b;
    (_a = this.toggleButton) === null || _a === void 0 ?
        void 0 :
        _a.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_EXPANDED);
    (_b = this.toggleButton) === null || _b === void 0 ?
        void 0 :
        _b.removeAttribute('title');
    this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HIDDEN);
    this.root.hidden = false;
  }
  /**
   * Set focusable elements.
   */
  setFocusableElements(isPanelCollapsed, tabIndexArr) {
    const focusableEls = _focus___WEBPACK_IMPORTED_MODULE_3__.getFocusableElements(this.root);
    if (isPanelCollapsed) {
      for (const el of focusableEls) {
        el.tabIndex = _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.NOT_TABBABLE;
      }
    } else {
      for (let i = 0; i < focusableEls.length; i++) {
        const el = focusableEls[i];
        el.tabIndex = tabIndexArr[i];
      }
    }
  }
  /**
   * Add a11y features.
   */
  addA11yFeatures() {
    var _a, _b;
    this.root.setAttribute(
        _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_LABELLEDBY,
        (_b = (_a = this.toggleButton) === null || _a === void 0 ?
             void 0 :
             _a.id) !== null &&
                _b !== void 0 ?
            _b :
            '');
    this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.REGION);
  }
  /**
   * Remove a11y features.
   */
  removeA11yFeatures() {
    this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_LABELLEDBY);
    this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE);
  }
}



/***/ }),

/***/ "./_glue/lib/expansionpanels/index.js":
/*!********************************************!*\
  !*** ./_glue/lib/expansionpanels/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExpansionPanels: () => (/* binding */ ExpansionPanels)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ "./_glue/lib/expansionpanels/constants.js");
/* harmony import */ var _content__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./content */ "./_glue/lib/expansionpanels/content/index.js");
/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./model */ "./_glue/lib/expansionpanels/model/index.js");
/* harmony import */ var _model_modelfactory__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./model/modelfactory */ "./_glue/lib/expansionpanels/model/modelfactory.js");
/* harmony import */ var _toggle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./toggle */ "./_glue/lib/expansionpanels/toggle/index.js");
/* harmony import */ var _toggleall__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./toggleall */ "./_glue/lib/expansionpanels/toggleall/index.js");









/**
 * Class for creating expansion panels panel group.
 */
class ExpansionPanels extends _base__WEBPACK_IMPORTED_MODULE_0__.Component {
  /**
   * @param root The HTML element containing the panel group.
   * @param options Expansion Panels options object.
   */
  constructor(root, options) {
    super(root);
    this.toggleAllComponents = [];
    this.panelContentComponents = [];
    this.panelToggleComponents = [];
    this.options = Object.assign({}, _model__WEBPACK_IMPORTED_MODULE_3__.ExpansionPanelsModel.defaults, options);
    this.statusChangeHandler = () => {
      this.updateStatus();
    };
    this.modelKey =
        this.root.dataset[_constants__WEBPACK_IMPORTED_MODULE_1__.DataAttr.KEY] || _constants__WEBPACK_IMPORTED_MODULE_1__.Strings.DEFAULT_INSTANCE_ID;
    this.model = _model_modelfactory__WEBPACK_IMPORTED_MODULE_4__.ModelFactory.get(this.modelKey, this.options);
    this.init();
  }
  /**
   * Initialize the component.
   */
  init() {
    this.model.panelsCount =
        this.root.getElementsByClassName(_constants__WEBPACK_IMPORTED_MODULE_1__.CssClasses.PANEL).length;
    this.model.panelsCollapsed = this.model.panelsCount;
    // Initialize child components. Track them so component can be fully
    // destroyed
    for (const toggleAllEl of this.root.querySelectorAll(
             `.${_constants__WEBPACK_IMPORTED_MODULE_1__.CssClasses.TOGGLE_ALL}`)) {
      this.toggleAllComponents.push(new _toggleall__WEBPACK_IMPORTED_MODULE_6__.ExpansionPanelsToggleAll(toggleAllEl));
    }
    for (const panelContentEl of this.root.querySelectorAll(
             `.${_constants__WEBPACK_IMPORTED_MODULE_1__.CssClasses.CONTENT}`)) {
      this.panelContentComponents.push(
          new _content__WEBPACK_IMPORTED_MODULE_2__.ExpansionPanelsContent(panelContentEl));
    }
    for (const panelToggleEl of this.root.querySelectorAll(
             `.${_constants__WEBPACK_IMPORTED_MODULE_1__.CssClasses.BUTTON}`)) {
      this.panelToggleComponents.push(new _toggle__WEBPACK_IMPORTED_MODULE_5__.ExpansionPanelsToggle(panelToggleEl));
    }
    // listen for status change events
    this.model.listen(
        _constants__WEBPACK_IMPORTED_MODULE_1__.EventNames.PANELGROUP_STATUS_CHANGED, this.statusChangeHandler);
    // Set panel group's initial status
    this.model.updatePanelsStatus();
  }
  destroy() {
    // Destroy child components
    let subcomponent;
    while (this.toggleAllComponents.length > 0) {
      subcomponent = this.toggleAllComponents.pop();
      subcomponent.destroy();
    }
    while (this.panelContentComponents.length > 0) {
      subcomponent = this.panelContentComponents.pop();
      subcomponent.destroy();
    }
    while (this.panelToggleComponents.length > 0) {
      subcomponent = this.panelToggleComponents.pop();
      subcomponent.destroy();
    }
    // reset panel group class
    this.model.panelsCount = 0;
    this.model.updatePanelsStatus();
    // remove listener for update events
    this.model.unlisten(
        _constants__WEBPACK_IMPORTED_MODULE_1__.EventNames.PANELGROUP_STATUS_CHANGED, this.statusChangeHandler);
    // remove instance from models list
    _model_modelfactory__WEBPACK_IMPORTED_MODULE_4__.ModelFactory.clearSingle(this.modelKey);
  }
  /**
   * Update the class on panel group root indicating current status
   */
  updateStatus() {
    this.root.classList.remove(
        _constants__WEBPACK_IMPORTED_MODULE_1__.CssClasses.IS_COLLAPSED, _constants__WEBPACK_IMPORTED_MODULE_1__.CssClasses.IS_MIXED, _constants__WEBPACK_IMPORTED_MODULE_1__.CssClasses.IS_EXPANDED);
    if (this.model.panelsStatus) {
      this.root.classList.add(`glue-is-${this.model.panelsStatus}`);
    }
  }
}



/***/ }),

/***/ "./_glue/lib/expansionpanels/model/index.js":
/*!**************************************************!*\
  !*** ./_glue/lib/expansionpanels/model/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExpansionPanelsModel: () => (/* binding */ ExpansionPanelsModel)
/* harmony export */ });
/* harmony import */ var _events_eventtarget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../events/eventtarget */ "./_glue/lib/events/eventtarget.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./_glue/lib/expansionpanels/constants.js");


/**
 * The data model used for an Expansion Panel group (a collection of one or
 * more expansion panels).
 * @unrestricted
 */
class ExpansionPanelsModel {
  /**
   * @param options Expansion Panels options object.
   */
  constructor(options) {
    const mergedOptions =
        Object.assign({}, ExpansionPanelsModel.defaults, options);
    /**
     * Whether the panels are animated on activation or not.
     */
    this.isAnimated = mergedOptions.isAnimated;
    /**
     * Total number of panels in this group.
     */
    this.panelsCount = mergedOptions.panelsCount;
    /**
     * Number of panels currently collapsed in this group. Updated whenever a
     * panel is expanded or collapsed.
     * Initially same as total panel count (all panels collapsed).
     */
    this.panelsCollapsed = this.panelsCount;
    /**
     * Current status of the panels group: collapsed, expanded, or mixed.
     * Updated whenever a panel is expanded or collapsed.
     * Initially collapsed.
     */
    this.panelsStatus = _constants__WEBPACK_IMPORTED_MODULE_1__.Strings.COLLAPSED;
    /**
     * Use EventTarget module to delegate event handling between various
     * subcomponents.
     */
    this.eventTarget = new _events_eventtarget__WEBPACK_IMPORTED_MODULE_0__.EventTarget();
  }
  /**
   * Default model options.
   */
  static get defaults() {
    return {
      isAnimated: true,
      panelsCount: 1,
    };
  }
  /**
   * Updates the panel group's status based on collapsed/expanded panel count.
   */
  updatePanelsStatus() {
    if (this.panelsCount === 0) {
      this.panelsStatus = '';
    } else if (this.panelsCount === this.panelsCollapsed) {
      this.panelsStatus = _constants__WEBPACK_IMPORTED_MODULE_1__.Strings.COLLAPSED;
    } else if (this.panelsCollapsed === 0) {
      this.panelsStatus = _constants__WEBPACK_IMPORTED_MODULE_1__.Strings.EXPANDED;
    } else {
      this.panelsStatus = _constants__WEBPACK_IMPORTED_MODULE_1__.Strings.MIXED;
    }
    // Fire event so panel group knows to update its CSS class tracking status
    this.dispatchEvent(_constants__WEBPACK_IMPORTED_MODULE_1__.EventNames.PANELGROUP_STATUS_CHANGED);
  }
  /**
   * Sets up a listener on the model's eventTarget
   */
  listen(eventName, handler) {
    this.eventTarget.listen(eventName, handler);
  }
  /**
   * Removes a listener from the model's eventTarget
   */
  unlisten(eventName, handler) {
    this.eventTarget.unlisten(eventName, handler);
  }
  /**
   * Fires an event on the model's eventTarget. Can include additional data so
   * only specific components will respond to the event.
   * @param eventData Optional additional event data.
   */
  dispatchEvent(eventName, eventData) {
    this.eventTarget.dispatchEvent(eventName, eventData);
  }
}



/***/ }),

/***/ "./_glue/lib/expansionpanels/model/modelfactory.js":
/*!*********************************************************!*\
  !*** ./_glue/lib/expansionpanels/model/modelfactory.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ModelFactory: () => (/* binding */ ModelFactory)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./_glue/lib/expansionpanels/constants.js");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index */ "./_glue/lib/expansionpanels/model/index.js");
/**
 * tslint:disable class-as-namespace
 */




/**
 * Expansion Panels model factory.
 */
class ModelFactory {
  /**
   * Returns a new or existing expansion panels model instance based on an
   * identifier.
   * Falls back on a default instance if no id is provided.
   */
  static get(
      id = _constants__WEBPACK_IMPORTED_MODULE_0__.Strings.DEFAULT_INSTANCE_ID,
      options = _index__WEBPACK_IMPORTED_MODULE_1__.ExpansionPanelsModel.defaults) {
    let instance = ModelFactory.instances[id];
    if (!instance) {
      instance = new _index__WEBPACK_IMPORTED_MODULE_1__.ExpansionPanelsModel(options);
      ModelFactory.instances[id] = instance;
    }
    return instance;
  }
  /**
   * Clears a single expansion panels model instance.
   */
  static clearSingle(id) {
    delete ModelFactory.instances[id];
  }
  /**
   * Clears all existing expansion panels model instances.
   */
  static clearAll() {
    ModelFactory.instances = {};
  }
}
/**
 * Internal list of all registered expansion panels model instances.
 */
ModelFactory.instances = {};



/***/ }),

/***/ "./_glue/lib/expansionpanels/toggle/index.js":
/*!***************************************************!*\
  !*** ./_glue/lib/expansionpanels/toggle/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExpansionPanelsToggle: () => (/* binding */ ExpansionPanelsToggle)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _events_key__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../events/key */ "./_glue/lib/events/key.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants */ "./_glue/lib/expansionpanels/constants.js");
/* harmony import */ var _model_modelfactory__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../model/modelfactory */ "./_glue/lib/expansionpanels/model/modelfactory.js");






/**
 * Class for creating expansion panels toggle.
 */
class ExpansionPanelsToggle extends _base__WEBPACK_IMPORTED_MODULE_0__.Component {
  /**
   * @param root The HTML element containing the individual panel's toggle.
   */
  constructor(root) {
    var _a;
    super(root);
    this.clickHandler = (e) => {
      e.preventDefault();
      this.toggle();
    };
    this.keydownHandler = (e) => {
      this.handleKeydown(e);
    };
    const modelKey =
        (_a = this.root.closest(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.GROUP}`)) === null ||
            _a === void 0 ?
        void 0 :
        _a.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.DataAttr.KEY];
    this.model = _model_modelfactory__WEBPACK_IMPORTED_MODULE_5__.ModelFactory.get(modelKey);
    const contentId = this.root.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.DataAttr.TOGGLEFOR];
    // stop setup if toggle cannot be linked to content
    if (!contentId) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_4__.ErrorMessages.TOGGLE_MISSING_CONTENT_ID);
    } else {
      this.contentId = contentId;
    }
    this.init();
  }
  /**
   * Initialize the component.
   */
  init() {
    // stop initialization if content element is not found
    const panelEl = this.root.closest(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.PANEL}`);
    const contentEl = panelEl === null || panelEl === void 0 ?
        void 0 :
        panelEl.querySelector('#' + this.contentId);
    if (!contentEl) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_4__.ErrorMessages.TOGGLE_MISSING_CONTENT_ELEMENT);
    }
    // set up accessibility features
    this.addA11yFeatures();
    // set up handlers
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.clickHandler);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.keydownHandler);
  }
  destroy() {
    // remove accessibility features
    this.removeA11yFeatures();
    // remove handlers
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.clickHandler);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.keydownHandler);
  }
  /**
   * Toggles a panel open or closed depending on its current state.
   * Dispatches an event so the panel content targeted will expand/collapse.
   */
  toggle() {
    this.model.dispatchEvent(_constants__WEBPACK_IMPORTED_MODULE_4__.EventNames.TOGGLE_CONTENT, this.contentId);
  }
  /**
   * Triggers a toggle on the ENTER or SPACE keyboard event.
   */
  handleKeydown(event) {
    if (event.key === _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.ENTER || event.key === _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.SPACE) {
      event.preventDefault();
      this.toggle();
    }
  }
  /**
   * Add a11y features.
   */
  addA11yFeatures() {
    this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_CONTROLS, this.contentId);
    this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.BUTTON);
    this.root.tabIndex = _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.TABBABLE;
  }
  /**
   * Remove a11y features.
   */
  removeA11yFeatures() {
    this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_CONTROLS);
    this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE);
    this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.TAB_INDEX);
  }
}



/***/ }),

/***/ "./_glue/lib/expansionpanels/toggleall/index.js":
/*!******************************************************!*\
  !*** ./_glue/lib/expansionpanels/toggleall/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExpansionPanelsToggleAll: () => (/* binding */ ExpansionPanelsToggleAll)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _events_key__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../events/key */ "./_glue/lib/events/key.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants */ "./_glue/lib/expansionpanels/constants.js");
/* harmony import */ var _model_modelfactory__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../model/modelfactory */ "./_glue/lib/expansionpanels/model/modelfactory.js");






/**
 * Class for creating expansion panel toggle all.
 */
class ExpansionPanelsToggleAll extends _base__WEBPACK_IMPORTED_MODULE_0__.Component {
  /**
   * @param root The HTML element containing the panel group's toggle all.
   */
  constructor(root) {
    var _a;
    super(root);
    this.statusChangeHandler = () => {
      this.updateToggleAllStatus();
    };
    this.clickHandler = (e) => {
      e.preventDefault();
      this.toggleAll();
    };
    this.keydownHandler = (e) => {
      this.handleKeydown(e);
    };
    this.keyupHandler = (e) => {
      this.handleKeyup(e);
    };
    this.model = _model_modelfactory__WEBPACK_IMPORTED_MODULE_5__.ModelFactory.get(
        (_a = this.root.closest(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.GROUP}`)) === null ||
                _a === void 0 ?
            void 0 :
            _a.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.DataAttr.KEY]);
    this.init();
  }
  /**
   * Initialize component.
   */
  init() {
    // set up accessibility features
    this.addA11yFeatures();
    // set up handlers
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.clickHandler);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.keydownHandler);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYUP, this.keyupHandler);
    // listen for status change events
    this.model.listen(
        _constants__WEBPACK_IMPORTED_MODULE_4__.EventNames.PANELGROUP_STATUS_CHANGED, this.statusChangeHandler);
  }
  destroy() {
    // remove accessibility features
    this.removeA11yFeatures();
    // remove handlers
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.clickHandler);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.keydownHandler);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYUP, this.keyupHandler);
    // remove listener for update events
    this.model.unlisten(
        _constants__WEBPACK_IMPORTED_MODULE_4__.EventNames.PANELGROUP_STATUS_CHANGED, this.statusChangeHandler);
  }
  /**
   * Toggles all the panels in the group to either expand or collapsed based
   * on the panel group's status
   */
  toggleAll() {
    if (this.model.panelsStatus === _constants__WEBPACK_IMPORTED_MODULE_4__.Strings.EXPANDED) {
      // if all panels are expanded, collapse all panels
      this.model.dispatchEvent(_constants__WEBPACK_IMPORTED_MODULE_4__.EventNames.COLLAPSE_ALL_CONTENT);
    } else {
      // if at least one panel is collapsed, expand all panels
      this.model.dispatchEvent(_constants__WEBPACK_IMPORTED_MODULE_4__.EventNames.EXPAND_ALL_CONTENT);
    }
    // Update group status
    this.model.updatePanelsStatus();
  }
  /**
   * Triggers a toggleAll on the ENTER or SPACE keyboard event.
   */
  handleKeydown(event) {
    if (event.key === _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.ENTER || event.key === _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.SPACE) {
      event.preventDefault();
      this.toggleAll();
    }
  }
  /**
   * Prevents Firefox from firing a click event on spacebar keyup event
   * Fixes http://b/194148554
   */
  handleKeyup(event) {
    if (event.key === _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.SPACE) {
      event.preventDefault();
    }
  }
  /**
   * Add a11y features.
   */
  addA11yFeatures() {
    this.root.setAttribute(
        _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_EXPANDED,
        this.model.panelsStatus === _constants__WEBPACK_IMPORTED_MODULE_4__.Strings.EXPANDED ? 'true' : 'false');
    const toggleText = Array.from(
        this.root.querySelectorAll(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.TOGGLE_ALL_TEXT}`));
    for (const text of toggleText) {
      text.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HIDDEN, 'true');
    }
  }
  /**
   * Remove a11y features.
   */
  removeA11yFeatures() {
    this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_EXPANDED);
    const toggleText = Array.from(
        this.root.querySelectorAll(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.TOGGLE_ALL_TEXT}`));
    for (const text of toggleText) {
      text.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HIDDEN);
    }
  }
  /**
   * Update the aria-expanded attribute on toggle button
   */
  updateToggleAllStatus() {
    if (this.model.panelsStatus === _constants__WEBPACK_IMPORTED_MODULE_4__.Strings.EXPANDED) {
      this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_EXPANDED, 'true');
    } else {
      this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_EXPANDED, 'false');
    }
  }
}



/***/ }),

/***/ "./_glue/lib/filter/category/index.js":
/*!********************************************!*\
  !*** ./_glue/lib/filter/category/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FilterCategory: () => (/* binding */ FilterCategory)
/* harmony export */ });
/* harmony import */ var _material_web_checkbox_checkbox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @material/web/checkbox/checkbox */ "./node_modules/@material/web/checkbox/checkbox.js");
/* harmony import */ var _material_web_radio_radio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @material/web/radio/radio */ "./node_modules/@material/web/radio/radio.js");
/* harmony import */ var _material_web_select_filled_select__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @material/web/select/filled-select */ "./node_modules/@material/web/select/filled-select.js");
/* harmony import */ var _material_web_select_outlined_select__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @material/web/select/outlined-select */ "./node_modules/@material/web/select/outlined-select.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../base */ "./_glue/lib/base/index.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _observer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../observer */ "./_glue/lib/observer/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../constants */ "./_glue/lib/filter/constants.js");
/* harmony import */ var _state_manager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../state_manager */ "./_glue/lib/filter/state_manager/index.js");
// taze: material_dts from //marketing/glue/cdn:material_dts











/**
 * A filter category class to manage an individual Glue filter.
 */
class FilterCategory extends _base__WEBPACK_IMPORTED_MODULE_4__.Component {
  /**
   * Creates an instance of GlueFilterCategory.
   */
  constructor(root) {
    super(root);
    this.chips = {};
    this.stateManager = new _state_manager__WEBPACK_IMPORTED_MODULE_8__.FilterStateManager();
    this.handleSelectChangeFunc = (evt) => {
      this.handleSelectChange(evt);
    };
    this.handleMaterialSelectChangeFunc = (evt) => {
      this.handleMaterialSelectChange(evt);
    };
    this.handleMWC3SelectChangeFunc = (evt) => {
      this.handleMWC3SelectChange(evt);
    };
    this.handleInputChangeFunc = (evt) => {
      this.handleInputChange(evt);
    };
    this.selectEl = this.root.querySelector('select');
    this.nativeCategoryItems = [
      ...this.root.querySelectorAll(`input.${_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.CATEGORY_ITEM}`),
    ];
    this.materialCategoryItems = [
      ...this.root.querySelectorAll(
          `li.${_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.CATEGORY_ITEM}:not(.${_constants__WEBPACK_IMPORTED_MODULE_7__.MaterialClasses.LIST_ITEM})`),
    ];
    this.materialSelectEl =
        this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_7__.MaterialClasses.SELECT}`);
    this.mwc3SelectEl =
        this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_7__.MaterialClasses.MWC3_SELECT} :first-child`);
    this.category = this.root.dataset[_constants__WEBPACK_IMPORTED_MODULE_7__.Strings.CATEGORY];
    // Grab the category counter, if provided
    this.categoryCountEl = document.querySelector(
        `#${_constants__WEBPACK_IMPORTED_MODULE_7__.Strings.CATEGORY_COUNT_ID}-${this.category}`);
    this.init();
  }
  init() {
    var _a;
    // Throws an error if filter category is not set.
    if (!this.category) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_7__.Strings.ERROR_MISSING_CATEGORY);
    }
    this.model = (_a = this.stateManager.getModel(this.category)) !== null &&
            _a !== void 0 ?
        _a :
        new _observer__WEBPACK_IMPORTED_MODULE_6__.Observer({});
    // Initializes select element.
    if (this.selectEl) {
      this.initSelect(this.selectEl);
    }
    // Initializes native HTML input checkbox or radio elements.
    if (this.nativeCategoryItems.length !== 0) {
      this.initNativeInputs(this.nativeCategoryItems);
    }
    // Initializes Material 2 or 3 input checkbox or radio elements.
    if (this.materialCategoryItems.length !== 0) {
      this.initMaterialInputs(this.materialCategoryItems);
    }
    // Initializes Material 2 select element.
    if (this.materialSelectEl) {
      this.initMaterialSelect(this.materialSelectEl);
    }
    // Initializes Material 3 select element.
    if (this.mwc3SelectEl) {
      this.initMWC3Select(this.mwc3SelectEl);
    }
    // Add the data model to stateManager.
    this.stateManager.setModel(this.category, this.model);
    // Sets initial category count
    this.renderCategoryCounter();
  }
  /**
   * Removes event listeners on filter elementss.
   */
  destroy() {
    this.selectEl &&
        this.root.removeEventListener(
            _events_eventtype__WEBPACK_IMPORTED_MODULE_5__.EventType.CHANGE, this.handleSelectChangeFunc);
    this.materialSelectEl &&
        this.root.removeEventListener(
            _constants__WEBPACK_IMPORTED_MODULE_7__.Strings.MATERIALSELECT_CHANGE, this.handleMaterialSelectChangeFunc);
    this.mwc3SelectEl &&
        this.root.removeEventListener(
            _events_eventtype__WEBPACK_IMPORTED_MODULE_5__.EventType.CHANGE, this.handleMWC3SelectChangeFunc);
    this.nativeCategoryItems &&
        this.root.removeEventListener(
            _events_eventtype__WEBPACK_IMPORTED_MODULE_5__.EventType.CHANGE, this.handleInputChangeFunc);
    this.materialCategoryItems &&
        this.root.removeEventListener(
            _events_eventtype__WEBPACK_IMPORTED_MODULE_5__.EventType.CHANGE, this.handleInputChangeFunc);
  }
  /**
   * Resets the data model.
   */
  reset() {
    for (const key of Object.keys(this.model.data)) {
      this.model.data[key] = false;
    }
    // Updates Material 2 Select rendering manually
    if (this.materialSelect) {
      this.materialSelect.selectedIndex = 0;
    }
    // Reset Material 3 Select rendering manually
    if (this.mwc3SelectEl) {
      this.mwc3SelectEl.value = '';
    }
    // Reset category counter rendering
    this.renderCategoryCounter();
  }
  /** Initializes the select element. */
  initSelect(selectEl) {
    // Iterates all select options except the first default option.
    const filterItems = [
      ...selectEl.querySelectorAll(`option.${_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.CATEGORY_ITEM}`),
    ];
    const filterElements = filterItems.slice(1);
    for (const el of filterElements) {
      if (el.value) {
        const filterOption = el.value;
        const isSelected = selectEl.value === filterOption;
        // Updates data model and subscribes to the data change.
        this.setModelProperty(filterOption, isSelected);
        this.model.listen(filterOption, () => {
          el.selected = this.model.data[filterOption];
        });
        // Updates chip data.
        this.chips[filterOption] = el.innerText;
      } else {
        throw new Error(_constants__WEBPACK_IMPORTED_MODULE_7__.Strings.ERROR_MISSING_VALUE);
      }
    }
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_5__.EventType.CHANGE, this.handleSelectChangeFunc);
  }
  /**
   * Initializes the Material Select element.
   */
  initMaterialSelect(materialSelectEl) {
    var _a;
    this.materialSelect = new mdc.select.MDCSelect(materialSelectEl);
    const initialValue =
        ((_a = this.materialSelect) === null || _a === void 0 ? void 0 :
                                                                _a.value) ||
        '';
    // Iterates all select options except the first default option.
    const filterItems = [
      ...materialSelectEl.querySelectorAll(`li.${_constants__WEBPACK_IMPORTED_MODULE_7__.MaterialClasses.LIST_ITEM}`),
    ];
    const filterElements = filterItems.slice(1);
    for (const el of filterElements) {
      const filterOption = el.dataset[_constants__WEBPACK_IMPORTED_MODULE_7__.Strings.DATA_VALUE];
      const filterLabelEl =
          el.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_7__.MaterialClasses.SELECT_LABEL}`);
      if (filterOption && filterLabelEl) {
        const isSelected = initialValue === filterOption;
        // Updates data model.
        this.setModelProperty(filterOption, isSelected);
        // Updates chips data.
        this.chips[filterOption] = filterLabelEl.innerText;
      }
    }
    this.root.addEventListener(
        _constants__WEBPACK_IMPORTED_MODULE_7__.Strings.MATERIALSELECT_CHANGE, this.handleMaterialSelectChangeFunc);
  }
  /**
   * Initializes the MWC3 Select element.
   */
  initMWC3Select(mwc3SelectEl) {
    // Iterates all select options
    const filterElements = [
      ...mwc3SelectEl.querySelectorAll(`md-select-option`),
    ];
    for (const el of filterElements) {
      if (el.value) {
        // Updates data model.
        this.setModelProperty(el.value, el.selected);
        // Updates chips data. Use display text if provided or text content
        this.chips[el.value] =
            el.displayText ? el.displayText : el.innerText.trim();
      }
    }
    this.root.addEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_5__.EventType.CHANGE, this.handleMWC3SelectChangeFunc);
  }
  /**
   * Initializes native HTML input checkbox or radio elements.
   */
  initNativeInputs(nativeCategoryItems) {
    var _a, _b;
    // Iterates all checkbox or radio elements to update data object, and
    // throws an error if attribute 'value' is not set on the element.
    for (const el of nativeCategoryItems) {
      const filterOption = el.value;
      if (filterOption) {
        const isSelected = el.checked;
        // Updates data model and subscribes to the data change.
        this.setModelProperty(filterOption, isSelected);
        this.model.listen(filterOption, () => {
          el.checked = this.model.data[filterOption];
        });
        // Updates chip data.
        this.chips[filterOption] =
            ((_b = (_a = el.parentNode) === null || _a === void 0 ?
                  void 0 :
                  _a.querySelector('label')) === null ||
                     _b === void 0 ?
                 void 0 :
                 _b.innerText) ||
            '';
      } else {
        throw new Error(_constants__WEBPACK_IMPORTED_MODULE_7__.Strings.ERROR_MISSING_VALUE);
      }
    }
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_5__.EventType.CHANGE, this.handleInputChangeFunc);
  }
  /**
   * Initializes Material input checkbox or radio elements.
   */
  initMaterialInputs(materialCategoryItems) {
    // Iterates all checkbox or radio elements to update data object, and
    // throws an error if attribute 'value' is not set on the element.
    for (const el of materialCategoryItems) {
      // Initialize Material elements
      const materialFormFieldEl =
          el.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_7__.MaterialClasses.FORM_FIELD}`);
      if (materialFormFieldEl) {
        // Initialize Material 2 components
        // TODO: b/323929145 - Remove this as part of Material 2 removal.
        const materialFormField =
            new mdc.formField.MDCFormField(materialFormFieldEl);
        const materialInput = materialFormFieldEl.children[0];
        if (materialInput.classList.contains('mdc-checkbox')) {
          const materialCheckbox = new mdc.checkbox.MDCCheckbox(materialInput);
          materialFormField.input = materialCheckbox;
        } else if (materialInput.classList.contains('mdc-radio')) {
          const materialRadio = new mdc.radio.MDCRadio(materialInput);
          materialFormField.input = materialRadio;
        } else {
          throw new Error(_constants__WEBPACK_IMPORTED_MODULE_7__.Strings.ERROR_MISSING_MATERIAL);
        }
        // Set up filter
        const inputEl = el.querySelector('input');
        const labelEl = el.querySelector('label');
        if (inputEl) {
          const filterOption = inputEl.value;
          const isSelected = inputEl.checked;
          if (filterOption) {
            // Updates data model and subscribes to the data change.
            this.setModelProperty(filterOption, isSelected);
            this.model.listen(filterOption, () => {
              inputEl.checked = this.model.data[filterOption];
            });
            // Updates chip data.
            this.chips[filterOption] =
                (labelEl === null || labelEl === void 0 ? void 0 :
                                                          labelEl.innerText) ||
                '';
          } else {
            throw new Error(_constants__WEBPACK_IMPORTED_MODULE_7__.Strings.ERROR_MISSING_VALUE);
          }
        }
      } else {
        // Set up Material 3 inputs
        const labelEl = el.querySelector('label');
        const checkboxEl = el.querySelector('md-checkbox');
        const radioEl = el.querySelector('md-radio');
        let chipText = '';
        if (labelEl && labelEl.textContent) {
          chipText = labelEl.textContent.trim();
        }
        if (checkboxEl) {
          const filterOption = checkboxEl.value;
          const isSelected = checkboxEl.checked;
          if (filterOption) {
            // Updates data model and subscribes to the data change.
            this.setModelProperty(filterOption, isSelected);
            this.model.listen(filterOption, () => {
              checkboxEl.checked = this.model.data[filterOption];
            });
            // Updates chip data.
            this.chips[filterOption] = chipText;
          } else {
            throw new Error(_constants__WEBPACK_IMPORTED_MODULE_7__.Strings.ERROR_MISSING_VALUE);
          }
        } else if (radioEl) {
          const filterOption = radioEl.value;
          const isSelected = radioEl.checked;
          if (filterOption) {
            // Updates data model and subscribes to the data change.
            this.setModelProperty(filterOption, isSelected);
            this.model.listen(filterOption, () => {
              radioEl.checked = this.model.data[filterOption];
            });
            // Updates chip data.
            this.chips[filterOption] = chipText;
          } else {
            throw new Error(_constants__WEBPACK_IMPORTED_MODULE_7__.Strings.ERROR_MISSING_VALUE);
          }
        } else {
          throw new Error(_constants__WEBPACK_IMPORTED_MODULE_7__.Strings.ERROR_MISSING_MATERIAL);
        }
      }
    }
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_5__.EventType.CHANGE, this.handleInputChangeFunc);
  }
  /**
   * Handles the select element when it changes using single-select parameters.
   * @param evt Change event.
   */
  handleSelectChange(evt) {
    for (const key of Object.keys(this.model.data)) {
      // reset all select options to false (single select)
      this.setModelProperty(key, false);
    }
    if (evt.target instanceof HTMLSelectElement && evt.target.value) {
      // set only the current option as true in the data model
      this.setModelProperty(evt.target.value, true);
    }
  }
  /**
   * Handles the Material Select element when it changes by updating the data
   * model and the Material Select element.
   * @param evt Change event from MDCSelect.
   */
  handleMaterialSelectChange(evt) {
    const el = evt.target;
    // As a custom event, includes information on the value being changed to
    const filterOption = evt.detail.value;
    if (this.materialSelect && el instanceof HTMLDivElement &&
        el.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_7__.MaterialClasses.SELECT)) {
      // reset all select options to false (single select)
      for (const key of Object.keys(this.model.data)) {
        this.setModelProperty(key, false);
      }
      // set only the current option as true in the data model
      if (filterOption) {
        this.setModelProperty(filterOption, true);
      }
    }
  }
  /**
   * Handles the MWC3 Select element when it changes by updating the data
   * model and the Material Select element.
   * @param evt Change event from md-select.
   */
  handleMWC3SelectChange(evt) {
    const el = evt.target;
    if (el instanceof _material_web_select_outlined_select__WEBPACK_IMPORTED_MODULE_3__.MdOutlinedSelect || el instanceof _material_web_select_filled_select__WEBPACK_IMPORTED_MODULE_2__.MdFilledSelect) {
      // reset all select options to false (single select)
      for (const key of Object.keys(this.model.data)) {
        this.setModelProperty(key, false);
      }
      // set currently selected value to true
      if (el.value) {
        this.setModelProperty(el.value, true);
      }
    }
  }
  /**
   * Handles native HTML or Material input checkbox or radio elements on change.
   * @param evt Change event.
   */
  handleInputChange(evt) {
    const el = evt.target;
    if (el instanceof HTMLInputElement || el instanceof _material_web_radio_radio__WEBPACK_IMPORTED_MODULE_1__.MdRadio ||
        el instanceof _material_web_checkbox_checkbox__WEBPACK_IMPORTED_MODULE_0__.MdCheckbox) {
      if ((el instanceof HTMLInputElement && el.type === 'radio') ||
          el instanceof _material_web_radio_radio__WEBPACK_IMPORTED_MODULE_1__.MdRadio) {
        if (el.checked) {
          // Reset all other radio options and then re-check the radio
          for (const key of Object.keys(this.model.data)) {
            this.setModelProperty(key, false);
          }
          el.checked = true;
        }
      }
      // Update the filter item's value in the model
      const filterOption = el.value;
      this.setModelProperty(filterOption, el.checked);
    }
    // Update the category counter
    this.renderCategoryCounter();
  }
  /**
   * Updates the filter item's value in the data model if it already exists, or
   * adds it to the model.
   * @param key The filter item's name
   * @param value Whether the filter item is active or inactive
   */
  setModelProperty(key, value) {
    this.model.data[key] !== undefined ?
        (this.model.data[key] = value) :
        this.model.defineReactive(this.model.data, key, value);
    this.emit(_constants__WEBPACK_IMPORTED_MODULE_7__.Strings.UPDATE_STATUS, {}, true);
  }
  /**
   * Renders the count of active filters into the counter element if it exists.
   * TODO(b/373719612): Optimize later by storing count in data model and
   * re-rendering whenever model is changed
   */
  renderCategoryCounter() {
    if (this.categoryCountEl) {
      let activeCategories = 0;
      // Count active categories
      for (const key of Object.keys(this.model.data)) {
        if (this.model.data[key] === true) {
          activeCategories++;
        }
      }
      // Removes all child nodes
      while (this.categoryCountEl.firstChild) {
        this.categoryCountEl.removeChild(this.categoryCountEl.firstChild);
      }
      // Sets the new count
      let numEl;
      if (activeCategories) {
        numEl = document.createTextNode(activeCategories.toString());
      } else {
        // if no categories are active, show total category count
        numEl = document.createTextNode(
            Object.keys(this.model.data).length.toString());
      }
      this.categoryCountEl.appendChild(numEl);
    }
  }
}



/***/ }),

/***/ "./_glue/lib/filter/chip/index.js":
/*!****************************************!*\
  !*** ./_glue/lib/filter/chip/index.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FilterChips: () => (/* binding */ FilterChips)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _events_key__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../events/key */ "./_glue/lib/events/key.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants */ "./_glue/lib/filter/constants.js");
/* harmony import */ var _state_manager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../state_manager */ "./_glue/lib/filter/state_manager/index.js");






/**
 * A class to manage Filter Chips subcomponent.
 */
class FilterChips extends _base__WEBPACK_IMPORTED_MODULE_0__.Component {
  constructor(root, data) {
    super(root);
    this.data = data;
    this.chipArr = [];
    this.stateManager = new _state_manager__WEBPACK_IMPORTED_MODULE_5__.FilterStateManager();
    this.isRtl = document.documentElement.dir === _constants__WEBPACK_IMPORTED_MODULE_4__.Strings.RTL;
    /**
     * Handles key press events on the root container to navigate between chips
     */
    this.handleRootKeydown = (evt) => {
      if (evt.code === _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.LEFT || evt.code === _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.RIGHT ||
          evt.code === _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.HOME || evt.code === _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.END) {
        const isLeft = evt.code === _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.LEFT;
        const isRight = evt.code === _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.RIGHT;
        if (isLeft || isRight) {
          // Move to previous or next chip based on language direction
          const isNext = this.isRtl ? isLeft : isRight;
          if (isNext) {
            this.focusedChip++;
          } else {
            this.focusedChip--;
          }
        } else if (evt.code === _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.HOME) {
          // Move to first chip
          this.focusedChip = 0;
        } else if (evt.code === _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.END) {
          // Move to last chip
          this.focusedChip = this.chipArr.length - 1;
        }
        // Keep chip position within bounds of chipArr
        if (this.focusedChip < 0) {
          this.focusedChip = 0;
        } else if (this.focusedChip >= this.chipArr.length) {
          this.focusedChip = this.chipArr.length - 1;
        }
        this.chipArr[this.focusedChip].focus();
        evt.stopPropagation();
        evt.preventDefault();
      }
    };
    /**
     * Handles clicks on filter chips.
     */
    this.handleChipClick = (evt) => {
      let chipEl;
      const element = evt.target;
      if (element instanceof HTMLElement) {
        // Find the chip element.
        element.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.CHIP) ?
            (chipEl = element) :
            (chipEl = element.closest(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.CHIP}`));
        if (chipEl) {
          this.updateChip(chipEl);
        }
      }
    };
    /**
     * Handles keyboard events on filter chips.
     */
    this.handleChipKeydown = (evt) => {
      let chipEl;
      const element = evt.target;
      if (element instanceof HTMLElement &&
          (evt.code === _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.ENTER || evt.code === _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.SPACE)) {
        // Find the chip element.
        element.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.CHIP) ?
            (chipEl = element) :
            (chipEl = element.closest(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.CHIP}`));
        if (chipEl) {
          this.updateChip(chipEl);
        }
        evt.stopPropagation();
        evt.preventDefault();
      }
    };
    this.isPrimary = root.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.CHIPS_PRIMARY);
    this.addFilterLabel = root.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.Strings.CHIPS_LABEL_ADD] ?
        root.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.Strings.CHIPS_LABEL_ADD] :
        _constants__WEBPACK_IMPORTED_MODULE_4__.Strings.ADD_FILTER;
    this.removeFilterLabel = root.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.Strings.CHIPS_LABEL_REMOVE] ?
        root.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.Strings.CHIPS_LABEL_REMOVE] :
        _constants__WEBPACK_IMPORTED_MODULE_4__.Strings.REMOVE_FILTER;
    // Set initial focused chip as out of bounds, so when you hit left or right
    // the first time you tab into the element, you focus on the first chip
    this.focusedChip = -1;
    this.init();
  }
  /**
   * Initializes the chips component.
   */
  init() {
    this.root.tabIndex =
        this.isPrimary ? _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.TABBABLE : _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.NOT_TABBABLE;
    const rowEl = document.createElement('div');
    rowEl.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.ROW);
    for (const filterCategory of Object.keys(this.data)) {
      const model = this.stateManager.getModel(filterCategory);
      for (const filterCategoryItem of Object.keys(this.data[filterCategory])) {
        if (this.isPrimary) {
          // Primary chips container should render and display all chips
          const chipEl = this.createChip(filterCategory, filterCategoryItem);
          rowEl.appendChild(chipEl);
          const chipButton = chipEl.firstElementChild;
          chipButton.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.handleChipClick);
          chipButton.addEventListener(
              _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleChipKeydown);
          this.chipArr.push(chipButton);
        }
        // Subscribes to the filter changes.
        model === null || model === void 0 ?
            void 0 :
            model.listen(filterCategoryItem, () => {
              this.render(
                  filterCategory, filterCategoryItem,
                  model.data[filterCategoryItem]);
            });
      }
    }
    if (this.isPrimary) {
      // Append the chips bar
      this.root.appendChild(rowEl);
    }
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleRootKeydown);
  }
  /**
   * Creates a chip element and returns it.
   */
  createChip(filterCategory, filterCategoryItem) {
    const chipContainerEl = document.createElement('span');
    chipContainerEl.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.GRIDCELL);
    const chipEl = document.createElement('button');
    chipEl.classList.add(_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.CHIP);
    chipEl.tabIndex = _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.NOT_TABBABLE;
    chipEl.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.TYPE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.BUTTON);
    chipEl.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.Strings.CATEGORY] = filterCategory;
    chipEl.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.Strings.CATEGORY_ITEM] = filterCategoryItem;
    const chipTextNode =
        document.createTextNode(this.data[filterCategory][filterCategoryItem]);
    chipEl.setAttribute(
        _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_LABEL,
        `${this.addFilterLabel} ${chipTextNode.textContent}`);
    chipEl.append(chipTextNode);
    if (this.isPrimary) {
      // Primary chips have a checkmark icon before the text content
      const checkmarkIcon = this.createCheckmarkIcon();
      chipEl.prepend(checkmarkIcon);
    } else {
      // Secondary chips have a close icon after the text content
      const closeButton = this.createCloseIconDiv();
      chipEl.append(closeButton);
    }
    chipContainerEl.appendChild(chipEl);
    return chipContainerEl;
  }
  /**
   * Changes the rendering of a specific chip and the container based on filter
   * status
   */
  render(category, categoryItem, isActive) {
    // Find the chip related to this filter, if it exists
    const chipEl = this.root.querySelector(`[data-glue-filter-category='${
        category}'][data-glue-filter-category-item='${categoryItem}']`);
    if (this.isPrimary) {
      // Primary chips are always visible; adjust their classes and labels
      if (chipEl) {
        chipEl.classList.toggle(_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.CHIP_ISACTIVE, isActive);
        const ariaLabel =
            isActive ? `${this.removeFilterLabel}` : `${this.addFilterLabel}`;
        chipEl.setAttribute(
            _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_LABEL, `${ariaLabel} ${chipEl.textContent}`);
      }
    } else {
      // If not primary chips, chip needs to be either added or removed to DOM
      // First find the row parent for chips bar, or create one if it doesn't
      // exists
      let rowEl = this.root.querySelector(`[role='${_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.ROW}']`);
      if (!rowEl) {
        rowEl = document.createElement('div');
        rowEl.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.ROW);
        this.root.appendChild(rowEl);
      }
      if (chipEl && !isActive) {
        // If chip is already in the DOM, and filter is inactive, remove it.
        // unassign handlers
        chipEl.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.handleChipClick);
        chipEl.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleChipKeydown);
        const cellEl = chipEl.parentElement;
        // remove element from the row
        rowEl.removeChild(cellEl);
        // remove it from chipArr
        const chipIndex = this.chipArr.indexOf(chipEl);
        this.chipArr.splice(chipIndex, 1);
        if (this.chipArr.length === 0) {
          // if row is now empty, remove it
          this.root.removeChild(rowEl);
        }
      } else if (isActive) {
        // If chip is not already in the DOM, and filter is active, add it.
        // Add DOM to the row parent
        const newChipEl = this.createChip(category, categoryItem);
        rowEl.appendChild(newChipEl);
        const chipButton = newChipEl.firstElementChild;
        if (chipButton instanceof HTMLElement) {
          // Add event handlers
          chipButton.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.handleChipClick);
          chipButton.addEventListener(
              _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleChipKeydown);
          // Set classes and labels
          chipButton.classList.add(_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.CHIP_ISACTIVE);
          chipButton.setAttribute(
              _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_LABEL,
              `${this.removeFilterLabel} ${chipButton.textContent}`);
          // Updates chips array.
          this.chipArr.push(chipButton);
        }
      }
      // If there is at least 1 chip (row exists), make the container tabbable.
      rowEl = this.root.querySelector(`[role='${_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.ROW}']`);
      this.root.tabIndex = rowEl ? _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.TABBABLE : _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.NOT_TABBABLE;
      if (!rowEl) {
        // Reset focused chip if no chips are visible.
        this.focusedChip = -1;
      }
    }
  }
  /**
   * Creates and returns an SVG checkmark icon
   */
  createCheckmarkIcon() {
    const checkmarkIcon =
        document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    checkmarkIcon.setAttribute('viewBox', '-2 -3 30 30');
    checkmarkIcon.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.PRESENTATION);
    checkmarkIcon.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HIDDEN, 'true');
    checkmarkIcon.classList.add(_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.CHIP_CHECKMARK, 'glue-icon');
    const checkmarkPath =
        document.createElementNS('http://www.w3.org/2000/svg', 'path');
    checkmarkPath.setAttribute('d', 'M1.73,12.91 8.1,19.28 22.79,4.59');
    checkmarkIcon.appendChild(checkmarkPath);
    return checkmarkIcon;
  }
  /**
   * Creates and returns a div with the close icon styles applied
   */
  createCloseIconDiv() {
    const closeButton = document.createElement('div');
    closeButton.classList.add(_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.CHIP_CLOSEBTN);
    return closeButton;
  }
  /**
   * Updates the status of the current chip
   */
  updateChip(chipEl) {
    var _a;
    const filterCategory = chipEl.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.Strings.CATEGORY];
    const filterCategoryItem = chipEl.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.Strings.CATEGORY_ITEM];
    const isActive = chipEl.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.CHIP_ISACTIVE);
    // Store chip's position in chipArr
    this.focusedChip = this.chipArr.indexOf(chipEl);
    if (filterCategory && filterCategoryItem) {
      const model = this.stateManager.getModel(filterCategory);
      if (model) {
        model.data[filterCategoryItem] = !isActive;
        this.emit(_constants__WEBPACK_IMPORTED_MODULE_4__.Strings.UPDATE_STATUS, {}, true);
        // Adjusts focused (secondary) chip by finding nearest chip
        if (!this.isPrimary && !model.data[filterCategoryItem]) {
          if (this.chipArr.length === 0) {
            // if array is completely empty, no chip is focusable.
            this.focusedChip = -1;
          } else {
            // move index back 1 position since chip was removed from array
            this.focusedChip--;
            if (this.focusedChip < 0) {
              // If we moved before start of array, return there
              this.focusedChip = 0;
            } else if (this.focusedChip >= this.chipArr.length) {
              // If we are beyond the end of the array, return there
              this.focusedChip = this.chipArr.length - 1;
            }
          }
        }
        (_a = this.chipArr[this.focusedChip]) === null || _a === void 0 ?
            void 0 :
            _a.focus();
      }
    }
  }
  /**
   * Destroys the chips component: removes event handlers and resets container.
   */
  destroy() {
    this.root.tabIndex = _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.NOT_TABBABLE;
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleRootKeydown);
    this.chipArr.forEach((el) => {
      el.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.handleChipClick);
      el.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleChipKeydown);
    });
    const chipsRowEl = this.root.querySelector('div[role=row]');
    if (chipsRowEl) {
      this.root.removeChild(chipsRowEl);
    }
  }
}



/***/ }),

/***/ "./_glue/lib/filter/constants.js":
/*!***************************************!*\
  !*** ./_glue/lib/filter/constants.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CssClasses: () => (/* binding */ CssClasses),
/* harmony export */   MaterialClasses: () => (/* binding */ MaterialClasses),
/* harmony export */   Strings: () => (/* binding */ Strings)
/* harmony export */ });
var CssClasses;
(function(CssClasses) {
CssClasses['ROOT'] = 'glue-filter';
CssClasses['ROOT_MWS'] = 'glue-filter--mws';
CssClasses['APPLY_FILTERS'] = 'glue-filter__apply-filters';
CssClasses['CATEGORIES'] = 'glue-filter__categories';
CssClasses['CATEGORY'] = 'glue-filter__category';
CssClasses['CATEGORY_COUNT'] = 'glue-filter__category-count';
CssClasses['CATEGORY_ITEM'] = 'glue-filter__category-item';
CssClasses['CHIP'] = 'glue-filter__chip';
CssClasses['CHIP_ISACTIVE'] = 'glue-filter__chip--is-active';
CssClasses['CHIP_CHECKMARK'] = 'glue-filter__chip-checkmark';
CssClasses['CHIP_CLOSEBTN'] = 'glue-filter__chip-close-btn';
CssClasses['CHIPS'] = 'glue-filter__chips';
CssClasses['CHIPS_BAR'] = 'glue-filter__chips-bar';
CssClasses['CHIPS_HEADER'] = 'glue-filter__chips-header';
CssClasses['CHIPS_PRIMARY'] = 'glue-filter__chips--primary';
CssClasses['CONTROLS'] = 'glue-filter__filter-controls';
CssClasses['EXPANSIONPANELS'] = 'glue-filter__panels';
CssClasses['MODAL'] = 'glue-filter__modal';
CssClasses['MODAL_CONTENT'] = 'glue-filter__modal-content';
CssClasses['MODAL_CONTROLS'] = 'glue-filter__modal-controls';
CssClasses['MODAL_TOGGLE'] = 'glue-filter__modal-toggle';
CssClasses['MODAL_VIEWRESULTS'] = 'glue-filter__view-results';
CssClasses['RESET_ALL'] = 'glue-filter__reset-all';
CssClasses['RESET_ALL_FILTERED'] = 'glue-filter__reset-all--filtered';
CssClasses['RESULT'] = 'glue-filter__result';
CssClasses['RESULT_IS_MATCHING'] = 'glue-filter__result--is-matching';
CssClasses['RESULTS'] = 'glue-filter__results';
CssClasses['RESULTS_COUNT'] = 'glue-filter__results-count';
CssClasses['RESULTS_STATUS'] = 'glue-filter__results-status';
CssClasses['SHOW_RESULTS'] = 'glue-filter__show-results';
CssClasses['TITLE'] = 'glue-filter__filter-title';
})(CssClasses || (CssClasses = {}));
var MaterialClasses;
(function(MaterialClasses) {
MaterialClasses['CHECKBOX'] = 'mdc-checkbox__native-control';
MaterialClasses['RADIO'] = 'mdc-radio__native-control';
MaterialClasses['LIST_ITEM'] = 'mdc-list-item';
MaterialClasses['FORM_FIELD'] = 'mdc-form-field';
MaterialClasses['LABEL'] = 'mdc-floating-label';
MaterialClasses['SELECT'] = 'mdc-select';
MaterialClasses['SELECT_LABEL'] = 'mdc-list-item__text';
MaterialClasses['MWC3_CHECKBOX'] = 'glue-mwc3-checkbox';
MaterialClasses['MWC3_RADIO'] = 'glue-mwc3-radio';
MaterialClasses['MWC3_SELECT'] = 'glue-mwc3-select';
})(MaterialClasses || (MaterialClasses = {}));
var Strings;
(function(Strings) {
// data parameters
Strings['CATEGORIES'] = 'glueFilterCategories';
Strings['CATEGORY'] = 'glueFilterCategory';
Strings['CATEGORY_ITEM'] = 'glueFilterCategoryItem';
Strings['CHIPS_LABEL_ADD'] = 'glueFilterChipsLabelAdd';
Strings['CHIPS_LABEL_REMOVE'] = 'glueFilterChipsLabelRemove';
Strings['CHIPS_LABEL_RESET'] = 'glueFilterChipsLabelReset';
Strings['RESULT_MATCH'] = 'glueFilterResultMatch';
Strings['DATA_VALUE'] = 'value';
Strings['STRATEGY'] = 'glueFilterStrategy';
Strings['PREFIX'] = 'data-glue-filter-';
// Layout
Strings['RTL'] = 'rtl';
// Events
Strings['UPDATE_STATUS'] = 'gluefilterupdatestatus';
Strings['MATERIALSELECT_CHANGE'] = 'MDCSelect:change';
// Defaults
Strings['CLEAR_FILTERS'] = 'Clear filters';
Strings['ADD_FILTER'] = 'Add filter';
Strings['REMOVE_FILTER'] = 'Remove filter';
Strings['RESULTS_COUNT'] = '[COUNT] results';
Strings['MODAL_TOGGLE_TEXT'] = 'Filter';
Strings['MODAL_CLOSE_TEXT'] = 'Close filter modal';
Strings['MODAL_RESULTS_COUNT'] = 'Show [COUNT] results';
Strings['PANELS_COLLAPSE_LABEL'] = 'Collapse this filter category';
Strings['PANELS_EXPAND_LABEL'] = 'Expand this filter category';
Strings['APPLIED_FILTERS'] = 'Applied filters';
// Error messages
Strings['ERROR_MISSING_CATEGORY'] =
    'Filter category is not set on the element.';
Strings['ERROR_MISSING_MATERIAL'] =
    'Material input was not found on this element';
Strings['ERROR_MISSING_VALUE'] = 'Attribute "value" is not set on the element.';
// Layout types
Strings['LAYOUT_VERTICAL'] = 'vertical';
Strings['LAYOUT_HORIZONTAL_DROPDOWN'] = 'horizontal-dropdown';
Strings['LAYOUT_HORIZONTAL_CHIPS'] = 'horizontal-chips';
// ID generators
Strings['CATEGORY_COUNT_ID'] = 'glue-filter-category-count';
})(Strings || (Strings = {}));



/***/ }),

/***/ "./_glue/lib/filter/index.js":
/*!***********************************!*\
  !*** ./_glue/lib/filter/index.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Filter: () => (/* binding */ Filter),
/* harmony export */   FilterStateManager: () => (/* reexport safe */ _state_manager__WEBPACK_IMPORTED_MODULE_9__.FilterStateManager)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base */ "./_glue/lib/base/index.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _expansionpanels__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../expansionpanels */ "./_glue/lib/expansionpanels/index.js");
/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modal */ "./_glue/lib/modal/index.js");
/* harmony import */ var _responsivemonitor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../responsivemonitor */ "./_glue/lib/responsivemonitor/index.js");
/* harmony import */ var _category__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./category */ "./_glue/lib/filter/category/index.js");
/* harmony import */ var _chip__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chip */ "./_glue/lib/filter/chip/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./constants */ "./_glue/lib/filter/constants.js");
/* harmony import */ var _result__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./result */ "./_glue/lib/filter/result/index.js");
/* harmony import */ var _state_manager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./state_manager */ "./_glue/lib/filter/state_manager/index.js");












/** A class to filter a list of content. */
class Filter extends _base__WEBPACK_IMPORTED_MODULE_0__.Component {
  /** Creates an instance of GlueFilter. */
  constructor(root) {
    super(root);
    /** A collection of filter categories. */
    this.categories = [];
    this.handleReset = () => {
      this.reset();
    };
    this.handleUpdateResetButton = () => {
      this.updateResetButton();
    };
    this.handleOpenModal = () => {
      var _a;
      (_a = this.modal) === null || _a === void 0 ? void 0 : _a.open();
    };
    this.handleCloseModal = () => {
      var _a;
      (_a = this.modal) === null || _a === void 0 ? void 0 : _a.close();
    };
    this.resetAllEls = [
      ...this.root.querySelectorAll(`.${_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.RESET_ALL}`),
    ];
    // Grab subcomponent elements
    this.modalEl = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.MODAL}`);
    this.modalToggleEl = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.MODAL_TOGGLE}`);
    this.modalCloseEl = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.SHOW_RESULTS}`);
    this.expansionPanelsEl =
        this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.EXPANSIONPANELS}`);
    this.init();
  }
  /** Initializes subfeatures of the filter component. */
  init() {
    this.initCategories();
    this.initResults();
    this.initChips();
    this.initPanels();
    this.initResponsiveModal();
    this.initResetAll();
  }
  /** Initializes filter category elements. */
  initCategories() {
    const filters = [
      ...this.root.querySelectorAll(`.${_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.CATEGORY}`),
    ];
    if (!filters.length) {
      throw new Error('There are no filter category elements found.');
    }
    for (const el of filters) {
      const filterCategory = new _category__WEBPACK_IMPORTED_MODULE_5__.FilterCategory(el);
      this.categories.push(filterCategory);
    }
  }
  /** Initializes results container element. */
  initResults() {
    const resultsEl = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.RESULTS}`);
    if (!resultsEl) {
      throw new Error('There is no filter results container found.');
    }
    this.results = new _result__WEBPACK_IMPORTED_MODULE_8__.FilterResult(resultsEl);
  }
  /** Initializes chips if the container element exists. */
  initChips() {
    var _a;
    const chipsEl = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.CHIPS}`);
    if (chipsEl) {
      const chipsCollection = {};
      for (const [index, filterCategory] of Object.entries(this.categories)) {
        const category =
            (_a = filterCategory.category) !== null && _a !== void 0 ?
            _a :
            `glue-filter-category-${index}`;
        chipsCollection[category] = filterCategory.chips;
      }
      this.chips = new _chip__WEBPACK_IMPORTED_MODULE_6__.FilterChips(chipsEl, chipsCollection);
    }
  }
  /** Initializes reset all buttons if they exist. */
  initResetAll() {
    this.resetAllEls = [
      ...this.root.querySelectorAll(`.${_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.RESET_ALL}`),
    ];
    if (this.resetAllEls.length) {
      for (const el of this.resetAllEls) {
        el.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_1__.EventType.CLICK, this.handleReset);
      }
      this.root.addEventListener(
          _constants__WEBPACK_IMPORTED_MODULE_7__.Strings.UPDATE_STATUS, this.handleUpdateResetButton);
    }
  }
  /** Initializes expansion panels if they exist */
  initPanels() {
    if (this.expansionPanelsEl) {
      this.expansionPanels = new _expansionpanels__WEBPACK_IMPORTED_MODULE_2__.ExpansionPanels(this.expansionPanelsEl);
    }
  }
  /** Initializes responsive monitor to create/destroy modal if modal exists */
  initResponsiveModal() {
    if (this.modalEl) {
      if (!this.modalToggleEl) {
        throw new Error('Filter modal exists but its toggle is missing.');
      }
      this.responsiveModal = new _responsivemonitor__WEBPACK_IMPORTED_MODULE_4__.ResponsiveMonitor({
        breakpoint: ['sm', 'md'],
        enter: () => {
          var _a, _b;
          // Initializes modal and toggle handlers on small/medium viewports
          this.modal = new _modal__WEBPACK_IMPORTED_MODULE_3__.Modal(this.modalEl, this.modalToggleEl);
          (_a = this.modalToggleEl) === null || _a === void 0 ?
              void 0 :
              _a.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_1__.EventType.CLICK, this.handleOpenModal);
          (_b = this.modalCloseEl) === null || _b === void 0 ?
              void 0 :
              _b.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_1__.EventType.CLICK, this.handleCloseModal);
        },
        leave: () => {
          var _a, _b, _c, _d;
          // Closes/destroys modal and remove handlers on large/xl viewports
          (_a = this.modal) === null || _a === void 0 ? void 0 : _a.close();
          (_b = this.modal) === null || _b === void 0 ? void 0 : _b.destroy();
          (_c = this.modalToggleEl) === null || _c === void 0 ?
              void 0 :
              _c.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_1__.EventType.CLICK, this.handleOpenModal);
          (_d = this.modalCloseEl) === null || _d === void 0 ?
              void 0 :
              _d.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_1__.EventType.CLICK, this.handleCloseModal);
        },
      });
    }
  }
  /**
   * Removes event listeners and destroys subcomponents.
   */
  destroy() {
    var _a, _b, _c, _d, _e, _f, _g;
    // Destroys/resets filter categories and chips
    this.categories.forEach((filterCategory) => {
      filterCategory.destroy();
    });
    (_a = this.chips) === null || _a === void 0 ? void 0 : _a.destroy();
    _state_manager__WEBPACK_IMPORTED_MODULE_9__.FilterStateManager.reset();
    // Cleans up resetall buttons
    if (this.resetAllEls.length) {
      for (const el of this.resetAllEls) {
        el.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_1__.EventType.CLICK, this.handleReset);
      }
      this.root.removeEventListener(
          _constants__WEBPACK_IMPORTED_MODULE_7__.Strings.UPDATE_STATUS, this.handleUpdateResetButton);
    }
    // Destroys panels
    (_b = this.expansionPanels) === null || _b === void 0 ? void 0 :
                                                            _b.destroy();
    // Destroys/cleans up modal
    (_c = this.responsiveModal) === null || _c === void 0 ? void 0 :
                                                            _c.destroy();
    (_d = this.modal) === null || _d === void 0 ? void 0 : _d.close();
    (_e = this.modal) === null || _e === void 0 ? void 0 : _e.destroy();
    (_f = this.modalToggleEl) === null || _f === void 0 ?
        void 0 :
        _f.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_1__.EventType.CLICK, this.handleOpenModal);
    (_g = this.modalCloseEl) === null || _g === void 0 ?
        void 0 :
        _g.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_1__.EventType.CLICK, this.handleCloseModal);
  }
  /**
   * Resets all filters, or a single filter if the filter category is specified.
   * @param category The filter category to reset.
   */
  reset(category) {
    if (category) {
      this.categories
          .filter((val) => {
            return val.category === category;
          })[0]
          .reset();
    } else {
      this.categories.forEach((filterCategory) => {
        filterCategory.reset();
      });
      // Updates classes
      this.updateResetButton();
    }
  }
  /**
   * Returns a list of matched items.
   */
  getFilteredItems() {
    return this.results.filteredItems;
  }
  /**
   * Returns the StateManager.
   */
  getStateManager() {
    return new _state_manager__WEBPACK_IMPORTED_MODULE_9__.FilterStateManager();
  }
  /**
   * Updates class on the Reset All buttons when filters are toggled.
   * Class should only be added when at least one filter is active.
   */
  updateResetButton() {
    let areFiltersActive = false;
    const isActive = (filterValue) => filterValue === true;
    for (const filterCategory of this.categories) {
      if (!areFiltersActive) {
        areFiltersActive =
            Object.values(filterCategory.model.data).some(isActive);
      }
    }
    for (const el of this.resetAllEls) {
      if (areFiltersActive) {
        el.classList.add(_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.RESET_ALL_FILTERED);
      } else {
        el.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.RESET_ALL_FILTERED);
      }
    }
  }
}



/***/ }),

/***/ "./_glue/lib/filter/result/index.js":
/*!******************************************!*\
  !*** ./_glue/lib/filter/result/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FilterResult: () => (/* binding */ FilterResult)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants */ "./_glue/lib/filter/constants.js");
/* harmony import */ var _state_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../state_manager */ "./_glue/lib/filter/state_manager/index.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util */ "./_glue/lib/filter/util/index.js");





/**
 * A class to manage filter result component.
 */
class FilterResult extends _base__WEBPACK_IMPORTED_MODULE_0__.Component {
  /**
   * Creates an instance of GlueFilterResult.
   */
  constructor(root) {
    super(root);
    this.resultItems = [];
    this.filteredItems = [];
    this.resultTags = [];
    this.filterCategories = [];
    this.filterData = {};
    this.init();
  }
  /** Initializes filter result component. */
  init() {
    var _a;
    // Updates strategy value of the filter.
    this.filterData.strategy = this.root.dataset[_constants__WEBPACK_IMPORTED_MODULE_2__.Strings.STRATEGY];
    // Validates filter categories.
    const filterCategories = this.root.dataset[_constants__WEBPACK_IMPORTED_MODULE_2__.Strings.CATEGORIES];
    if (!filterCategories) {
      throw new Error('Filter categories are not set on the result element.');
    }
    this.filterCategories = filterCategories.split(' ');
    if (!this.checkfilterCategories(this.filterCategories)) {
      throw new Error('These filter categories are not valid.');
    }
    // Subscribes to filter data changes.
    for (const filterCategory of this.filterCategories) {
      const model = new _state_manager__WEBPACK_IMPORTED_MODULE_3__.FilterStateManager().getModel(filterCategory);
      const data =
          (_a = model === null || model === void 0 ? void 0 : model.data) !==
                  null &&
              _a !== void 0 ?
          _a :
          {};
      for (const key of Object.keys(data)) {
        model === null || model === void 0 ? void 0 : model.listen(key, () => {
          this.render();
        });
      }
    }
    // Collects tags from each result item.
    this.resultItems = [
      ...this.root.querySelectorAll(`.${_constants__WEBPACK_IMPORTED_MODULE_2__.CssClasses.RESULT}`),
    ];
    this.resultItems.forEach((el) => {
      // Parse data-glue-filter-result-match as data-glue-filter-CATEGORY
      if (el.dataset[_constants__WEBPACK_IMPORTED_MODULE_2__.Strings.RESULT_MATCH]) {
        JSON.parse(el.dataset[_constants__WEBPACK_IMPORTED_MODULE_2__.Strings.RESULT_MATCH], (key, value) => {
          if (key) {
            el.dataset[key] = value;
          }
        });
      }
      const tags = {};
      this.filterCategories.forEach((filterCategory) => {
        const filterTag = el.getAttribute(_constants__WEBPACK_IMPORTED_MODULE_2__.Strings.PREFIX + filterCategory);
        tags[filterCategory] = filterTag ? filterTag.split(' ') : [];
      });
      this.resultTags.push(tags);
    });
    this.render();
  }
  /** Returns true if all filter categories are valid. */
  checkfilterCategories(filterCategories) {
    for (const category of filterCategories) {
      if (!new _state_manager__WEBPACK_IMPORTED_MODULE_3__.FilterStateManager().getModel(category)) {
        return false;
      }
    }
    return true;
  }
  /** Returns filter results. */
  getFilterResults() {
    var _a;
    const data = {};
    for (const category of this.filterCategories) {
      data[category] =
          (_a = new _state_manager__WEBPACK_IMPORTED_MODULE_3__.FilterStateManager().getModel(category)) === null ||
              _a === void 0 ?
          void 0 :
          _a.data;
    }
    this.filterData = Object.assign({}, this.filterData, data);
    return (0,_util__WEBPACK_IMPORTED_MODULE_4__.filterlist)(this.resultTags, this.filterData);
  }
  /**
   * Renders filter results elements.
   */
  render() {
    const results = this.getFilterResults();
    for (const [index, el] of this.resultItems.entries()) {
      el.classList.toggle(_constants__WEBPACK_IMPORTED_MODULE_2__.CssClasses.RESULT_IS_MATCHING, results[index]);
      results[index] ? el.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HIDDEN) :
                       el.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HIDDEN, 'true');
    }
    this.filteredItems = [
      ...this.root.querySelectorAll(`.${_constants__WEBPACK_IMPORTED_MODULE_2__.CssClasses.RESULT_IS_MATCHING}`),
    ];
    this.renderCounter();
  }
  /**
   * Renders the count of filtered results.
   */
  renderCounter() {
    const counter = this.filteredItems.length;
    const filterRootEl = this.root.closest(`.${_constants__WEBPACK_IMPORTED_MODULE_2__.CssClasses.ROOT}`) ?
        this.root.closest(`.${_constants__WEBPACK_IMPORTED_MODULE_2__.CssClasses.ROOT}`) :
        this.root;
    const resultsCount =
        filterRootEl.querySelectorAll(`.${_constants__WEBPACK_IMPORTED_MODULE_2__.CssClasses.RESULTS_COUNT}`);
    if (resultsCount.length) {
      for (const el of resultsCount) {
        // Removes all child nodes
        while (el.firstChild) {
          el.removeChild(el.firstChild);
        }
        const numEl = document.createTextNode(counter.toString());
        el.appendChild(numEl);
      }
    }
  }
}



/***/ }),

/***/ "./_glue/lib/filter/state_manager/index.js":
/*!*************************************************!*\
  !*** ./_glue/lib/filter/state_manager/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FilterStateManager: () => (/* binding */ FilterStateManager)
/* harmony export */ });
/**
 * A class to manage state of list filter component.
 * It manages a collection of models.
 */
class FilterStateManager {
  constructor() {
    this.models = {};
    if (!FilterStateManager.instance) {
      FilterStateManager.instance = this;
    } else {
      this.models = FilterStateManager.instance.getModels();
    }
    return FilterStateManager.instance;
  }
  /**
   * Returns the data object based on the key.
   * @param key The key of the data.
   */
  getModel(key) {
    return this.models[key];
  }
  /**
   * Returns all data objects.
   */
  getModels() {
    return this.models;
  }
  /**
   * Sets data model.
   * @param key The key of the data.
   * @param model The data to be set.
   */
  setModel(key, model) {
    this.models[key] = model;
  }
  // Resets the StateManager instance.
  static reset() {
    FilterStateManager.instance = undefined;
  }
}



/***/ }),

/***/ "./_glue/lib/filter/util/index.js":
/*!****************************************!*\
  !*** ./_glue/lib/filter/util/index.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   filterlist: () => (/* binding */ filterlist)
/* harmony export */ });
/**
 * Returns matching results for a list of data.
 *
 *  The first argument is targetArray which includes a list of targets.
 *  Each target is an object which represents a filter category and
 *  possible values.
 *  Example:
 *  targetArray: Target[] = [
 *    {
 *      'color': ['green', 'red'],
 *      'type': ['fruit'],
 *    },
 *    {
 *      'color': ['yellow'],
 *      'type': ['vegetable'],
 *    }
 *  ]
 *
 *  The second parameter is a filter object, which represents the matching
 *  criteria used to evaluate the list of items.
 *  Example:
 *  filter: Filter = {
 *    'type': {
 *      'vegetable': true,
 *      'fruit': false,
 *    },
 *    'color': {
 *      'red': true,
 *      'orange': true,
 *      'yellow': false,
 *      'green': false
 *    }
 *  }
 *  The output is an array of boolean values, they represent whether the
 *  corresponding items are matched. Example: [true,true,false].
 * @param targetArr The target data object to filter
 * @param filter The filter object with stategy and filters.
 * @param matchFunc An optional function to use for matching.
 * @return The result showing whether the data matches the filter.
 */
function filterlist(targetArr, filter, matchFunc) {
  const output = [];
  targetArr.forEach((target) => {
    const filtered = filterData(target, filter, matchFunc);
    output.push(filtered);
  });
  return output;
}
/**
 * Returns matching result for a single data based on the filter.
 * @return Shows whether the data matches the filter.
 */
function filterData(target, filter, matchFunc) {
  let isMatch = false;
  // Set a default filter strategy to 'strict'
  if (filter.strategy === undefined ||
      !['strict', 'loose'].includes(filter.strategy)) {
    filter.strategy = 'strict';
  }
  for (const key of Object.keys(target)) {
    isMatch = false;
    // Ignores the filter if the filter is inactive. The filter is inactive
    // if all filter options are false.
    if (!checkActiveState(filter, key) || filter[key] === undefined) {
      isMatch = true;
    } else {
      for (const value of target[key]) {
        const filterGroup = filter[key];
        let matchResult = false;
        if (matchFunc) {
          matchResult = matchFunc.call(undefined, filter, key, value);
        } else if (typeof filterGroup === 'object') {
          matchResult = filterGroup[value];
        }
        if (matchResult === true) {
          isMatch = true;
          break;
        }
      }
    }
    if ((filter.strategy === 'strict') === isMatch) {
      continue;
    } else {
      return isMatch;
    }
  }
  return isMatch;
}
/**
 * Checks whether the filter is active. Returns true if users have
 * changed the filter value.
 * @param filter The object includes all filters.
 * @param filterId The id of the filter item.
 * @return If the state is active.
 */
function checkActiveState(filter, filterId) {
  const item = filter[filterId];
  if (typeof item === 'object') {
    for (const filterOption in item) {
      if (item[filterOption]) return true;
    }
  }
  if (typeof item === 'string' && item.length > 0) {
    return true;
  }
  return false;
}



/***/ }),

/***/ "./_glue/lib/focus/index.js":
/*!**********************************!*\
  !*** ./_glue/lib/focus/index.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FOCUSABLE_ELEMENT_SELECTORS: () => (/* binding */ FOCUSABLE_ELEMENT_SELECTORS),
/* harmony export */   getFocusableElements: () => (/* binding */ getFocusableElements),
/* harmony export */   isElementFocusable: () => (/* binding */ isElementFocusable)
/* harmony export */ });
/**
 * @fileoverview Utilities relating to keyboard focus.
 */
/**
 * Query selectors for elements that can receive focus.
 * Include Material 3 custom elements that Glue uses.
 */
const FOCUSABLE_ELEMENT_SELECTORS = [
  'input',
  'textarea',
  'select',
  'button',
  'iframe',
  '[role="button"]',
  'a',
  '[tabindex]',
  'md-checkbox',
  'md-radio',
  'md-switch',
  'md-outlined-select',
  'md-filled-select',
  'md-outlined-text-field',
  'md-filled-text-field',
];
/**
 * Returns true if the element is able to receive focus. Note that this will
 * return true even for elements where the user isn't able to move focus
 * to the element but javascript is able to move focus.
 * @param el The Element to check for focusability.
 * @return Returns true if the element is focusable
 */
function isElementFocusable(el) {
  return (
      FOCUSABLE_ELEMENT_SELECTORS
          .filter((selector) => {
            return el.matches(selector);
          })
          .length > 0);
}
/**
 * Get all child focusable elements.
 * @param el The parent element.
 * @return Array containing all child focusable elements.
 */
function getFocusableElements(el) {
  const inputs = el.querySelectorAll('input');
  const anchors = el.querySelectorAll('a');
  const textareas = el.querySelectorAll('textarea');
  const selects = el.querySelectorAll('select');
  const buttons = el.querySelectorAll('button');
  const iframes = el.querySelectorAll('iframe');
  const roleBtnElements = el.querySelectorAll(
      '[role="button"]' +
      ':not(input)' +
      ':not(a)' +
      ':not(textarea)' +
      ':not(select)' +
      ':not(button)' +
      ':not(iframe)');
  const tabindexElements = el.querySelectorAll(
      '[tabindex="0"]' +
      ':not([role="button"])' +
      ':not(input)' +
      ':not(a)' +
      ':not(textarea)' +
      ':not(select)' +
      ':not(button)' +
      ':not(iframe)' +
      ':not(md-checkbox)' +
      ':not(md-radio)' +
      ':not(md-switch)' +
      ':not(md-outlined-select)' +
      ':not(md-filled-select)' +
      ':not(md-outlined-text-field)' +
      ':not(md-filled-text-field)');
  const mdCheckboxes = el.querySelectorAll('md-checkbox');
  const mdRadios = el.querySelectorAll('md-radio');
  const mdSwitches = el.querySelectorAll('md-switch');
  const mdOutlinedSelects = el.querySelectorAll('md-outlined-select');
  const mdFilledSelects = el.querySelectorAll('md-filled-select');
  const mdOutlinedTextFields = el.querySelectorAll('md-outlined-text-field');
  const mdFilledTextFields = el.querySelectorAll('md-filled-text-field');
  return [
    ...inputs,
    ...anchors,
    ...textareas,
    ...selects,
    ...buttons,
    ...iframes,
    ...roleBtnElements,
    ...tabindexElements,
    ...mdCheckboxes,
    ...mdRadios,
    ...mdSwitches,
    ...mdOutlinedSelects,
    ...mdFilledSelects,
    ...mdOutlinedTextFields,
    ...mdFilledTextFields,
  ];
}



/***/ }),

/***/ "./_glue/lib/footer/constants.js":
/*!***************************************!*\
  !*** ./_glue/lib/footer/constants.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CssClasses: () => (/* binding */ CssClasses),
/* harmony export */   DataAttr: () => (/* binding */ DataAttr)
/* harmony export */ });
/**
 * @fileoverview Constants used in footer component.
 */
var CssClasses;
(function(CssClasses) {
CssClasses['FOOTER_ROOT'] = 'glue-footer';
CssClasses['FOOTER_UPPER'] = 'glue-footer__upper';
CssClasses['FOOTER_LINK'] = 'glue-footer__link';
CssClasses['FOOTER_LOGO'] = 'glue-footer__logo';
CssClasses['FOOTER_LOGO_IMG'] = 'glue-footer__logo-img';
CssClasses['FOOTER_PANELS'] = 'glue-footer__site-links';
CssClasses['FOOTER_PANELS_GROUP'] = 'glue-footer__site-links-grid';
CssClasses['FOOTER_PANELS_PANEL'] = 'glue-footer__site-links-column';
CssClasses['FOOTER_PANELS_TOGGLE'] = 'glue-footer__site-links-header';
CssClasses['FOOTER_PANELS_BUTTON'] = 'glue-footer__site-links-header-button';
CssClasses['FOOTER_PANELS_CONTENT'] = 'glue-footer__site-links-list';
CssClasses['FOOTER_PANELS_CONTENT_ITEM'] = 'glue-footer__site-links-list-item';
CssClasses['FOOTER_PANELS_HEADER_TEXT'] = 'glue-footer__site-links-header-text';
CssClasses['FOOTER_GLOBAL'] = 'glue-footer__global';
CssClasses['FOOTER_GLOBAL_LINKS'] = 'glue-footer__global-links';
CssClasses['FOOTER_GLOBAL_LINKS_EXTRA'] = 'glue-footer__global-links--extra';
CssClasses['FOOTER_GLOBAL_LINKS_LIST_ITEM'] =
    'glue-footer__global-links-list-item';
CssClasses['FOOTER_GLOBAL_LINKS_LIST_ITEM_EXTRA'] =
    'glue-footer__global-links-list-item--extra';
CssClasses['FOOTER_LANG_DROPDOWN'] = 'glue-footer__lang-dropdown';
})(CssClasses || (CssClasses = {}));
var DataAttr;
(function(DataAttr) {
DataAttr['MODEL_NAME'] = 'footer';
DataAttr['KEY'] = 'glueExpansionPanelsKey';
DataAttr['TOGGLEFOR'] = 'glueExpansionPanelToggleFor';
})(DataAttr || (DataAttr = {}));



/***/ }),

/***/ "./_glue/lib/footer/index.js":
/*!***********************************!*\
  !*** ./_glue/lib/footer/index.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Footer: () => (/* binding */ Footer)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base */ "./_glue/lib/base/index.js");
/* harmony import */ var _expansionpanels__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../expansionpanels */ "./_glue/lib/expansionpanels/index.js");
/* harmony import */ var _expansionpanels_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../expansionpanels/constants */ "./_glue/lib/expansionpanels/constants.js");
/* harmony import */ var _responsivemonitor___WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../responsivemonitor/ */ "./_glue/lib/responsivemonitor/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants */ "./_glue/lib/footer/constants.js");







/**
 * Class for creating Footer.
 */
class Footer extends _base__WEBPACK_IMPORTED_MODULE_0__.Component {
  /**
   * @param root The element that contains the footer sitelinks.
   * @param options Footer sitelink options.
   */
  constructor(root, options) {
    super(root);
    this.options = Object.assign({}, Footer.defaults, options);
    // Set up expansion panel options
    this.panelsOptions = {
      isAnimated: this.options.isAnimated,
      panelsCount: this.options.columnCount,
    };
    this.panelGroupEl =
        this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.FOOTER_PANELS_GROUP}`);
    // Set up rules for Responsive Monitor if panel group exists
    if (this.panelGroupEl) {
      this.responsiveSitelinks = new _responsivemonitor___WEBPACK_IMPORTED_MODULE_3__.ResponsiveMonitor({
        breakpoint: this.options.panelsBreakpoints,
        enter: () => {
          if (this.panelGroupEl) {
            // Set up expansion panels
            this.configureExpansionPanels(true);
            this.panelsComponent =
                new _expansionpanels__WEBPACK_IMPORTED_MODULE_1__.ExpansionPanels(this.panelGroupEl, this.panelsOptions);
          }
        },
        leave: () => {
          var _a;
          if (this.panelGroupEl) {
            // Remove expansion panels
            (_a = this.panelsComponent) === null || _a === void 0 ?
                void 0 :
                _a.destroy();
            this.configureExpansionPanels(false);
          }
        },
      });
    }
  }
  /**
   * Default footer sitelinks options.
   */
  static get defaults() {
    return {
      panelsBreakpoints: ['sm'],
      isAnimated: true,
      columnCount: 4,
    };
  }
  /**
   * Destroy the component.
   */
  destroy() {
    var _a;
    // Destroy panels (if set)
    if (this.panelsComponent) {
      this.panelsComponent.destroy();
      this.configureExpansionPanels(false);
    }
    // Destroy Responsive monitor instance
    (_a = this.responsiveSitelinks) === null || _a === void 0 ? void 0 :
                                                                _a.destroy();
  }
  /**
   * Configure expansion panels if they exist
   */
  configureExpansionPanels(isPanels) {
    if (!this.panelGroupEl) {
      return;
    }
    // Group settings
    this.panelGroupEl.classList.toggle(_expansionpanels_constants__WEBPACK_IMPORTED_MODULE_2__.CssClasses.GROUP, isPanels);
    if (isPanels) {
      this.panelGroupEl.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.DataAttr.KEY] = _constants__WEBPACK_IMPORTED_MODULE_4__.DataAttr.MODEL_NAME;
    } else {
      delete this.panelGroupEl.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.DataAttr.KEY];
    }
    // Individual panel settings
    for (const panelEl of this.panelGroupEl.querySelectorAll(
             `.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.FOOTER_PANELS_PANEL}`)) {
      const panelToggleEl =
          panelEl.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.FOOTER_PANELS_TOGGLE}`);
      const panelButtonEl =
          panelEl.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.FOOTER_PANELS_BUTTON}`);
      const panelContentEl =
          panelEl.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.FOOTER_PANELS_CONTENT}`);
      panelEl === null || panelEl === void 0 ?
          void 0 :
          panelEl.classList.toggle(_expansionpanels_constants__WEBPACK_IMPORTED_MODULE_2__.CssClasses.PANEL, isPanels);
      panelToggleEl === null || panelToggleEl === void 0 ?
          void 0 :
          panelToggleEl.classList.toggle(
              _expansionpanels_constants__WEBPACK_IMPORTED_MODULE_2__.CssClasses.TOGGLE, isPanels);
      panelButtonEl === null || panelButtonEl === void 0 ?
          void 0 :
          panelButtonEl.classList.toggle(
              _expansionpanels_constants__WEBPACK_IMPORTED_MODULE_2__.CssClasses.BUTTON, isPanels);
      panelContentEl === null || panelContentEl === void 0 ?
          void 0 :
          panelContentEl.classList.toggle(
              _expansionpanels_constants__WEBPACK_IMPORTED_MODULE_2__.CssClasses.CONTENT, isPanels);
      // Accessibility attributes for various elements
      if (isPanels && panelButtonEl && panelContentEl) {
        panelButtonEl.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.DataAttr.TOGGLEFOR] = panelContentEl.id;
      } else {
        panelButtonEl === null || panelButtonEl === void 0 ?
            void 0 :
            panelButtonEl.removeAttribute(_constants__WEBPACK_IMPORTED_MODULE_4__.DataAttr.TOGGLEFOR);
      }
    }
  }
}



/***/ }),

/***/ "./_glue/lib/header/constants.js":
/*!***************************************!*\
  !*** ./_glue/lib/header/constants.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CssClasses: () => (/* binding */ CssClasses),
/* harmony export */   Icons: () => (/* binding */ Icons),
/* harmony export */   Numbers: () => (/* binding */ Numbers),
/* harmony export */   Strings: () => (/* binding */ Strings)
/* harmony export */ });
/**
 * @fileoverview Constants used by the Header component.
 */
var CssClasses;
(function(CssClasses) {
CssClasses['ROOT'] = 'glue-header';
CssClasses['BAR'] = 'glue-header__bar';
CssClasses['TOGGLE_BTN'] = 'glue-header__drawer-toggle-btn';
CssClasses['DRAWER_EL'] = 'glue-header__drawer';
CssClasses['DRAWER_EL_BACKDROP'] = 'glue-header__drawer-backdrop';
CssClasses['HAMBURGER'] = 'glue-header__hamburger';
CssClasses['DRAWER_IS_SHOWN'] = 'glue-is-showing-drawer';
CssClasses['DOUBLE'] = 'glue-header--double';
CssClasses['SINGLE'] = 'glue-header--single';
CssClasses['WHOLLY_SCROLLED'] = 'glue-header-is-wholly-scrolled';
CssClasses['LOCK_UP'] = 'glue-header__lock-up';
CssClasses['ICON_LOCK_UP'] = 'glue-header--icon-lockup';
CssClasses['LINK_BAR'] = 'glue-header__link-bar';
CssClasses['LIST'] = 'glue-header__list';
CssClasses['LIST_ITEM'] = 'glue-header__item';
CssClasses['NESTED_LIST'] = 'glue-header__list--nested';
CssClasses['LINK_ITEM'] = 'glue-header__link';
CssClasses['LOGO'] = 'glue-header__logo';
CssClasses['LOGO_LINK'] = 'glue-header__logo-link';
CssClasses['LOGO_PRODUCT'] = 'glue-header__logo--product';
CssClasses['LOGO_CONTAINER'] = 'glue-header__logo-container';
CssClasses['LOGO_PRODUCT_CAMPAIGN'] = 'glue-header__logo--product-campaign';
CssClasses['LOGO_SVG'] = 'glue-header__logo-svg';
CssClasses['NO_DRAWER'] = 'glue-header-no-drawer';
CssClasses['STEPPED_NAV_ENABLE'] = 'glue-header-stepped-nav-enabled';
CssClasses['ACTIVE_MENU'] = 'glue-header--is-active';
CssClasses['ACTIVE_LINK'] = 'glue-header__item--active';
CssClasses['IS_ANIMATING'] = 'glue-is-animating';
CssClasses['BAR_DESKTOP'] = 'glue-header__bar--desktop';
CssClasses['BAR_MOBILE'] = 'glue-header__bar--mobile';
CssClasses['REWIND_SHADOW'] = 'glue-header--rewind-box-shadow';
CssClasses['HEADER_CONTAINER'] = 'glue-header__container';
CssClasses['HEADER_CONTAINER_LINKBAR'] = 'glue-header__container--linkbar';
CssClasses['HEADER_CONTAINER_CTA'] = 'glue-header__container--cta';
CssClasses['SKIP_BTN'] = 'glue-header__skip-content';
CssClasses['DEEP_NAV'] = 'glue-header__deep-nav';
CssClasses['TRANSPARENT'] = 'glue-header--transparent';
CssClasses['HOVERED'] = 'glue-header--hovered';
CssClasses['FOCUSED'] = 'glue-header--focused';
CssClasses['ACTIVE'] = 'glue-header--active';
CssClasses['TIER'] = 'glue-header__tier';
CssClasses['STACKED'] = 'glue-header--complex-stacked';
CssClasses['SIMPLE'] = 'glue-header--simple';
CssClasses['REVERSE'] = 'glue-header--reverse';
CssClasses['NO_CTA'] = 'glue-header--no-cta';
CssClasses['CTA'] = 'glue-header__cta';
CssClasses['SUPPLEMENTAL'] = 'glue-header__supplemental';
})(CssClasses || (CssClasses = {}));
var Strings;
(function(Strings) {
Strings['MISSING_ROOT_ELEMENT'] =
    'No element with "glue-header class" was found. Header component needs a root element.';
Strings['MISSING_HEADER_BAR_ELEMENT'] =
    'No element with "glue-header__bar" class was found. This is required by Header component.';
Strings['MISSING_DRAWER_ELEMENT'] =
    'No element with "glue-header__drawer" class was found. This is required by Header component.';
Strings['MISSING_TOGGLE_BTN_ELEMENT'] =
    'No element with "glue-header__drawer-toggle-btn" class was found. This is required by Header component.';
Strings['MISSING_LINK_BAR_ELEMENT'] =
    'No element with "glue-header__link-bar" class was found. This is required by Header component.';
Strings['UNKNOWN_CUSTOM_BREAKPOINT'] =
    'Unknown custom breakpoint. Valid values are "md", "lg", or "xl".';
Strings['SCROLL_UP'] = 'up';
Strings['SCROLL_DOWN'] = 'down';
Strings['INCORRECT_TYPE'] = 'Incorrect data type';
Strings['SHOW_EVENT'] = 'glueheadershow';
Strings['HIDE_EVENT'] = 'glueheaderhide';
})(Strings || (Strings = {}));
var Numbers;
(function(Numbers) {
Numbers[Numbers['MAX_PAGE_OFFSET'] = 500] = 'MAX_PAGE_OFFSET';
Numbers[Numbers['ANIMATING_STATE_BUFFER'] = 20] = 'ANIMATING_STATE_BUFFER';
Numbers[Numbers['SCROLL_THRESHOLD'] = 50] = 'SCROLL_THRESHOLD';
Numbers[Numbers['POSITION_CHANGE_BUFFER'] = 300] = 'POSITION_CHANGE_BUFFER';
})(Numbers || (Numbers = {}));
var Icons;
(function(Icons) {
Icons['DOWN_ARROW'] = 'expand-more';
Icons['RIGHT_ARROW'] = 'chevron-right';
Icons['LEFT_ARROW'] = 'chevron-left';
Icons['HAMBURGER'] = 'menu';
})(Icons || (Icons = {}));



/***/ }),

/***/ "./_glue/lib/header/deepnav/constants.js":
/*!***********************************************!*\
  !*** ./_glue/lib/header/deepnav/constants.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Strings: () => (/* binding */ Strings)
/* harmony export */ });
var Strings;
(function(Strings) {
Strings['ERROR_MSG_NO_CHILDREN'] = 'has no element children.';
Strings['ERROR_PREFIX'] = 'Menubar constructor argument el ';
})(Strings || (Strings = {}));



/***/ }),

/***/ "./_glue/lib/header/deepnav/index.js":
/*!*******************************************!*\
  !*** ./_glue/lib/header/deepnav/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Menubar: () => (/* binding */ Menubar)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants */ "./_glue/lib/header/constants.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ "./_glue/lib/header/deepnav/constants.js");
/* harmony import */ var _menubaritem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./menubaritem */ "./_glue/lib/header/deepnav/menubaritem.js");







/**
 * This class creates a navigation menu bar instance, each menu item may control
 * a dropdown sub menu.
 */
class Menubar extends _base__WEBPACK_IMPORTED_MODULE_0__.Component {
  constructor(root) {
    super(root);
    /** A collection of the menu items */
    this.menubarItems = [];
    /** A collection of the first characters of each menu item label */
    this.firstChars = [];
    /** The first  menu item. */
    this.firstItem = null;
    /** The last  menu item. */
    this.lastItem = null;
    /** A flag to show menubar's focus status. */
    this.hasFocus = false;
    /** A flag to show menubar's hover status. */
    this.hasHover = false;
    if (root.childElementCount === 0) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_3__.Strings.ERROR_PREFIX + _constants__WEBPACK_IMPORTED_MODULE_3__.Strings.ERROR_MSG_NO_CHILDREN);
    }
    this.init();
  }
  /**
   * Initializes the menubar component.
   * Throws an error if the menubar is empty.
   */
  init() {
    var _a;
    const listItems =
        this.root.querySelectorAll(`:scope > .${_constants__WEBPACK_IMPORTED_MODULE_2__.CssClasses.LIST_ITEM}`);
    this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.MENUBAR);
    for (const listItem of listItems) {
      listItem.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.NONE);
    }
    // Traverse the children elements and store reference in menuitems array.
    let elem = this.root.firstElementChild;
    let menubarItem;
    let menuElement;
    let textContent;
    while (elem) {
      menuElement = elem.firstElementChild;
      if (elem && menuElement instanceof HTMLAnchorElement) {
        menubarItem = new _menubaritem__WEBPACK_IMPORTED_MODULE_4__.MenubarItem(menuElement, this);
        this.menubarItems.push(menubarItem);
        textContent = (_a = menuElement.textContent) === null || _a === void 0 ?
            void 0 :
            _a.trim();
        if (textContent) {
          this.firstChars.push(textContent.substring(0, 1).toLowerCase());
        }
      }
      elem = elem.nextElementSibling;
    }
    const numItems = this.menubarItems.length;
    if (numItems > 0) {
      this.firstItem = this.menubarItems[0];
      this.lastItem = this.menubarItems[numItems - 1];
      this.firstItem.root.tabIndex = 0;
    }
  }
  destroy() {
    for (const item of this.menubarItems) {
      item.destroy();
    }
  }
  /**
   * Sets focus to the specified menu item.
   */
  setFocusToItem(newItem) {
    var _a;
    let isExpanded = false;
    for (const menubarItem of this.menubarItems) {
      if (menubarItem.root.tabIndex === 0) {
        isExpanded =
            menubarItem.root.getAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_EXPANDED) === 'true';
      }
      menubarItem.root.tabIndex = -1;
      (_a = menubarItem.popupMenu) === null || _a === void 0 ? void 0 :
                                                               _a.close();
    }
    newItem.root.focus();
    newItem.root.tabIndex = 0;
    if (isExpanded && newItem.popupMenu) {
      newItem.popupMenu.open();
    }
  }
  setFocusToFirstItem() {
    this.setFocusToItem(this.firstItem);
  }
  setFocusToLastItem() {
    this.setFocusToItem(this.lastItem);
  }
  /**
   * Sets focus to the previous menu item.
   * If the current item is the first menu item, move focus to the last
   * menu item.
   */
  setFocusToPreviousItem(currentItem) {
    let index;
    let newItem;
    if (currentItem === this.firstItem) {
      newItem = this.lastItem;
    } else {
      index = this.menubarItems.indexOf(currentItem);
      newItem = this.menubarItems[index - 1];
    }
    this.setFocusToItem(newItem);
  }
  /**
   * Sets focus to the next menu item.
   * If the current item is the last menu item, move focus to the first
   * menu item.
   */
  setFocusToNextItem(currentItem) {
    let index;
    let newItem;
    if (currentItem === this.lastItem) {
      newItem = this.firstItem;
    } else {
      index = this.menubarItems.indexOf(currentItem);
      newItem = this.menubarItems[index + 1];
    }
    this.setFocusToItem(newItem);
  }
  /**
   * Sets focus to the menu item based on the first Character.
   * Search matching label from the current item, if it hits the end,
   * start from the first item, vice versa.
   */
  setFocusByFirstCharacter(currentItem, char) {
    let start;
    let index;
    char = char.toLowerCase();
    start = this.menubarItems.indexOf(currentItem) + 1;
    if (start === this.menubarItems.length) {
      start = 0;
    }
    const findIndexFunc = (item, index) => {
      return item === char && index >= start;
    };
    index = this.firstChars.findIndex(findIndexFunc);
    if (index === -1) {
      start = 0;
      index = this.firstChars.findIndex(findIndexFunc);
    }
    if (index > -1) {
      this.setFocusToItem(this.menubarItems[index]);
    }
  }
}



/***/ }),

/***/ "./_glue/lib/header/deepnav/menubaritem.js":
/*!*************************************************!*\
  !*** ./_glue/lib/header/deepnav/menubaritem.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MenubarItem: () => (/* binding */ MenubarItem)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _events_key__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../events/key */ "./_glue/lib/events/key.js");
/* harmony import */ var _popupmenu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../popupmenu */ "./_glue/lib/header/popupmenu/index.js");





/**
 * This class creates a menu item instance, which may control a dropdown menu.
 */
class MenubarItem extends _base__WEBPACK_IMPORTED_MODULE_0__.Component {
  /** The menu argument is the menu bar element that contains this menu item. */
  constructor(root, parentMenu) {
    super(root);
    this.parentMenu = parentMenu;
    /** A popup menu component, controlled by the menu item. */
    this.popupMenu = null;
    /** A flag to show menu bar item's focus status. */
    this.hasFocus = false;
    /** A flag to show menu bar item's hover status. */
    this.hasHover = false;
    /**
     * This flag is used to determine if this controller is a menu bar item.
     * This flag is set to false in other controllers such as site switcher and
     * popup menu item.
     */
    this.isMenubarItem = true;
    /**
     * Handles keydown events.
     * - When press the Space, Enter or Down keys, open the menu if able and
     * focus to the first item.
     * - When press the Up key, open the popup menu if able and focus to the
     * last item.
     * - When press the left key, move focus to the previous menu item.
     * - When press the right key, move focus to the next menu item.
     * - When press the Home or PageUp key, move focus to the first item.
     * - When press the End or PageDown key, move focus to the last item.
     * - When press the Tab key, close the popup menu, and move focus to the
     * next focusable element.
     * - When press the ESC key, close the popup menu, move focus to the
     * controller.
     */
    this.handleKeydown = (event) => {
      var _a, _b;
      const char = event.key;
      let preventDefault = false;
      function isPrintableCharacter(str) {
        return str.length === 1 && str.match(/\S/);
      }
      switch (event.key) {
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.SPACE:
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.ENTER:
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.DOWN:
          if (this.popupMenu) {
            this.popupMenu.open();
            this.popupMenu.setFocusToFirstItem();
            preventDefault = true;
          }
          break;
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.LEFT:
          this.parentMenu.setFocusToPreviousItem(this);
          preventDefault = true;
          break;
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.RIGHT:
          this.parentMenu.setFocusToNextItem(this);
          preventDefault = true;
          break;
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.UP:
          if (this.popupMenu) {
            this.popupMenu.open();
            this.popupMenu.setFocusToLastItem();
            preventDefault = true;
          }
          break;
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.HOME:
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.PAGEUP:
          this.parentMenu.setFocusToFirstItem();
          preventDefault = true;
          break;
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.END:
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.PAGEDOWN:
          this.parentMenu.setFocusToLastItem();
          preventDefault = true;
          break;
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.TAB:
          (_a = this.popupMenu) === null || _a === void 0 ? void 0 :
                                                            _a.close(true);
          break;
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.ESC:
          (_b = this.popupMenu) === null || _b === void 0 ? void 0 :
                                                            _b.close(true);
          break;
        default:
          if (isPrintableCharacter(char)) {
            this.parentMenu.setFocusByFirstCharacter(this, char);
            preventDefault = true;
          }
          break;
      }
      if (preventDefault) {
        event.stopPropagation();
        event.preventDefault();
      }
    };
    /** Sets expanded attribute. */
    this.setExpanded = (flag) => {
      if (flag) {
        this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_EXPANDED, 'true');
      } else {
        this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_EXPANDED, 'false');
      }
    };
    /** Sets hasFocus to true when the menu item is in focus. */
    this.handleFocus = () => {
      this.parentMenu.hasFocus = true;
    };
    /** Sets hasFocus to false when the menu item is blurred. */
    this.handleBlur = () => {
      this.parentMenu.hasFocus = false;
    };
    /**
     * When the menu item in hovered, set hasHover to true and open the
     * popupmenu if able.
     */
    this.handleMouseenter = () => {
      var _a;
      this.hasHover = true;
      (_a = this.popupMenu) === null || _a === void 0 ? void 0 : _a.open();
    };
    /**
     * When the mouse is moved away from the menu item, set hasHover to false
     * and close the popupmenu after 300 mills.
     */
    this.handleMouseleave = () => {
      this.hasHover = false;
      setTimeout(() => {
        var _a;
        (_a = this.popupMenu) === null || _a === void 0 ? void 0 :
                                                          _a.close(false);
      }, 300);
    };
    this.init();
  }
  /**
   * Initializes the menu item and the associated popup menu.
   */
  init() {
    this.root.tabIndex = -1;
    this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.MENUITEM);
    const nextElement = this.root.nextElementSibling;
    if (nextElement instanceof HTMLUListElement) {
      this.popupMenu = new _popupmenu__WEBPACK_IMPORTED_MODULE_4__.PopupMenu(nextElement, this);
      this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HASPOPUP, 'true');
      this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.FOCUS, this.handleFocus);
      this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.BLUR, this.handleBlur);
      this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEENTER, this.handleMouseenter);
      this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSELEAVE, this.handleMouseleave);
    }
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleKeydown);
  }
  destroy() {
    var _a;
    (_a = this.popupMenu) === null || _a === void 0 ? void 0 : _a.destroy();
    this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.TAB_INDEX);
    this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HASPOPUP);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleKeydown);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.FOCUS, this.handleFocus);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.BLUR, this.handleBlur);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEENTER, this.handleMouseenter);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSELEAVE, this.handleMouseleave);
  }
}



/***/ }),

/***/ "./_glue/lib/header/drawer/constants.js":
/*!**********************************************!*\
  !*** ./_glue/lib/header/drawer/constants.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CssClasses: () => (/* binding */ CssClasses),
/* harmony export */   Strings: () => (/* binding */ Strings)
/* harmony export */ });
/**
 * @fileoverview Constants used by the Header component.
 */
var CssClasses;
(function(CssClasses) {
CssClasses['ROOT'] = 'glue-header__drawer';
CssClasses['DRAWER_IS_OPEN'] = 'glue-header__drawer--is-open';
CssClasses['TOGGLE_BTN'] = 'glue-header__drawer-toggle-btn';
CssClasses['IS_ANIMATING'] = 'glue-is-animating';
CssClasses['GLUE_BUTTON'] = 'glue-button';
CssClasses['NO_SCROLL'] = 'glue-no-scroll';
CssClasses['BACKDROP'] = 'glue-header__drawer-backdrop';
})(CssClasses || (CssClasses = {}));
var Strings;
(function(Strings) {
Strings['MISSING_DRAWER_ELEMENT'] =
    'No element with "glue-header__drawer" class was found. Drawer component needs a root element.';
Strings['MISSING_BACKDROP_ELEMENT'] =
    'No element with "glue-header__drawer-backdrop" class was found.';
Strings['OPEN'] = 'glueHeaderDrawerOpen';
Strings['CLOSE'] = 'glueHeaderDrawerClose';
Strings['TOGGLE_BTN'] = 'toggleBtn';
})(Strings || (Strings = {}));



/***/ }),

/***/ "./_glue/lib/header/drawer/index.js":
/*!******************************************!*\
  !*** ./_glue/lib/header/drawer/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Drawer: () => (/* binding */ Drawer)
/* harmony export */ });
/* harmony import */ var _base___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base/ */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _events_key__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../events/key */ "./_glue/lib/events/key.js");
/* harmony import */ var _focus__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../focus */ "./_glue/lib/focus/index.js");
/* harmony import */ var _math_coordinate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../math/coordinate */ "./_glue/lib/math/coordinate.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./constants */ "./_glue/lib/header/drawer/constants.js");









class Drawer extends _base___WEBPACK_IMPORTED_MODULE_0__.Component {
  /**
   * @param root The element that contains options object.
   * @param toggleEl The element that toggles the drawer open and closed.
   */
  constructor(root, toggleEl) {
    var _a;
    super(root);
    this.toggleEl = toggleEl;
    this.closed = true;
    this.isAnimating = false;
    this.ariaHiddenElements = [];
    this.focusableElements = [];
    /** Start time of the drag movement */
    this.startTime = 0;
    /** Initial touch position */
    this.initialTouchPos = null;
    /** Last touch poistion */
    this.lastTouchPos = null;
    /** True when it is ready to call request animatino frame */
    this.rafPending = false;
    this.handleGestureStart = (event) => {
      // Returns if there are multi touch points.
      if (this.isTouchEvent(event) && event.touches.length > 1) {
        return;
      }
      // Add the move and end listeners if PointerEvent is supported.
      // Otherwise add mouse listeners.
      if (this.isPointerEvent(event) && event.target instanceof Element) {
        event.target.setPointerCapture(event.pointerId);
      } else {
        document.addEventListener(
            _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEMOVE, this.handleGestureMove, true);
        document.addEventListener(
            _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEUP, this.handleGestureEnd, true);
      }
      this.initialTouchPos = this.getGesturePointFromEvent(event);
      this.startTime = new Date().getTime();
      // Overwrites the transition value set up in CSS
      this.root.style.transition = 'initial';
    };
    this.handleGestureMove = (event) => {
      event.preventDefault();
      if (!this.initialTouchPos) {
        return;
      }
      // Prevent small taps/etc triggering a dragging interaction
      const currentTouchPos = this.getGesturePointFromEvent(event);
      const distanceDragged = Math.abs(
          _math_coordinate__WEBPACK_IMPORTED_MODULE_5__.Coordinate.difference(currentTouchPos, this.initialTouchPos).x);
      if (distanceDragged < 10) {
        return;
      }
      this.lastTouchPos = currentTouchPos;
      // Returns if it is waiting for request animation frame callback.
      if (this.rafPending) {
        return;
      }
      this.rafPending = true;
      window.requestAnimationFrame(() => {
        this.onAnimFrame();
      });
    };
    this.handleGestureEnd = (event) => {
      var _a;
      event.preventDefault();
      if (this.isTouchEvent(event) &&
          ((_a = event.touches) === null || _a === void 0 ? void 0 :
                                                            _a.length) > 0) {
        return;
      }
      this.rafPending = false;
      // Remove Event Listeners
      if (this.isPointerEvent(event) && event.target instanceof Element) {
        event.target.releasePointerCapture(event.pointerId);
      } else {
        // Remove Mouse Listeners
        document.removeEventListener(
            _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEMOVE, this.handleGestureMove, true);
        document.removeEventListener(
            _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEUP, this.handleGestureEnd, true);
      }
      this.updateDrawerPosition();
      // Resets drag status
      this.startTime = 0;
      this.initialTouchPos = null;
      this.lastTouchPos = null;
    };
    // Check class names
    if (!this.root.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.ROOT)) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.MISSING_DRAWER_ELEMENT);
    }
    this.setAttributes();
    const element = (_a = this.root.parentElement) === null || _a === void 0 ?
        void 0 :
        _a.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.BACKDROP}`);
    if (!element) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.MISSING_BACKDROP_ELEMENT);
    }
    this.backdrop = element;
    this.transitionEndHandler = () => {
      this.handleTransitionEndEvent();
    };
    this.handleKeydown = (event) => {
      if (event.code === _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.TAB) {
        // Move focus back to the root.
        this.root.focus();
        return;
      }
      event.preventDefault();
      if (event.code === _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.ENTER) {
        this.close();
      }
    };
    this.handleOpen = () => {
      document.body.classList.add(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.NO_SCROLL);
      document.documentElement.classList.add(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.NO_SCROLL);
      this.backdrop.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleKeydown);
    };
    this.handleClose = () => {
      document.body.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.NO_SCROLL);
      document.documentElement.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.NO_SCROLL);
      this.backdrop.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleKeydown);
    };
    // CSS Animation event handlers
    this.root.addEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TRANSITIONEND, this.transitionEndHandler);
    // Adding and removing body no scroll class
    document.body.addEventListener(_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.OPEN, this.handleOpen);
    document.body.addEventListener(_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.CLOSE, this.handleClose);
  }
  registerTouchEvents() {
    if (window.PointerEvent) {
      this.root.addEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.POINTERDOWN, this.handleGestureStart, true);
      this.root.addEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.POINTERMOVE, this.handleGestureMove, true);
      this.root.addEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.POINTERUP, this.handleGestureEnd, true);
      this.root.addEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.POINTERCANCEL, this.handleGestureEnd, true);
    } else {
      // Add Touch Listener
      this.root.addEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TOUCHSTART, this.handleGestureStart, true);
      this.root.addEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TOUCHMOVE, this.handleGestureMove, true);
      this.root.addEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TOUCHEND, this.handleGestureEnd, true);
      this.root.addEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TOUCHCANCEL, this.handleGestureEnd, true);
      // Add Mouse Listener
      this.root.addEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEDOWN, this.handleGestureStart, true);
    }
  }
  deregisterTouchEvents() {
    if (window.PointerEvent) {
      this.root.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.POINTERDOWN, this.handleGestureStart, true);
      this.root.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.POINTERMOVE, this.handleGestureMove, true);
      this.root.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.POINTERUP, this.handleGestureEnd, true);
      this.root.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.POINTERCANCEL, this.handleGestureEnd, true);
    } else {
      this.root.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TOUCHSTART, this.handleGestureStart, true);
      this.root.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TOUCHMOVE, this.handleGestureMove, true);
      this.root.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TOUCHEND, this.handleGestureEnd, true);
      this.root.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TOUCHCANCEL, this.handleGestureEnd, true);
      this.root.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEDOWN, this.handleGestureStart, true);
    }
  }
  destroy() {
    this.deregisterTouchEvents();
    this.root.removeEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TRANSITIONEND, this.transitionEndHandler);
    document.body.removeEventListener(_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.OPEN, this.handleOpen);
    document.body.removeEventListener(_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.CLOSE, this.handleClose);
  }
  /** Determines whether the event is a TouchEvent. */
  isTouchEvent(event) {
    return window.TouchEvent && event instanceof TouchEvent;
  }
  /** Determines whether the event is a PointerEvent. */
  isPointerEvent(event) {
    return window.PointerEvent && event instanceof PointerEvent;
  }
  // Transits the drawer based on the last touch position.
  // Drag to right should do nothing.
  onAnimFrame() {
    if (!this.rafPending || !this.initialTouchPos || !this.lastTouchPos) {
      return;
    }
    const differenceInX =
        _math_coordinate__WEBPACK_IMPORTED_MODULE_5__.Coordinate.difference(this.lastTouchPos, this.initialTouchPos).x;
    // Do thing if move to right
    if (differenceInX > 0) {
      this.root.style.transform = '';
    } else {
      const transformStyle = `translate3d(${differenceInX}px, 0, 0)`;
      this.root.style.transform = transformStyle;
    }
    this.rafPending = false;
  }
  getGesturePointFromEvent(event) {
    const point = new _math_coordinate__WEBPACK_IMPORTED_MODULE_5__.Coordinate(0, 0);
    if (this.isTouchEvent(event)) {
      if (event.targetTouches) {
        point.x = event.targetTouches[0].clientX;
        point.y = event.targetTouches[0].clientY;
      }
    } else {
      point.x = event.clientX;
      point.y = event.clientY;
    }
    return point;
  }
  updateDrawerPosition() {
    // Resets the inline styles so the CSS transition style takes in charge
    // During the drag phase, inline transition style overwrites the CSS
    // transition.
    this.root.style.transition = '';
    this.root.style.transform = '';
    if (!this.lastTouchPos || !this.initialTouchPos) return;
    const differenceInX =
        _math_coordinate__WEBPACK_IMPORTED_MODULE_5__.Coordinate.difference(this.lastTouchPos, this.initialTouchPos).x;
    const validDrag = Math.abs(differenceInX) >= this.root.clientWidth * 0.5;
    const currentTime = new Date().getTime();
    const duration = currentTime - this.startTime;
    const validSwipe = duration < 300 && Math.abs(differenceInX) > 10;
    if (validDrag || validSwipe) {
      this.close();
    }
  }
  /**
   * Opens the drawer
   */
  open() {
    if (this.closed && !this.isAnimating) {
      this.isAnimating = true;
      this.emit(_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.OPEN, {}, true);
      this.root.classList.add(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.DRAWER_IS_OPEN);
      this.root.classList.add(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.IS_ANIMATING);
      this.setDefaultAttrs();
      // set aria-expanded property of button to true while opening drawer
      this.toggleEl.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_EXPANDED, 'true');
      this.backdrop.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, 'button');
      this.backdrop.tabIndex = _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.TABBABLE;
      this.removeAriaHidden();
      this.ariaHideElements();
      this.root.focus();
      this.removeKeyboardFocus();
      this.registerTouchEvents();
    }
  }
  /**
   * Removes keyboard focus from all the focusable elements outside the drawer.
   */
  removeKeyboardFocus() {
    const focusable = (0,_focus__WEBPACK_IMPORTED_MODULE_4__.getFocusableElements)(window.document.body);
    this.focusableElements = [];
    for (const el of focusable) {
      if (!this.root.contains(el) && !this.backdrop.contains(el) &&
          el.tabIndex !== -1) {
        this.focusableElements.push(el);
        el.tabIndex = -1;
      }
    }
  }
  /**
   * Adds keyboard focus for all the focusable elements outside the drawer.
   */
  addKeyboardFocus() {
    for (const el of this.focusableElements) {
      el.removeAttribute('tabindex');
    }
  }
  /**
   * Closes the drawer and sets the focus to the toggle btn.
   */
  close() {
    if (!this.closed && !this.isAnimating) {
      this.isAnimating = true;
      this.emit(_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.CLOSE, {}, true);
      this.root.classList.add(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.IS_ANIMATING);
      this.removeDefaultAttrs();
      // set aria-expanded property of button  to false while closing drawer
      this.toggleEl.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_EXPANDED, 'false');
      this.toggleEl.focus();
      this.setAriaHidden();
      this.ariaUnhideElements();
      this.addKeyboardFocus();
      if (this.backdrop) {
        this.backdrop.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.TAB_INDEX);
        this.backdrop.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE);
      }
      this.deregisterTouchEvents();
    }
  }
  setAttributes() {
    if (!this.root.id) {
      const randomId = Math.round(Math.random() * 99999999).toString(16);
      this.root.id = `glue-drawer-${randomId}`;
    }
    this.toggleEl.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_CONTROLS, this.root.id);
    this.toggleEl.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_EXPANDED, 'false');
    this.toggleEl.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HASPOPUP, 'true');
  }
  /**
   * Check to see if drawer is open
   */
  isOpen() {
    return this.root.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.DRAWER_IS_OPEN);
  }
  /**
   * Check to see if the event target is a child element of the drawer component
   */
  containsElement(event) {
    return event.target instanceof Node && this.root.contains(event.target);
  }
  /**
   * Check to see if the event target is a child element of the drawer component
   */
  isCtaElement(event) {
    return (
        event.target instanceof Element &&
        event.target.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.GLUE_BUTTON));
  }
  /**
   * This method will take care of any logic that needs to run after the CSS
   * transition has ended.
   */
  handleTransitionEndEvent() {
    if (this.isAnimating) {
      this.root.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.IS_ANIMATING);
      if (this.closed) {
        this.closed = false;
      } else {
        this.root.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.DRAWER_IS_OPEN);
        this.closed = true;
      }
      this.isAnimating = false;
    }
  }
  /**
   * This method will remove applied aria attributes
   */
  removeAriaHidden() {
    this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HIDDEN);
  }
  /**
   * This method will set aria attributes
   */
  setAriaHidden() {
    this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HIDDEN, 'true');
  }
  /**
   * This method sets default attributes when the drawer is opened
   */
  setDefaultAttrs() {
    this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_LABEL, 'Navigation drawer');
    this.root.tabIndex = _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.TABBABLE;
  }
  /**
   * This method removes default attributes when the drawer is closed
   */
  removeDefaultAttrs() {
    this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_LABEL);
    this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.TAB_INDEX);
  }
  /**
   * Set aria hidden to true for all other elements.
   * This method provides complementary A11y support before aria-modal
   * The code is referenced from
   * https://source.corp.google.com/piper///depot/google3/googledata/html/external_content/scs_corp/ariablueprints/dialog/dialog-modal-1.0.html;l=81-101
   * gets broader browser support.
   */
  ariaHideElements() {
    let current = this.root;
    while (current && current.parentNode) {
      for (const child of Array.from(current.parentNode.children)) {
        if (child !== current && child !== this.backdrop &&
            child.getAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HIDDEN) !== 'true') {
          this.ariaHiddenElements.push(child);
          child.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HIDDEN, 'true');
        }
      }
      current = current.parentNode;
    }
  }
  /**
   * Remove aria hidden to false for all other elements.
   */
  ariaUnhideElements() {
    this.ariaHiddenElements.forEach((el) => {
      el.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HIDDEN);
    });
    this.ariaHiddenElements = [];
  }
}



/***/ }),

/***/ "./_glue/lib/header/index.js":
/*!***********************************!*\
  !*** ./_glue/lib/header/index.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Header: () => (/* binding */ Header)
/* harmony export */ });
/* harmony import */ var _base___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base/ */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _events_key__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events/key */ "./_glue/lib/events/key.js");
/* harmony import */ var _responsivemonitor___WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../responsivemonitor/ */ "./_glue/lib/responsivemonitor/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./constants */ "./_glue/lib/header/constants.js");
/* harmony import */ var _deepnav___WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./deepnav/ */ "./_glue/lib/header/deepnav/index.js");
/* harmony import */ var _drawer___WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./drawer/ */ "./_glue/lib/header/drawer/index.js");
/* harmony import */ var _drawer_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./drawer/constants */ "./_glue/lib/header/drawer/constants.js");
/* harmony import */ var _siteswitcher___WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./siteswitcher/ */ "./_glue/lib/header/siteswitcher/index.js");
/* harmony import */ var _siteswitcher_constants__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./siteswitcher/constants */ "./_glue/lib/header/siteswitcher/constants.js");
/* harmony import */ var _steppednav___WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./steppednav/ */ "./_glue/lib/header/steppednav/index.js");














/**
 * Glue Header Component
 */
class Header extends _base___WEBPACK_IMPORTED_MODULE_0__.Component {
  constructor(root, headerOptions) {
    super(root);
    this.isAnimating = false;
    this.scrolling = false;
    this.lastPositionY = 0;
    this.atTopOfPage = true;
    this.allowTransitionEndEvent = false;
    this.isTransparent = false;
    /**
     * This flag needs to be set to true. This is needed to block a scroll event
     * on reload and adds box shadow to the header.
     */
    this.blockFalseScroll = true;
    /**
     * Handler for key down events
     */
    this.keydownHandler = (e) => {
      var _a, _b;
      const isEscape = e.key === _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.ESC;
      if (this.options.drawer) {
        if (((_a = this.drawer) === null || _a === void 0 ? void 0 :
                                                            _a.isOpen()) &&
            isEscape) {
          (_b = this.drawer) === null || _b === void 0 ? void 0 : _b.close();
        }
      }
    };
    /**
     * Handler for mouseover event. This will add an active class so we can put
     * the default header styles back for transparent header.
     */
    this.handleMouseOver = (e) => {
      if (this.root === e.target || this.containsElement(e)) {
        this.root.classList.add(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.ACTIVE);
      }
    };
    /**
     * Handler for mouseleave event. This will remove active class, this is used
     * only for the transparent header variation.
     */
    this.handleMouseLeave = (e) => {
      !this.root.matches(':focus-within') &&
          !this.activeBarElement.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.REWIND_SHADOW) &&
          this.root.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.ACTIVE);
    };
    /**
     * Handler for header focus event. This adds an acive class to the header
     * it's currently focused. We have to add a class due to the face that, the
     * peudo selector ':focus-within' doesn't work with :not(), this is a better
     * solution.
     */
    this.handleFocus = () => {
      if (this.root.matches(':focus-within')) {
        this.root.classList.add(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.ACTIVE);
      } else {
        !this.activeBarElement.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.REWIND_SHADOW) &&
            this.root.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.ACTIVE);
      }
    };
    /**
     * Handles focus within state. Used to reshow header for keyboard users are
     * trying to navigate back to the header
     */
    this.handleFocusWithin = () => {
      this.show();
    };
    if (!this.root.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.ROOT)) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_5__.Strings.MISSING_ROOT_ELEMENT);
    }
    this.options = Object.assign(
        {}, Header.defaultOptions, headerOptions, this.getOptions());
    // Set up breakpoints array for responsive monitor
    switch (this.options.breakpoint) {
      case 'md':
        this.breakpointsMobileNav = ['sm'];
        break;
      case 'lg':
        this.breakpointsMobileNav = ['sm', 'md'];
        break;
      case 'xl':
        this.breakpointsMobileNav = ['sm', 'md', 'lg'];
        break;
      default:  // unknown breakpoint value
        throw new Error(_constants__WEBPACK_IMPORTED_MODULE_5__.Strings.UNKNOWN_CUSTOM_BREAKPOINT);
    }
    this.initialize();
    this.initializeNavigationSubcomponents();
    this.responsiveMonitorInit();
  }
  /**
   * Default Header options.
   */
  static get defaultOptions() {
    return {
      breakpoint: 'lg',
      drawer: true,
      hideOnScroll: true,
      steppedNav: false,
    };
  }
  /**
   * Initialize Drawer and Bar
   */
  initialize() {
    var _a, _b;
    this.headerBar = this.getHeaderBarElement();
    this.headerBarMobile = this.getHeaderBarElement(true);
    this.activeBarElement = this.getActiveBarElement();
    if (this.options.drawer) {
      const drawerEl = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.DRAWER_EL}`);
      const linkBarEl = (_a = this.headerBar) === null || _a === void 0 ?
          void 0 :
          _a.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.LINK_BAR}`);
      // Throw exception if element is missing
      if (drawerEl === null) {
        throw new Error(_constants__WEBPACK_IMPORTED_MODULE_5__.Strings.MISSING_DRAWER_ELEMENT);
      } else if (linkBarEl === null) {
        throw new Error(_constants__WEBPACK_IMPORTED_MODULE_5__.Strings.MISSING_LINK_BAR_ELEMENT);
      }
      this.toggleBtnEl = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.TOGGLE_BTN}`);
      // Throw exception if element is missing
      if (this.toggleBtnEl === null) {
        throw new Error(_constants__WEBPACK_IMPORTED_MODULE_5__.Strings.MISSING_TOGGLE_BTN_ELEMENT);
      }
      this.drawer = new _drawer___WEBPACK_IMPORTED_MODULE_7__.Drawer(drawerEl, this.toggleBtnEl);
    } else {
      this.root.classList.add(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.NO_DRAWER);
    }
    this.setPositionStyle();
    this.setActiveBarPosition(this.headerBar.style.position);
    // Set required attributes
    // Add aria attrs
    this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_EXPANDED, `false`);
    // Bind handlers
    this.handleClick = (e) => {
      this.clickHandler(e);
    };
    this.handleKeydown = (e) => {
      this.keydownHandler(e);
    };
    this.handleScroll = () => {
      this.scrollThrottlerHandler();
    };
    this.handleDrawOpen = () => {
      this.handleDrawerOpenEvent();
    };
    this.handleDrawClose = () => {
      this.handleDrawerCloseEvent();
    };
    this.handleTransitionEnd = () => {
      this.handleTransitionEndEvent();
    };
    // Event listeners
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.handleClick);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleKeydown);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.FOCUS_IN, this.handleFocusWithin);
    // DRAWER
    this.options.drawer &&
        this.root.addEventListener(_drawer_constants__WEBPACK_IMPORTED_MODULE_8__.Strings.OPEN, this.handleDrawOpen);
    this.options.drawer &&
        this.root.addEventListener(_drawer_constants__WEBPACK_IMPORTED_MODULE_8__.Strings.CLOSE, this.handleDrawClose);
    window.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.SCROLL, this.handleScroll);
    this.headerBar.addEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TRANSITIONEND, this.handleTransitionEnd);
    this.headerBarMobile.addEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TRANSITIONEND, this.handleTransitionEnd);
    if (this.root.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.TRANSPARENT)) {
      this.isTransparent = true;
      this.root.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.DOUBLE) &&
          ((_b = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.ACTIVE_MENU} > a`)) ===
                       null ||
                   _b === void 0 ?
               void 0 :
               _b.appendChild(document.createElement('div')));
      this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEOVER, this.handleMouseOver);
      this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSELEAVE, this.handleMouseLeave);
      this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.FOCUS_IN, this.handleFocus);
      this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.FOCUS_OUT, this.handleFocus);
    }
    this.injectVersion();
  }
  injectVersion() {
    document.documentElement.dataset['glue'] = 'glue@28.2.0';
  }
  /**
   * Initialize SteppedNav, DeepNav and SiteSwitcher.
   */
  initializeNavigationSubcomponents() {
    // Init the popovers for deep nav and site switcher if present.
    const siteSwitcherElem =
        this.root.querySelector(`.${_siteswitcher_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.COMPONENT}`);
    if (siteSwitcherElem) {
      this.siteSwitcher = new _siteswitcher___WEBPACK_IMPORTED_MODULE_9__.SiteSwitcher(siteSwitcherElem);
    }
    const menuBar = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.DEEP_NAV}`);
    if (menuBar) {
      this.deepNav = new _deepnav___WEBPACK_IMPORTED_MODULE_6__.Menubar(menuBar);
    }
    // Init the Stepped Nav if the option is on and the element is present.
    if (this.options.steppedNav) {
      const steppedNavElem = _steppednav___WEBPACK_IMPORTED_MODULE_11__.SteppedNav.getSteppedNavElement(this.root);
      if (steppedNavElem) {
        this.root.classList.add(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.STEPPED_NAV_ENABLE);
        // If there is a failure to init the stepped nav, just fail back to
        // the standard nav.
        try {
          this.steppedNav = new _steppednav___WEBPACK_IMPORTED_MODULE_11__.SteppedNav(steppedNavElem);
        } catch (error) {
          this.root.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.STEPPED_NAV_ENABLE);
          throw error;
        }
      }
    }
  }
  destroy() {
    var _a, _b, _c;
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.handleClick);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleKeydown);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.FOCUS_IN, this.handleFocusWithin);
    this.headerBar.removeEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TRANSITIONEND, this.handleTransitionEnd);
    this.headerBarMobile.removeEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TRANSITIONEND, this.handleTransitionEnd);
    window.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.SCROLL, this.handleScroll);
    // Cancel the animation frame
    window.cancelAnimationFrame(this.animationsFrameId);
    this.rm.unlisten((size) => {
      if (this.breakpointsMobileNav.includes(size)) {
        this.setActiveBarPosition();
      }
    });
    this.rm.destroy();
    if (this.options.drawer) {
      this.root.removeEventListener(_drawer_constants__WEBPACK_IMPORTED_MODULE_8__.Strings.OPEN, this.handleDrawOpen);
      this.root.removeEventListener(_drawer_constants__WEBPACK_IMPORTED_MODULE_8__.Strings.CLOSE, this.handleDrawClose);
      (_a = this.drawer) === null || _a === void 0 ? void 0 : _a.destroy();
    }
    (_b = this.siteSwitcher) === null || _b === void 0 ? void 0 : _b.destroy();
    (_c = this.deepNav) === null || _c === void 0 ? void 0 : _c.destroy();
    if (this.steppedNav) this.steppedNav.destroy();
    if (this.root.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.TRANSPARENT)) {
      this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEOVER, this.handleMouseOver);
      this.root.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSELEAVE, this.handleMouseLeave);
      this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.FOCUS_IN, this.handleFocus);
      this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.FOCUS_OUT, this.handleFocus);
    }
  }
  /**
   * Get the options passed or returns the default options
   */
  getOptions() {
    const options = {};
    for (const option of Object.keys(Header.defaultOptions)) {
      const attr =
          `glueHeader${option.toUpperCase().slice(0, 1)}${option.slice(1)}`;
      if (this.root.dataset[attr] === 'true' ||
          this.root.dataset[attr] === 'false') {
        options[option] = this.root.dataset[attr] === 'true';
      } else {
        if (this.root.dataset[attr]) {
          options[option] = this.root.dataset[attr];
        }
      }
    }
    return options;
  }
  /**
   * Handles the event delegation for the click handlers on the root element.
   */
  clickHandler(e) {
    var _a, _b, _c, _d, _e, _f;
    if (this.options.drawer) {
      if ((_a = this.drawer) === null || _a === void 0 ? void 0 : _a.isOpen()) {
        if (!((_b = this.drawer) === null || _b === void 0 ?
                  void 0 :
                  _b.containsElement(e))) {
          (_c = this.drawer) === null || _c === void 0 ? void 0 : _c.close();
        } else if (
            (_d = this.drawer) === null || _d === void 0 ? void 0 :
                                                           _d.isCtaElement(e)) {
          (_e = this.drawer) === null || _e === void 0 ? void 0 : _e.close();
        }
      } else {
        if (this.toggleBtnEl.contains(e.target)) {
          (_f = this.drawer) === null || _f === void 0 ? void 0 : _f.open();
        }
      }
    }
  }
  /**
   * Checks to see if the event target is a child of the root element.
   */
  containsElement(event) {
    return event.target instanceof Node && this.root.contains(event.target);
  }
  /**
   * This is to throttle the scrolling logic with window.requestAnimationFrame.
   * this is also using a requestAnimationFrame to help with performance.
   */
  scrollThrottlerHandler() {
    if (!this.scrolling) {
      this.animationsFrameId = window.requestAnimationFrame(() => {
        this.scrollHandler();
        this.scrolling = false;
      });
      this.scrolling = true;
    }
  }
  /**
   * Called via window.requestAnimationFrame, this helps check state
   * in a more accurate way and helps avoid getting lock in an incorrect
   * position.
   */
  scrollHandler() {
    const hasScrolledClass =
        this.activeBarElement.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.WHOLLY_SCROLLED);
    // Get the direction
    const direction = this.getScrollDirection();
    // Need to set a threshold to avoid browser elastic scrolling triggering
    // nav hide
    const nearBottom =
        document.body.clientHeight - window.scrollY - window.innerHeight <=
        _constants__WEBPACK_IMPORTED_MODULE_5__.Numbers.SCROLL_THRESHOLD;
    const scrollingDown = direction === _constants__WEBPACK_IMPORTED_MODULE_5__.Strings.SCROLL_DOWN;
    const scrollingUp = direction === _constants__WEBPACK_IMPORTED_MODULE_5__.Strings.SCROLL_UP;
    // Will hide the nav once it haves the scroll class and scrolling down
    if (!this.atTopOfPage && scrollingDown && !hasScrolledClass &&
        !this.isAnimating) {
      // Hide the nav after scrolling down to pass the nav element.
      if (window.scrollY > this.activeBarElement.clientHeight) {
        this.hide();
      }
      // This is for scrolling up and not at the top of the page. We also block
      // the elastic recoil causing a scroll up to fire.
    } else if (
        !this.atTopOfPage && scrollingUp && hasScrolledClass &&
        !this.isAnimating && !nearBottom) {
      // This fix a bug in some mobile safari browsers. It randomly causes
      // this block to run while scrolling down
      if (this.lastPositionY - window.scrollY !== 0) {
        this.show();
      }
      // This is for preventing the nav from getting lock in a hidden state.
    } else if (this.atTopOfPage && !this.isAnimating && hasScrolledClass) {
      this.show();
    }
    this.atTopOfPage = window.scrollY <= 0;
    this.lastPositionY = window.scrollY;
    // There is still a bug where scroll events are incorrectly being fired. We
    // need to block this from causing rewind shadow being added
    this.blockFalseScroll = false;
    // Apply box shadow on header bar element.
    this.rewindBoxShadow();
    // This ensures that the position is correct when at the top of the page.
    // Because of fast resizing and scrolling the Nav gets stuck with the wrong
    // position.
    this.atTopOfPage && this.setActiveBarPosition();
    this.isTransparent && this.setTransparentActiveClass();
    // This is a fail-safe, last check to see if that state has changed whilst
    // animating. This is the main cause of header issues.
    if (this.isAnimating && window.scrollY <= _constants__WEBPACK_IMPORTED_MODULE_5__.Numbers.MAX_PAGE_OFFSET) {
      window.requestAnimationFrame(() => {
        this.scrollThrottlerHandler();
      });
    }
  }
  /**
   * Need to reset the position of the desktop header bar. This needs to be
   * reset to avoid issues with the drawer.
   */
  resetDesktopHeaderPosition() {
    const {display} = window.getComputedStyle(this.headerBarMobile);
    // Reset drawer
    if (display === 'block') {
      this.headerBar.style.top = '0';
      this.headerBar.style.position = 'fixed';
    } else {
      this.headerBar.style.position = 'static';
    }
  }
  /**
   * Set initial headerBar position style based on the scroll position.
   */
  setPositionStyle() {
    if (window.scrollY > this.activeBarElement.clientHeight) {
      this.headerBar.style.position = 'fixed';
    } else {
      this.headerBar.style.position = 'static';
    }
  }
  /**
   * The active class adds the normal styles back to the header, which is
   * anytime the header is not at the top of the page. So when the @root element
   * has position set to 'static' and atthe top of the page is the only time it
   * will be transparent.
   */
  setTransparentActiveClass() {
    if (window.scrollY > this.activeBarElement.clientHeight) {
      this.root.classList.add(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.ACTIVE);
    } else {
      !this.root.matches(':focus-within') &&
          this.root.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.ACTIVE);
    }
  }
  /**
   * Update the position of the active header element, needed for animation.
   * position should be 'static' at the top of the page and 'fixed' once
   * scrolled
   * @param pos position to be set on the active bar element
   */
  setActiveBarPosition(pos = 'static') {
    if (!this.options.hideOnScroll) {
      pos = 'fixed';
    }
    const activeEl = this.activeBarElement;
    const {display} = window.getComputedStyle(this.headerBarMobile);
    display === 'block' && this.resetDesktopHeaderPosition();
    if (pos === 'static') {
      activeEl.style.top = `-${activeEl.clientHeight}px`;
    } else {
      setTimeout(() => {
        activeEl.style.top = (0).toString();
      }, _constants__WEBPACK_IMPORTED_MODULE_5__.Numbers.POSITION_CHANGE_BUFFER);
    }
    activeEl.style.position = pos;
  }
  /**
   * Check if root has the correct child element, which is required for
   * animations. There are two bar elements for desktop and mobile
   */
  getHeaderBarElement(isMobile = false) {
    const filterByStr =
        isMobile ? _constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.BAR_MOBILE : _constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.BAR_DESKTOP;
    const headerBarEl =
        Array.from(this.root.querySelectorAll(`.${_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.BAR}`))
            .filter((item) => item.classList.contains(filterByStr));
    if (!headerBarEl) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_5__.Strings.MISSING_HEADER_BAR_ELEMENT);
    }
    return headerBarEl[0];
  }
  /**
   * Some classes need to be removed form the DOM when the close event is
   * emitted from the Drawer component
   */
  handleDrawerCloseEvent() {
    this.root.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.DRAWER_IS_SHOWN);
    this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_EXPANDED, 'false');
  }
  /**
   * Some classes need to be added to the DOM when the open event is emitted
   * from the drawer component
   */
  handleDrawerOpenEvent() {
    this.root.classList.add(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.DRAWER_IS_SHOWN);
    this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_EXPANDED, 'true');
  }
  /**
   * This method will take care of any logic that needs to run after the CSS
   * transition has ended
   */
  handleTransitionEndEvent() {
    if (this.allowTransitionEndEvent) {
      this.isAnimating = false;
      this.allowTransitionEndEvent = false;
      this.activeBarElement.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.IS_ANIMATING);
    }
  }
  /**
   * The drawer needs to be closed if the window is resized to desktop and
   * drawer is left open
   */
  responsiveMonitorInit() {
    this.rm = new _responsivemonitor___WEBPACK_IMPORTED_MODULE_4__.ResponsiveMonitor({
      breakpoint: this.breakpointsMobileNav,
      enter: () => {
        var _a, _b, _c;
        this.activeBarElement = this.getActiveBarElement();
        this.setActiveBarPosition();
        (_a = this.drawer) === null || _a === void 0 ? void 0 :
                                                       _a.setAriaHidden();
        (_b = this.siteSwitcher) === null || _b === void 0 ? void 0 :
                                                             _b.destroy();
        (_c = this.deepNav) === null || _c === void 0 ? void 0 : _c.destroy();
      },
      leave: () => {
        var _a, _b, _c, _d, _e;
        if (this.options.drawer &&
            ((_a = this.drawer) === null || _a === void 0 ? void 0 :
                                                            _a.isOpen())) {
          (_b = this.drawer) === null || _b === void 0 ? void 0 : _b.close();
        }
        (_c = this.drawer) === null || _c === void 0 ? void 0 :
                                                       _c.removeAriaHidden();
        this.activeBarElement = this.getActiveBarElement();
        this.setActiveBarPosition();
        (_d = this.siteSwitcher) === null || _d === void 0 ? void 0 : _d.init();
        (_e = this.deepNav) === null || _e === void 0 ? void 0 : _e.init();
      },
    });
    // RM needs to trigger on resize, not just on enter.
    this.rm.listen((size) => {
      if (this.breakpointsMobileNav.includes(size)) {
        this.setActiveBarPosition();
      }
    });
  }
  /**
   * Get scroll direction
   */
  getScrollDirection() {
    return this.lastPositionY >= window.scrollY ? _constants__WEBPACK_IMPORTED_MODULE_5__.Strings.SCROLL_UP :
                                                  _constants__WEBPACK_IMPORTED_MODULE_5__.Strings.SCROLL_DOWN;
  }
  /**
   * Will hide the nav and add the animation class.
   */
  hide() {
    if (!this.options.hideOnScroll) return;
    this.isAnimating = true;
    this.allowTransitionEndEvent = true;
    this.activeBarElement.classList.add(
        _constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.WHOLLY_SCROLLED, _constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.IS_ANIMATING);
    this.setActiveBarPosition('fixed');
    this.emit(_constants__WEBPACK_IMPORTED_MODULE_5__.Strings.HIDE_EVENT, {});
  }
  /**
   * Will show the nav and add the animation class. Will also remove the
   * scroll class
   */
  show() {
    if (!this.options.hideOnScroll) return;
    this.isAnimating = true;
    this.allowTransitionEndEvent = true;
    // Add animation class to header-bar elements
    this.activeBarElement.classList.add(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.IS_ANIMATING);
    // Remove Scrolled class to header-bar elements
    this.activeBarElement.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.WHOLLY_SCROLLED);
    this.emit(_constants__WEBPACK_IMPORTED_MODULE_5__.Strings.SHOW_EVENT, {});
  }
  /**
   * On rewind add the box shadow class but remove it once you reach the top of
   * the page
   */
  rewindBoxShadow() {
    if (this.atTopOfPage) {
      this.activeBarElement.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.REWIND_SHADOW);
    } else if (
        !this.atTopOfPage && !this.isAnimating && !this.blockFalseScroll) {
      // Header must but out of view before adding box shadow
      if (window.scrollY > this.activeBarElement.clientHeight) {
        this.activeBarElement.classList.add(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.REWIND_SHADOW);
      }
    }
  }
  /**
   * Checks to see if Mobile navbar is visible. This will be set in init method
   * and again with @type {ResponsiveMonitor}
   */
  getActiveBarElement() {
    const {display} = window.getComputedStyle(this.headerBarMobile);
    return display === 'block' ? this.headerBarMobile : this.headerBar;
  }
}



/***/ }),

/***/ "./_glue/lib/header/popupmenu/constants.js":
/*!*************************************************!*\
  !*** ./_glue/lib/header/popupmenu/constants.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CssClasses: () => (/* binding */ CssClasses),
/* harmony export */   Strings: () => (/* binding */ Strings)
/* harmony export */ });
var CssClasses;
(function(CssClasses) {
CssClasses['MENU_OPEN'] = 'glue-header__menu--open';
})(CssClasses || (CssClasses = {}));
var Strings;
(function(Strings) {
Strings['NO_CHILDREN'] =
    'PopupMenu constructor argument el has no element children.';
})(Strings || (Strings = {}));



/***/ }),

/***/ "./_glue/lib/header/popupmenu/index.js":
/*!*********************************************!*\
  !*** ./_glue/lib/header/popupmenu/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PopupMenu: () => (/* binding */ PopupMenu)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _math_coordinate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../math/coordinate */ "./_glue/lib/math/coordinate.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants */ "./_glue/lib/header/constants.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./constants */ "./_glue/lib/header/popupmenu/constants.js");
/* harmony import */ var _menuitem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./menuitem */ "./_glue/lib/header/popupmenu/menuitem.js");









/**
 * This class creates a PopupMenu instance, which uses a controller to
 * show and hide the menu.
 */
class PopupMenu extends _base__WEBPACK_IMPORTED_MODULE_0__.Component {
  constructor(root, controller) {
    super(root);
    this.menuItemCollection = [];
    this.firstChars = [];
    this.firstItem = null;
    this.lastItem = null;
    this.hasFocus = false;
    this.hasHover = false;
    /**
     * Sets hasHover to true when the menu is hovered.
     */
    this.handleMouseenter = () => {
      this.hasHover = true;
    };
    /**
     * Waits for 300 mills to close the menu after moving mouse out of the menu.
     */
    this.handleMouseleave = (event) => {
      this.hasHover = false;
      const mousePos = new _math_coordinate__WEBPACK_IMPORTED_MODULE_3__.Coordinate(event.clientX, event.clientY);
      if (this.isInController(mousePos)) return;
      setTimeout(() => {
        this.close(false);
      }, 300);
    };
    /**
     * Sets focus to the item based on the first key that users press.
     */
    this.setFocusByFirstCharacter = (currentItem, char) => {
      char = char.toLowerCase();
      // Gets the search start point.
      let start = this.menuItemCollection.indexOf(currentItem) + 1;
      if (start === this.menuItemCollection.length) {
        start = 0;
      }
      const findIndexFunc = (item, index) => {
        return item === char && index >= start;
      };
      let index = this.firstChars.findIndex(findIndexFunc);
      if (index === -1) {
        start = 0;
        index = this.firstChars.findIndex(findIndexFunc);
      }
      if (index > -1) {
        this.menuItemCollection[index].root.focus();
      }
    };
    this.open = () => {
      this.root.classList.add(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.MENU_OPEN);
      this.controller.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_EXPANDED, 'true');
      this.controller.setExpanded(true);
    };
    if (this.root.childElementCount === 0) {
      throw new Error(`${_constants__WEBPACK_IMPORTED_MODULE_5__.Strings.NO_CHILDREN}`);
    }
    this.menuItems = Array.from(
        this.root.querySelectorAll(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.LIST_ITEM}`));
    this.controller = controller;
    this.init();
  }
  init() {
    let menuItem;
    this.root.tabIndex = -1;
    this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.MENU);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEENTER, this.handleMouseenter);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSELEAVE, this.handleMouseleave);
    for (const item of this.menuItems) {
      item.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.NONE);
    }
    const menuLinks = Array.from(this.root.querySelectorAll(
        `:scope > .glue-header__item > .glue-header__link`));
    // Initiates the popup menu attached to the menu item
    for (const link of menuLinks) {
      menuItem = new _menuitem__WEBPACK_IMPORTED_MODULE_6__.MenuItem(link, this);
      const nextElement = menuItem.root.nextElementSibling;
      if (nextElement instanceof HTMLUListElement) {
        menuItem.popupMenu = new PopupMenu(nextElement, menuItem);
      }
      this.menuItemCollection.push(menuItem);
      this.addFirstChar(link);
    }
    // Sets the first and last item in the menu.
    const numItems = this.menuItemCollection.length;
    if (numItems > 0) {
      this.firstItem = this.menuItemCollection[0];
      this.lastItem = this.menuItemCollection[numItems - 1];
    }
  }
  destroy() {
    var _a;
    this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE);
    this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.TAB_INDEX);
    for (const item of this.menuItems) {
      item.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE);
    }
    for (const menuItem of this.menuItemCollection) {
      (_a = menuItem.popupMenu) === null || _a === void 0 ? void 0 :
                                                            _a.destroy();
      menuItem.destroy();
    }
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEENTER, this.handleMouseenter);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSELEAVE, this.handleMouseleave);
  }
  /**
   * Add first charector of each link text to the collection.
   */
  addFirstChar(link) {
    var _a;
    const textContent = (_a = link.textContent) === null || _a === void 0 ?
        void 0 :
        _a.trim().charAt(0).toLowerCase();
    this.firstChars.push(
        textContent !== null && textContent !== void 0 ? textContent : '');
  }
  /**
   * Checks whether the cursor is in the controller area,
   */
  isInController(mousePos) {
    const rect = this.controller.root.getBoundingClientRect();
    return (
        mousePos.x >= rect.left && mousePos.x <= rect.right &&
        mousePos.y >= rect.top && mousePos.y <= rect.bottom);
  }
  /** Assert this is a MenuItem */
  isMenuItem(controller) {
    return controller.parentMenu !== null && controller.isMenubarItem === false;
  }
  /**
   * Sets focus to the menubar item.
   * Looks for the parent node if the current node is a menu item.
   */
  setFocusToMenubarItem(controller) {
    while (controller) {
      if (controller.isMenubarItem) {
        controller.root.focus();
        return controller;
      } else if (this.isMenuItem(controller)) {
        controller.parentMenu.hasFocus = false;
        controller = controller.parentMenu.controller;
      }
    }
    return null;
  }
  /**
   * Sets focus to the controller depending on the keys.
   * Sets focus to the controller element if no argument is passed.
   * Sets focus to the next or previous menubar item when command is passed.
   */
  setFocusToController(command) {
    var _a, _b, _c, _d, _e;
    if (command === undefined) {
      (_b = (_a = this.controller) === null || _a === void 0 ?
           void 0 :
           _a.root) === null ||
              _b === void 0 ?
          void 0 :
          _b.focus();
      return;
    }
    // If the controller is a menuBar item, set focus to the previous
    // or next menuBar item.
    if (this.controller.isMenubarItem) {
      if (command === 'previous') {
        (_c = this.controller.parentMenu) === null || _c === void 0 ?
            void 0 :
            _c.setFocusToPreviousItem(this.controller);
      } else if (command === 'next') {
        (_d = this.controller.parentMenu) === null || _d === void 0 ?
            void 0 :
            _d.setFocusToNextItem(this.controller);
      }
      // If the controller is a popup menu item, set the focus to its
      // controller. If the command is next, set the focus to the next menubar
      // item.
    } else {
      this.controller.root.focus();
      this.close();
      if (command === 'next') {
        const menubarItem = this.setFocusToMenubarItem(this.controller);
        (_e = menubarItem === null || menubarItem === void 0 ?
             void 0 :
             menubarItem.parentMenu) === null ||
                _e === void 0 ?
            void 0 :
            _e.setFocusToNextItem(menubarItem);
      }
    }
  }
  setFocusToFirstItem() {
    var _a;
    (_a = this.firstItem) === null || _a === void 0 ? void 0 : _a.root.focus();
  }
  setFocusToLastItem() {
    var _a;
    (_a = this.lastItem) === null || _a === void 0 ? void 0 : _a.root.focus();
  }
  setFocusToPreviousItem(currentItem) {
    var _a;
    if (currentItem === this.firstItem) {
      (_a = this.lastItem) === null || _a === void 0 ? void 0 : _a.root.focus();
    } else {
      const index = this.menuItemCollection.indexOf(currentItem);
      this.menuItemCollection[index - 1].root.focus();
    }
  }
  setFocusToNextItem(currentItem) {
    var _a;
    if (currentItem === this.lastItem) {
      (_a = this.firstItem) === null || _a === void 0 ? void 0 :
                                                        _a.root.focus();
    } else {
      const index = this.menuItemCollection.indexOf(currentItem);
      this.menuItemCollection[index + 1].root.focus();
    }
  }
  /**
   * Closes the menu only when:
   *  - A true force flag is passed in.
   *  - The menu or its chlid menus do not have focus, and the menu does not
   *    have hover, and when its controller is a menubar item, it is not
   *    hovered.
   */
  close(force = false) {
    var _a;
    // True if the controller is a menubar item and it is hovered.
    let controllerHasHover = false;
    // True when this popup menu or any child popup menu is focused.
    let hasFocus = this.hasFocus;
    // Updates controllerHasHover flag for the menubar item.
    if (this.controller.isMenubarItem) {
      controllerHasHover = this.controller.hasHover;
    }
    if (!hasFocus) {
      for (const item of this.menuItemCollection) {
        hasFocus = hasFocus ||
            !!((_a = item.popupMenu) === null || _a === void 0 ? void 0 :
                                                                 _a.hasFocus);
      }
    }
    if (force || (!hasFocus && !this.hasHover && !controllerHasHover)) {
      this.root.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.MENU_OPEN);
      this.controller.setExpanded(false);
    }
  }
}



/***/ }),

/***/ "./_glue/lib/header/popupmenu/menuitem.js":
/*!************************************************!*\
  !*** ./_glue/lib/header/popupmenu/menuitem.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MenuItem: () => (/* binding */ MenuItem)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _events_key__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../events/key */ "./_glue/lib/events/key.js");




/**
 * This class creates a child menu item component in a menu.
 * This menu item may/not control a popup menu.
 */
class MenuItem extends _base__WEBPACK_IMPORTED_MODULE_0__.Component {
  constructor(root, parentMenu) {
    super(root);
    this.parentMenu = parentMenu;
    this.isMenubarItem = false;
    /** The  popopMenu is the menu controlled by the menu item. */
    this.popupMenu = null;
    /**
     * Handles keydown event on the menu item.
     *
     */
    this.handleKeydown = (event) => {
      let preventDefault = false;
      const char = event.key;
      function isPrintableCharacter(str) {
        return str.length === 1 && str.match(/\S/);
      }
      switch (event.key) {
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.SPACE:
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.ENTER:
          if (this.popupMenu) {
            this.popupMenu.open();
            this.popupMenu.setFocusToFirstItem();
          }
          // Allows default behavior so it can trigger links.
          preventDefault = false;
          break;
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.UP:
          this.parentMenu.setFocusToPreviousItem(this);
          preventDefault = true;
          break;
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.DOWN:
          this.parentMenu.setFocusToNextItem(this);
          preventDefault = true;
          break;
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.LEFT:
          // Returns if the controller does not have a parent menu
          if (this.controllerWithoutParentMenu(this.parentMenu.controller)) {
            return;
          }
          this.parentMenu.setFocusToController('previous');
          this.parentMenu.close(true);
          preventDefault = true;
          break;
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.RIGHT:
          // Returns if the controller does not have a parent menu
          if (this.controllerWithoutParentMenu(this.parentMenu.controller)) {
            return;
          }
          if (this.popupMenu) {
            this.popupMenu.open();
            this.popupMenu.setFocusToFirstItem();
          } else {
            this.parentMenu.setFocusToController('next');
            this.parentMenu.close(true);
          }
          preventDefault = true;
          break;
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.HOME:
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.PAGEUP:
          this.parentMenu.setFocusToFirstItem();
          preventDefault = true;
          break;
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.END:
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.PAGEDOWN:
          this.parentMenu.setFocusToLastItem();
          preventDefault = true;
          break;
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.ESC:
          this.parentMenu.setFocusToController();
          this.parentMenu.close(true);
          preventDefault = true;
          break;
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.TAB:
          this.parentMenu.setFocusToController();
          this.parentMenu.close(true);
          break;
        default:
          if (isPrintableCharacter(char)) {
            this.parentMenu.setFocusByFirstCharacter(this, char);
            preventDefault = true;
          }
          break;
      }
      if (preventDefault) {
        event.stopPropagation();
        event.preventDefault();
      }
    };
    this.handleClick = () => {
      this.parentMenu.setFocusToController();
      this.parentMenu.close(true);
    };
    this.handleFocus = () => {
      this.parentMenu.hasFocus = true;
    };
    this.handleBlur = () => {
      this.parentMenu.hasFocus = false;
      setTimeout(() => {
        this.parentMenu.close(false);
      }, 300);
    };
    this.handleMouseenter = () => {
      var _a;
      this.parentMenu.hasHover = true;
      this.parentMenu.open();
      if (this.popupMenu) {
        this.popupMenu.hasHover = true;
      }
      (_a = this.popupMenu) === null || _a === void 0 ? void 0 : _a.open();
    };
    this.handleMouseleave = () => {
      var _a;
      if (this.popupMenu) {
        this.popupMenu.hasHover = false;
      }
      (_a = this.popupMenu) === null || _a === void 0 ? void 0 : _a.close(true);
    };
    this.init();
  }
  init() {
    this.root.tabIndex = -1;
    if (!this.root.getAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE)) {
      this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.MENUITEM);
    }
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleKeydown);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.handleClick);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.FOCUS, this.handleFocus);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.BLUR, this.handleBlur);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEENTER, this.handleMouseenter);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSELEAVE, this.handleMouseleave);
  }
  destroy() {
    this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE);
    this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.TAB_INDEX);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleKeydown);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.handleClick);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.FOCUS, this.handleFocus);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.BLUR, this.handleBlur);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEENTER, this.handleMouseenter);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSELEAVE, this.handleMouseleave);
  }
  /** Assert this is a MenuItem */
  controllerWithoutParentMenu(controller) {
    return controller.parentMenu === null;
  }
  setExpanded(flag) {
    if (flag) {
      this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_EXPANDED, 'true');
    } else {
      this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_EXPANDED, 'false');
    }
  }
}



/***/ }),

/***/ "./_glue/lib/header/siteswitcher/constants.js":
/*!****************************************************!*\
  !*** ./_glue/lib/header/siteswitcher/constants.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CssClasses: () => (/* binding */ CssClasses),
/* harmony export */   Strings: () => (/* binding */ Strings)
/* harmony export */ });
var CssClasses;
(function(CssClasses) {
CssClasses['COMPONENT'] = 'glue-header__site-switcher';
CssClasses['MENU'] = 'glue-header__site-switcher-menu';
CssClasses['MENU_ITEM'] = 'glue-header__item';
CssClasses['MENU_LINK'] = 'glue-header__link';
CssClasses['MENU_ITEM_DESCRIPTION'] =
    'glue-header__site-switcher-item-description';
CssClasses['MORE_PRODUCTS'] = 'glue-header__site-switcher-more-products';
})(CssClasses || (CssClasses = {}));
var Strings;
(function(Strings) {
Strings['NO_ARIA_CONTROL'] =
    'aria-control value is not set on the site switcher element.';
Strings['NO_MENU'] = 'Header Site Switcher could not find a menu element.';
})(Strings || (Strings = {}));



/***/ }),

/***/ "./_glue/lib/header/siteswitcher/index.js":
/*!************************************************!*\
  !*** ./_glue/lib/header/siteswitcher/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SiteSwitcher: () => (/* binding */ SiteSwitcher)
/* harmony export */ });
/* harmony import */ var _base___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base/ */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _events_key__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../events/key */ "./_glue/lib/events/key.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants */ "./_glue/lib/header/constants.js");
/* harmony import */ var _drawer_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../drawer/constants */ "./_glue/lib/header/drawer/constants.js");
/* harmony import */ var _popupmenu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../popupmenu */ "./_glue/lib/header/popupmenu/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./constants */ "./_glue/lib/header/siteswitcher/constants.js");










/**
 * This class creates a Site Switcher instance, it is triggered to show
 * a list of micro sites options.
 */
class SiteSwitcher extends _base___WEBPACK_IMPORTED_MODULE_0__.Component {
  constructor(root) {
    super(root);
    this.parentMenu = null;
    /** A flag to show the switcher's focus status. */
    this.hasFocus = false;
    /** A flag to show switcher's hover status. */
    this.hasHover = false;
    /**
     * A flag to indicate whether this element is a menubar item. Both the
     * menubar item and site switcher can be dropdown trigger.
     */
    this.isMenubarItem = false;
    /**
     * Handles keydown events.
     * When press the Space, Enter or Down keys, open the popup menu and focus
     * to the first item. When press the Up key, open the popup menu and focus
     * to the last item.
     */
    this.handleKeydown = (event) => {
      let flag = false;
      switch (event.key) {
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.SPACE:
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.ENTER:
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.DOWN:
          this.popupMenu.open();
          this.popupMenu.setFocusToFirstItem();
          flag = true;
          break;
        case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.UP:
          this.popupMenu.open();
          this.popupMenu.setFocusToLastItem();
          flag = true;
          break;
        default:
          break;
      }
      if (flag) {
        event.stopPropagation();
        event.preventDefault();
      }
    };
    /**
     * Handles the click event.
     * Toggles the menu when users click the site switcher.
     */
    this.handleClick = () => {
      if (this.root.getAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_EXPANDED) === 'true') {
        this.popupMenu.close(true);
      } else {
        this.popupMenu.open();
        this.popupMenu.setFocusToFirstItem();
      }
    };
    /**
     * Sets hasFocus to true when the switcher is focused.
     */
    this.handleFocus = () => {
      this.popupMenu.hasFocus = true;
    };
    /**
     * Sets hasFocus to false when the switcher is blurred.
     */
    this.handleBlur = () => {
      this.popupMenu.hasFocus = false;
    };
    /**
     * Opens the menu and set hasHover to true when it is hovered.
     */
    this.handleMouseenter = (e) => {
      this.hasHover = true;
      this.popupMenu.open();
    };
    /**
     * Waits for 300 mills to close the menu after moving mouse out of the
     * switcher.
     */
    this.handleMouseLeave = () => {
      this.hasHover = false;
      setTimeout(() => {
        this.popupMenu.close(false);
      }, 300);
    };
    if (!this.root.getAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_CONTROLS)) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_7__.Strings.NO_ARIA_CONTROL);
    }
    const menu = this.root.closest(`.${_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.BAR_DESKTOP}`)
                     .querySelector(
                         '#' + this.root.getAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_CONTROLS));
    if (!menu) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_7__.Strings.NO_MENU);
    }
    this.popupMenu = new _popupmenu__WEBPACK_IMPORTED_MODULE_6__.PopupMenu(menu, this);
    this.init();
  }
  init() {
    this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HASPOPUP, 'true');
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleKeydown);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.handleClick);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.FOCUS, this.handleFocus);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.BLUR, this.handleBlur);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEENTER, this.handleMouseenter);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSELEAVE, this.handleMouseLeave);
    this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.BUTTON);
    this.root.tabIndex = 0;
    const drawer = this.root.closest(`.${_drawer_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.ROOT}`);
    drawer === null || drawer === void 0 ?
        void 0 :
        drawer.addEventListener(_drawer_constants__WEBPACK_IMPORTED_MODULE_5__.Strings.OPEN, () => {
          for (const link of this.popupMenu.menuItemCollection) {
            link.destroy();
          }
        });
    drawer === null || drawer === void 0 ?
        void 0 :
        drawer.addEventListener(_drawer_constants__WEBPACK_IMPORTED_MODULE_5__.Strings.CLOSE, () => {
          for (const link of this.popupMenu.menuItemCollection) {
            link.init();
          }
        });
  }
  destroy() {
    this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HASPOPUP);
    this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE);
    this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.TAB_INDEX);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleKeydown);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.handleClick);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.FOCUS, this.handleFocus);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.BLUR, this.handleBlur);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSEENTER, this.handleMouseenter);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.MOUSELEAVE, this.handleMouseLeave);
  }
  /** Sets the expanded attribute when the menu is open. */
  setExpanded(flag) {
    this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_EXPANDED, flag.toString());
  }
}



/***/ }),

/***/ "./_glue/lib/header/steppednav/constants.js":
/*!**************************************************!*\
  !*** ./_glue/lib/header/steppednav/constants.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Attributes: () => (/* binding */ Attributes),
/* harmony export */   CssClasses: () => (/* binding */ CssClasses),
/* harmony export */   Strings: () => (/* binding */ Strings)
/* harmony export */ });
var CssClasses;
(function(CssClasses) {
CssClasses['ROOT'] = 'glue-header__stepped-nav';
CssClasses['CONTROLS_CONTAINER'] =
    'glue-header__stepped-nav-controls-container';
CssClasses['CONTROLS'] = 'glue-header__stepped-nav-controls';
CssClasses['CONTROLS_ARROW'] = 'glue-header__stepped-nav-controls-arrow';
CssClasses['CONTROLS_TITLE'] = 'glue-header__stepped-nav-controls-title';
CssClasses['MENU_CONTAINER'] = 'glue-header__stepped-nav-menus';
CssClasses['SUBNAV_ICON'] = 'glue-header__stepped-nav-subnav-icon';
CssClasses['PARENT_POSITION'] = 'glue-header__stepped-nav-parent-position';
CssClasses['PAGE'] = 'glue-stepped-page';
CssClasses['PAGES'] = 'glue-stepped-pages';
})(CssClasses || (CssClasses = {}));
var Attributes;
(function(Attributes) {
Attributes['PARENT_INDEX'] = 'data-glue-stepped-nav-parent-index';
Attributes['PARENT_INDEX_CAMEL'] = 'glueSteppedNavParentIndex';
Attributes['STEPPED_PAGE'] = 'data-glue-stepped-page';
Attributes['STEPPED_PAGE_CAMEL'] = 'glueSteppedPage';
Attributes['STEPPEDNAV_LABEL'] = 'glueSteppednavLabel';
})(Attributes || (Attributes = {}));
var Strings;
(function(Strings) {
Strings['CURRENT_PAGE'] = 'currentPage';
Strings['TOTAL_PAGES'] = 'totalPages';
Strings['NEXT_EVENT'] = 'nextPage';
Strings['CONTROLS_MODEL_ID'] = 'stepped-nav-controls';
Strings['MISSING_CONTROLS'] =
    'Some of the Stepped Nav controls elements are missing.';
Strings['MISSING_PAGES_CONT'] =
    'The container element for Stepped Nav Pages is missing.';
Strings['MISSING_LINK_BAR'] =
    'Stepped Nav can\'t find the Link Bar Header element.';
Strings['STEPPED_PAGE'] = 'glue-stepped-page';
Strings['STEPPED_NAV_LABEL_VAR_NAME'] = '$glue_steppednav_label$';
Strings['STEPPEDNAV_LABEL'] =
    '$glue_steppednav_label$, Navigate back to parent menu, $glue_steppednav_label$ opened';
})(Strings || (Strings = {}));



/***/ }),

/***/ "./_glue/lib/header/steppednav/index.js":
/*!**********************************************!*\
  !*** ./_glue/lib/header/steppednav/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SteppedNav: () => (/* binding */ SteppedNav)
/* harmony export */ });
/* harmony import */ var _base___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base/ */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _events_key__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../events/key */ "./_glue/lib/events/key.js");
/* harmony import */ var _observer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../observer */ "./_glue/lib/observer/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../constants */ "./_glue/lib/header/constants.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./constants */ "./_glue/lib/header/steppednav/constants.js");
/* harmony import */ var _pages__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./pages */ "./_glue/lib/header/steppednav/pages.js");










class SteppedNav extends _base___WEBPACK_IMPORTED_MODULE_0__.Component {
  /**
   * Get the element for the Stepped Nav. Useful in detemining if the
   * element is present.
   * @param root The element in which to look.
   * @return A stepped nav root element if present.
   */
  static getSteppedNavElement(root) {
    return root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.ROOT}`);
  }
  constructor(root) {
    super(root);
    this.activeInitPageIndex = 1;
    this.modelDefaults = {
      currentPage: 1,
      totalPages: 0,
    };
    this.handleKeyPress = (evt) => {
      this.keyPress(evt);
    };
    this.handleClick = (evt) => {
      var _a;
      if (evt.target instanceof Element) this.selectPage(evt.target);
      // When the user clicks on a link that is a pointer to anther page, do not
      // follow the link href.
      if (evt.target instanceof HTMLAnchorElement &&
          ((_a = evt.target.parentElement) === null || _a === void 0 ?
               void 0 :
               _a.hasAttribute(_constants__WEBPACK_IMPORTED_MODULE_6__.Attributes.STEPPED_PAGE))) {
        evt.preventDefault();
      }
    };
    this.updateHandler = () => {
      // Set the active element to the container so event listeners will pick
      // up events.
      this.root.focus();
    };
    // Set up the data model.
    this.observer = new _observer__WEBPACK_IMPORTED_MODULE_4__.Observer(Object.assign({}, this.modelDefaults));
    this.model = this.observer.data;
    // Sets up the oage containers that will be used for the Menus.
    this.initMenuPages();
    // Sets up the controls containers.
    this.initControls();
    // Build a menu list out of the existing menu structure. Must be called
    // after the controls and menu pages are initialized.
    this.buildPagesFromNav();
    // Init the active page if it's not the default first page.
    // This must happen after the Pages is created because
    // the page model needs to know how many pages there are.
    this.model.currentPage = this.activeInitPageIndex;
    // Designate this as a navigation element.
    this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.NAVIGATION);
    this.root.tabIndex = Number(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.TABBABLE);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.handleClick);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleKeyPress);
    this.observer.listen(_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.CURRENT_PAGE, this.updateHandler);
  }
  /**
   * Initialize the menu Page containers.
   */
  initMenuPages() {
    // Set the page attributes of the stepped menu container.
    this.pagesContainer =
        this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.MENU_CONTAINER}`);
    if (!this.pagesContainer) throw new Error(_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.MISSING_PAGES_CONT);
    this.pagesContainer.classList.add(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.PAGES);
  }
  /**
   * Initialize the controls over the Pages.
   */
  initControls() {
    this.steppedControlsContainer =
        this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.CONTROLS_CONTAINER}`);
    this.steppedControls = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.CONTROLS}`);
    this.steppedControlsTitle =
        this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.CONTROLS_TITLE}`);
    if (!this.steppedControlsContainer || !this.steppedControls ||
        !this.steppedControlsTitle) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.MISSING_CONTROLS);
    }
    this.steppedControls.remove();
    // Grab the subnav icon from the controls for later use - and remove it.
    this.subnavIcon =
        this.steppedControls.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.SUBNAV_ICON}`);
    if (this.subnavIcon) this.subnavIcon.remove();
    this.steppedControls.classList.add(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.PAGE);
  }
  /**
   * Initialize all the menu pages. This adds them to the menu container and
   * sets up page and controls for UI actions.
   * @return activePageIndex {number}
   */
  buildPagesFromNav() {
    var _a, _b;
    // Clone the existing menu structure.
    const linkBar = (_a = this.root.parentElement) === null || _a === void 0 ?
        void 0 :
        _a.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.LINK_BAR}`);
    if (!linkBar) throw new Error(_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.MISSING_LINK_BAR);
    const rootMenu =
        (_b = linkBar.firstElementChild) === null || _b === void 0 ?
        void 0 :
        _b.cloneNode(true);
    // Start the recursive search with the root menu.
    if (rootMenu instanceof HTMLElement) this.harvestMenu(rootMenu);
    // Create Pages from the pages and controls containers. This
    // must be done after the pages are built.
    this.menuPages = new _pages__WEBPACK_IMPORTED_MODULE_7__.Pages(this.pagesContainer, this.observer);
    this.controlsPages =
        new _pages__WEBPACK_IMPORTED_MODULE_7__.Pages(this.steppedControlsContainer, this.observer);
    this.model.totalPages = this.pagesContainer.children.length;
  }
  /**
   * Harvest a menu element. Creates a new page in the stepped nav.
   * @param menuElement The menu Element to look in.
   * @param menuParentTitle  The title of the menu parent.
   * @return The index of this menu page.
   */
  harvestMenu(menuElement, parentIndex, menuParentTitle = '') {
    // Set Page properties of the new menu clone, make it a page
    // and add it to the menu container as a new page.
    menuElement.classList.add(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.PAGE);
    this.pagesContainer.appendChild(menuElement);
    // Build and add the controls for this menu.
    this.steppedControlsTitle.textContent = menuParentTitle;
    const controlsElem = this.steppedControls.cloneNode(true);
    controlsElem.classList.add(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.LINK_ITEM);
    if (menuElement.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.PARENT_POSITION)) {
      controlsElem.classList.add(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.PARENT_POSITION);
    }
    if (parentIndex) {
      // Set the controls page to the index of the parent menu.
      controlsElem.dataset[_constants__WEBPACK_IMPORTED_MODULE_6__.Attributes.PARENT_INDEX_CAMEL] = String(parentIndex);
      // Set the parent index of the stepped page for positioning.
      menuElement.dataset[_constants__WEBPACK_IMPORTED_MODULE_6__.Attributes.PARENT_INDEX_CAMEL] = String(parentIndex);
    }
    // Set the tab index so this element is focusable.
    controlsElem.tabIndex = Number(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.NOT_TABBABLE);
    this.steppedControlsContainer.appendChild(controlsElem);
    // Harvest the menu children to look for more menus.
    const thisMenuPageIndex = this.pagesContainer.children.length;
    for (const menuItem of Array.from(menuElement.children)) {
      if (menuItem instanceof HTMLElement) {
        this.harvestListItem(thisMenuPageIndex, menuItem);
      }
      // Put this menu in the right position if the list item is active.
      if (menuItem.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.ACTIVE_MENU)) {
        menuElement.classList.add(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.PARENT_POSITION);
        controlsElem.classList.add(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.PARENT_POSITION);
      }
    }
    // Set role and aria-label for accessibility purposes.
    if (menuParentTitle) {
      const labelTemplate = controlsElem.dataset[_constants__WEBPACK_IMPORTED_MODULE_6__.Attributes.STEPPEDNAV_LABEL] ||
          _constants__WEBPACK_IMPORTED_MODULE_6__.Strings.STEPPEDNAV_LABEL;
      const navLabel = labelTemplate.replaceAll(
          _constants__WEBPACK_IMPORTED_MODULE_6__.Strings.STEPPED_NAV_LABEL_VAR_NAME, menuParentTitle);
      controlsElem.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_LABEL, navLabel);
      controlsElem.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.BUTTON);
    }
    // Return the index of this menu.
    return thisMenuPageIndex;
  }
  /**
   * Harvest a menu list item element. If it finds a menu, it is harvested
   * via harvestMenu();
   * @param parentMenuPageIndex The index of the parent menu.
   * @param listItemElement The menu list item element.
   */
  harvestListItem(parentMenuPageIndex, listItemElement) {
    var _a;
    const subMenuElement = this.getChildOfNodeType(listItemElement, 'UL');
    const linkElement = this.getChildOfNodeType(listItemElement, 'A');
    // See if this is a leaf node (i.e. if it doesn't have a submenu.)
    // If it's active, we've found the currently active page.
    if (!subMenuElement &&
        listItemElement.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.ACTIVE_LINK)) {
      this.activeInitPageIndex = parentMenuPageIndex;
    }
    // Make the link not tabbable.
    if (linkElement) {
      linkElement.tabIndex = Number(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.NOT_TABBABLE);
    }
    if (!subMenuElement || !linkElement) return;
    // Take this submenu out of the li so it doesn't appear in the UI.
    subMenuElement.remove();
    // Since this is a submenu node, get the anchor element and submenu
    // and make a new page out of it.
    const menuElementPageIndex = this.harvestMenu(
        subMenuElement, parentMenuPageIndex,
        (_a = linkElement.textContent) === null || _a === void 0 ? void 0 :
                                                                   _a.trim());
    // Set the pointer to the page this link points to.
    listItemElement.dataset[_constants__WEBPACK_IMPORTED_MODULE_6__.Attributes.STEPPED_PAGE_CAMEL] =
        String(menuElementPageIndex);
    // Remove any svg that was there from the deep nav. Add the correct svg.
    const existingArrow = this.getChildOfNodeType(linkElement, 'svg');
    existingArrow === null || existingArrow === void 0 ? void 0 :
                                                         existingArrow.remove();
    if (this.subnavIcon) {
      linkElement.appendChild(this.subnavIcon.cloneNode(true));
    }
  }
  /**
   * Moves the page model to the next or previous page when the user uses
   * the enter, space or directional keys.
   */
  keyPress(evt) {
    const target = evt.target;
    const isRtl = !!this.root.closest('[dir=rtl]');
    // Selectable Elements are whichever elements are selectable via arrow
    // navigation in each of the groups of pages.
    const selectableElements = this.controlsPages.selectableElements.concat(
        this.menuPages.selectableElements);
    const selectedIndex = selectableElements.indexOf(document.activeElement);
    switch (evt.key) {
      case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.ENTER:
      case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.SPACE:
        this.selectPage(target);
        break;
      case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.LEFT:
        isRtl ? this.selectSubPage(target) : this.selectParentPage();
        break;
      case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.RIGHT:
        isRtl ? this.selectParentPage() : this.selectSubPage(target);
        break;
      case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.UP:
        selectedIndex > 0 ?
            selectableElements[selectedIndex - 1].focus() :
            selectableElements[selectableElements.length - 1].focus();
        break;
      case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.DOWN:
        selectedIndex >= selectableElements.length - 1 ?
            selectableElements[0].focus() :
            selectableElements[selectedIndex + 1].focus();
        break;
      case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.HOME:
        selectableElements[0].focus();
        break;
      case _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.END:
        selectableElements[selectableElements.length - 1].focus();
        break;
      default:
    }
  }
  /**
   * Handle a select action without a forward/back direction.
   */
  selectPage(elem) {
    // If it's in the controls container, then it's a parent page select action.
    if (this.steppedControlsContainer.contains(elem)) {
      this.selectParentPage();
    } else {
      this.selectSubPage(elem);
    }
  }
  /**
   * Handle when a new page has been selected from a submenu element action.
   */
  selectSubPage(elem) {
    // Find parent elem that is either a controls element or a subnav element.
    const dataElem = elem.closest(`[${_constants__WEBPACK_IMPORTED_MODULE_6__.Attributes.STEPPED_PAGE}]`);
    if (dataElem) {
      const pageIndex = Number(
          dataElem === null || dataElem === void 0 ?
              void 0 :
              dataElem.dataset[_constants__WEBPACK_IMPORTED_MODULE_6__.Attributes.STEPPED_PAGE_CAMEL]);
      this.model.currentPage = pageIndex;
    }
  }
  /**
   * Handle when we should go to the parent page of an elem.
   */
  selectParentPage() {
    // Find parent element where the attribute is either parent or a stepped
    // page.
    const parentPageIndex = this.controlsPages.getCurrentPageParentIndex();
    this.model.currentPage = parentPageIndex;
  }
  /**
   * Get a child element from a parent of a specified type.
   * @param parent The element to look in.
   * @param type The type of node to get e.g. 'UL'
   * @return The first child of that type or undefined if not found.
   */
  getChildOfNodeType(parent, type) {
    return Array.from(parent.children).find((el) => el.nodeName === type);
  }
  destroy() {
    if (this.menuPages) this.menuPages.destroy();
    if (this.controlsPages) this.controlsPages.destroy();
    this.observer.unlisten(_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.CURRENT_PAGE, this.updateHandler);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.handleClick);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleKeyPress);
    for (const node of this.pagesContainer.childNodes) {
      this.pagesContainer.removeChild(node);
    }
    for (const node of this.steppedControlsContainer.childNodes) {
      this.steppedControlsContainer.removeChild(node);
    }
    this.steppedControls.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.handleClick);
    this.steppedControls.removeEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleKeyPress);
  }
}



/***/ }),

/***/ "./_glue/lib/header/steppednav/pages.js":
/*!**********************************************!*\
  !*** ./_glue/lib/header/steppednav/pages.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Pages: () => (/* binding */ Pages)
/* harmony export */ });
/* harmony import */ var _base___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base/ */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _constants_classes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../constants/classes */ "./_glue/lib/constants/classes.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants */ "./_glue/lib/header/constants.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants */ "./_glue/lib/header/steppednav/constants.js");







/**
 * Glue Page component
 */
class Pages extends _base___WEBPACK_IMPORTED_MODULE_0__.Component {
  /**
   * @param root Root element that contains options object
   * @param model A shared model for paginating.
   */
  constructor(root, observer) {
    super(root);
    this.observer = observer;
    this.pageEls = Array.from(this.root.children);
    this.elementIds = [];
    this.selectableElements = [];
    this.handleUpdate = () => {
      this.update();
    };
    this.initialize();
  }
  /**
   * Initialize the component.
   */
  initialize() {
    this.observer.listen(_constants__WEBPACK_IMPORTED_MODULE_4__.Strings.CURRENT_PAGE, this.handleUpdate);
    this.model = this.observer.data;
    this.initPageElementIDs();
    this.update();
  }
  /**
   * Set IDs for all elements.
   */
  initPageElementIDs() {
    let pageElementId;
    for (const [index, pageEl] of this.pageEls.entries()) {
      pageElementId =
          `${_constants__WEBPACK_IMPORTED_MODULE_4__.Strings.STEPPED_PAGE}-${Math.round(Math.random() * 99999999)}`;
      pageEl.id = pageElementId;
      pageEl.classList.add(`${_constants__WEBPACK_IMPORTED_MODULE_4__.Strings.STEPPED_PAGE}-${index + 1}`);
      if (!this.elementIds[index + 1]) {
        this.elementIds[index + 1] = pageElementId;
      }
    }
  }
  /**
   * Updates CSS classes, ARIA properties and event handlers on page elements.
   */
  update() {
    // Recursively positions page elements based on parent page indexes.
    const positionPage = (elem) => {
      // A page will either have a parent index or page index attr that points
      // to the page that ought to be in the parent position in the UI.
      const parentPageIndex = elem.hasAttribute(_constants__WEBPACK_IMPORTED_MODULE_4__.Attributes.STEPPED_PAGE) ?
          Number(elem.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.Attributes.STEPPED_PAGE_CAMEL]) :
          Number(elem.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.Attributes.PARENT_INDEX_CAMEL]);
      if (isNaN(parentPageIndex)) return;
      const parentElem = this.pageEls[parentPageIndex - 1];
      parentElem === null || parentElem === void 0 ?
          void 0 :
          parentElem.classList.add(_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.PARENT_POSITION);
      positionPage(parentElem);
    };
    const currentElem = this.pageEls[this.model.currentPage - 1];
    for (const pageElem of this.pageEls) {
      const selected = pageElem === currentElem;
      if (selected) {
        pageElem.classList.add(_constants_classes__WEBPACK_IMPORTED_MODULE_2__.CssClasses.SHOW);
        pageElem.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HIDDEN);
      } else {
        pageElem.classList.remove(
            _constants_classes__WEBPACK_IMPORTED_MODULE_2__.CssClasses.SHOW, _constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.PARENT_POSITION);
        pageElem.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HIDDEN, 'true');
      }
      this.updatePageElements(pageElem);
    }
    // Get all the page elements that might be selectable for key-based nav.
    if (currentElem.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.CONTROLS)) {
      this.selectableElements =
          currentElem.hasAttribute(_constants__WEBPACK_IMPORTED_MODULE_4__.Attributes.PARENT_INDEX) ? [currentElem] :
                                                              [];
    } else {
      this.selectableElements = Array.from(
          currentElem.querySelectorAll(`.${_constants__WEBPACK_IMPORTED_MODULE_3__.CssClasses.LINK_ITEM}`));
    }
    // Set the positions of the pages that are parents of the current page.
    positionPage(currentElem);
  }
  /**
   * Updates the DOM attributes.
   */
  updatePageElements(pageElem) {
    const children = Array.from(pageElem.children);
    // Set attributes of the links or submenu elements in the page.
    for (const elem of children) {
      if (!elem.hasAttribute(_constants__WEBPACK_IMPORTED_MODULE_4__.Attributes.STEPPED_PAGE)) continue;
      // The 'haspopup' aria attribute marks an item that has a sub-menu to
      // to differentiate it from the simple link elements.
      elem.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HASPOPUP, 'true');
      // The 'selected' aria attribute indicates it's the active page.
      elem.setAttribute(
          _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_SELECTED,
          String(elem.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_3__.CssClasses.ACTIVE_MENU)));
      // Connect the aria controls attr with the controls index.
      if (elem instanceof HTMLElement) {
        const pageId = Number(elem.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.Attributes.STEPPED_PAGE_CAMEL]);
        elem.setAttribute(
            _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_CONTROLS, this.elementIds[pageId]);
      }
    }
  }
  /**
   * Gets current page parent page index.
   */
  getCurrentPageParentIndex() {
    const pageElem = this.pageEls[this.model.currentPage - 1];
    const index = Number(pageElem.dataset[_constants__WEBPACK_IMPORTED_MODULE_4__.Attributes.PARENT_INDEX_CAMEL]);
    return isNaN(index) ? 1 : index;
  }
  destroy() {
    for (const pageElem of this.pageEls) {
      pageElem.classList.remove(
          _constants_classes__WEBPACK_IMPORTED_MODULE_2__.CssClasses.SHOW, _constants__WEBPACK_IMPORTED_MODULE_4__.CssClasses.PARENT_POSITION);
      pageElem.id = '';
    }
    this.observer.unlisten(_constants__WEBPACK_IMPORTED_MODULE_4__.Strings.CURRENT_PAGE, this.handleUpdate);
  }
}



/***/ }),

/***/ "./_glue/lib/jumplinks/constants.js":
/*!******************************************!*\
  !*** ./_glue/lib/jumplinks/constants.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CssClasses: () => (/* binding */ CssClasses),
/* harmony export */   DataAttr: () => (/* binding */ DataAttr),
/* harmony export */   Numbers: () => (/* binding */ Numbers),
/* harmony export */   Strings: () => (/* binding */ Strings)
/* harmony export */ });
/**
 * @fileoverview Constants used by the Jumplinks component.
 */
var CssClasses;
(function(CssClasses) {
CssClasses['BUTTON'] = 'glue-jumplinks__button';
CssClasses['BUTTON_LEFT'] = 'glue-jumplinks__button--prev';
CssClasses['BUTTON_RIGHT'] = 'glue-jumplinks__button--next';
CssClasses['BUTTON_ACTIVE'] = 'glue-jumplinks__button--active';
CssClasses['LIST'] = 'glue-jumplinks__list';
CssClasses['ITEMS'] = 'glue-jumplinks__list-item';
CssClasses['LINK'] = 'glue-jumplinks__link';
CssClasses['LINK_ACTIVE'] = 'glue-jumplinks__link--active';
CssClasses['VIEWPORT'] = 'glue-jumplinks__viewport';
CssClasses['REWIND'] = 'glue-jumplinks--rewind';
CssClasses['ROOT'] = 'glue-jumplinks';
})(CssClasses || (CssClasses = {}));
var Strings;
(function(Strings) {
Strings['LI_WIDTH'] = 'liWidth';
Strings['VIEWPORT'] = 'viewport';
Strings['PAGE_X'] = 'pageX';
Strings['SLIDES'] = 'slides';
Strings['ACTIVE_LINK'] = 'activeLink';
Strings['RTL'] = 'rtl';
Strings['TRANSFORM'] = 'transform';
Strings['BLOCK'] = 'block';
Strings['FIXED'] = 'fixed';
Strings['JUMPLINK_DEFAULT_LABEL'] = 'Jump to section within page';
Strings['NOT_FIXED'] = 'absolute';
Strings['NO_ANIMATION'] = 'none';
})(Strings || (Strings = {}));
var Numbers;
(function(Numbers) {
Numbers[Numbers['DEFAULT_OFFSET'] = 144] = 'DEFAULT_OFFSET';
Numbers[Numbers['JUMPLINKS_MARGIN'] = 16] = 'JUMPLINKS_MARGIN';
Numbers[Numbers['JUMPLINKS_HEIGHT'] = 48] = 'JUMPLINKS_HEIGHT';
Numbers[Numbers['SCROLL_THRESHOLD'] = 130] = 'SCROLL_THRESHOLD';
})(Numbers || (Numbers = {}));
var DataAttr;
(function(DataAttr) {
DataAttr['JUMPLINK_LABEL'] = 'glueJumplinkLabel';
})(DataAttr || (DataAttr = {}));



/***/ }),

/***/ "./_glue/lib/jumplinks/index.js":
/*!**************************************!*\
  !*** ./_glue/lib/jumplinks/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Jumplinks: () => (/* binding */ Jumplinks)
/* harmony export */ });
/* harmony import */ var _base_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base/index */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _easing___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../easing/ */ "./_glue/lib/easing/index.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _focus___WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../focus/ */ "./_glue/lib/focus/index.js");
/* harmony import */ var _observer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../observer */ "./_glue/lib/observer/index.js");
/* harmony import */ var _smoothscroll_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../smoothscroll/constants */ "./_glue/lib/smoothscroll/constants.js");
/* harmony import */ var _smoothscroll_scrollmanager__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../smoothscroll/scrollmanager */ "./_glue/lib/smoothscroll/scrollmanager.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./constants */ "./_glue/lib/jumplinks/constants.js");











class Jumplinks extends _base_index__WEBPACK_IMPORTED_MODULE_0__.Component {
  constructor(root, options) {
    super(root);
    this.linkTargets = [];
    this.lastScrollPosition = 0;
    this.isScrolling = false;
    this.handleClick = (e) => {
      this.clickHandler(e);
    };
    this.handleActiveLinkChange = () => {
      this.activeLinkChangeHandler();
    };
    this.handleScroll = () => {
      this.scrollHandler();
    };
    this.handleResize = () => {
      this.resizeHandler();
    };
    this.handleLinkFocus = (e) => {
      this.focusLinkHandler(e);
    };
    this.handleHorizontalScroll = () => {
      this.updateButtons();
    };
    let element = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_8__.CssClasses.LIST}`);
    if (!element) {
      throw new Error('Jumplinks List element is missing.');
    } else {
      this.list = element;
    }
    element = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_8__.CssClasses.BUTTON_LEFT}`);
    if (!element) {
      throw new Error('Jumplinks left button element is missing.');
    } else {
      this.prevButton = element;
    }
    element = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_8__.CssClasses.BUTTON_RIGHT}`);
    if (!element) {
      throw new Error('Jumplinks right button element is missing.');
    } else {
      this.nextButton = element;
    }
    this.listItems =
        Array.from(this.root.querySelectorAll(`.${_constants__WEBPACK_IMPORTED_MODULE_8__.CssClasses.ITEMS}`));
    if (this.listItems.length === 0) {
      throw new Error('Jumplinks list item is missing.');
    }
    this.links = Array.from(this.root.querySelectorAll(`.${_constants__WEBPACK_IMPORTED_MODULE_8__.CssClasses.LINK}`));
    if (this.links.length === 0) {
      throw new Error('Jumplinks link item is missing.');
    }
    this.options = Object.assign(
        {}, {
          offset: _constants__WEBPACK_IMPORTED_MODULE_8__.Numbers.DEFAULT_OFFSET,
          belowHeader: false,
        },
        options);
    this.smoothScroll = new _smoothscroll_scrollmanager__WEBPACK_IMPORTED_MODULE_7__.ScrollManager();
    this.observer = new _observer__WEBPACK_IMPORTED_MODULE_5__.Observer({
      activeLink: '',
    });
    this.leftWatchPoint =
        this.root.getBoundingClientRect().x + this.prevButton.offsetWidth;
    this.rightWatchPoint = this.leftWatchPoint + this.list.offsetWidth;
    this.initialize();
  }
  initialize() {
    this.setAttributes();
    this.updateButtons();
    this.getLinkTargets();
    this.registerListeners();
    this.createIntersectionObserver();
  }
  createIntersectionObserver() {
    const options = {
      root: null,
      rootMargin: `-${Math.floor(window.innerHeight / 2)}px 0px`,
      threshold: 0,
    };
    const observer = new IntersectionObserver((entries) => {
      for (const entry of entries) {
        if (entry.isIntersecting) {
          this.setActiveLink(entry.target.id);
        } else {
          if (entry.target.id === this.getActiveLink()) {
            this.reset();
          }
        }
      }
    }, options);
    for (const element of this.linkTargets) {
      observer.observe(element);
    }
  }
  /**
   */
  destroy() {
    this.deregisterListeners();
  }
  setAttributes() {
    /**
     * Gets localized text to be appended to jump links 'aria label'
     * if it exists or else uses default string.
     */
    const jumplinkList = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_8__.CssClasses.LIST}`);
    const labelText = jumplinkList.dataset[_constants__WEBPACK_IMPORTED_MODULE_8__.DataAttr.JUMPLINK_LABEL] ||
        _constants__WEBPACK_IMPORTED_MODULE_8__.Strings.JUMPLINK_DEFAULT_LABEL;
    this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, 'navigation');
    for (const link of this.links) {
      link.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_LABEL, `${link.text} - ${labelText}`);
    }
    for (const button of [this.prevButton, this.nextButton]) {
      button.tabIndex = _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.NOT_TABBABLE;
      button.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HIDDEN, 'true');
    }
  }
  setActiveLink(id) {
    this.observer.data['activeLink'] = id;
  }
  getActiveLink() {
    return this.observer.data['activeLink'];
  }
  getLinkTargets() {
    for (const link of this.links) {
      const hash = link.hash.substring(1);
      const target = document.querySelector(`#${hash}`);
      if (!target) {
        throw new Error(`Element with id "${hash}" does not exist.`);
      }
      this.linkTargets.push(target);
    }
  }
  registerListeners() {
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.CLICK, this.handleClick);
    const throttle = (func, limit) => {
      let inThrottle;
      return (...args) => {
        if (!inThrottle) {
          func.apply(this, args);
          inThrottle = true;
          setTimeout(() => (inThrottle = false), limit);
        }
      };
    };
    this.list.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.SCROLL, this.handleHorizontalScroll);
    document.addEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.SCROLL, throttle(this.handleScroll, 16));
    window.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.RESIZE, this.handleResize);
    this.observer.listen(_constants__WEBPACK_IMPORTED_MODULE_8__.Strings.ACTIVE_LINK, this.handleActiveLinkChange);
    document.addEventListener(_smoothscroll_constants__WEBPACK_IMPORTED_MODULE_6__.ScrollEventType.ENDSCROLL, () => {
      this.isScrolling = false;
      this.updateTopOffset();
    });
    for (const link of this.links) {
      link.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.FOCUS, this.handleLinkFocus);
    }
  }
  deregisterListeners() {
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.CLICK, this.handleClick);
    this.list.removeEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.SCROLL, this.handleHorizontalScroll);
    window.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.SCROLL, this.handleScroll);
    window.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.RESIZE, this.handleResize);
    this.observer.unlisten(_constants__WEBPACK_IMPORTED_MODULE_8__.Strings.ACTIVE_LINK, this.handleActiveLinkChange);
    for (const link of this.links) {
      link.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.FOCUS, this.handleLinkFocus);
    }
  }
  focusLinkHandler(e) {
    if (e.target && e.target instanceof Element) {
      this.updateButtons();
    }
  }
  /**
   * Click handler for all component buttons, via event delegation
   */
  clickHandler(e) {
    e.preventDefault();
    const clickTarget = e.target;
    let target;
    if (clickTarget === this.prevButton) {
      target = this.isRTL() ? this.getPartialLink('next') :
                              this.getPartialLink('prev');
      target.scrollIntoView({
        behavior: 'auto',
        block: 'nearest',
        inline: 'end',
      });
    } else if (clickTarget === this.nextButton) {
      target = this.isRTL() ? this.getPartialLink('prev') :
                              this.getPartialLink('next');
      target.scrollIntoView({
        behavior: 'auto',
        block: 'nearest',
        inline: 'start',
      });
    } else if (
        clickTarget instanceof HTMLAnchorElement &&
        this.links.includes(clickTarget)) {
      target = clickTarget;
      const hash = target.hash.substring(1);
      const defaultScrollY = this.options.offset + _constants__WEBPACK_IMPORTED_MODULE_8__.Numbers.JUMPLINKS_HEIGHT +
          _constants__WEBPACK_IMPORTED_MODULE_8__.Numbers.JUMPLINKS_MARGIN;
      const midHeight = Math.floor(window.innerHeight / 2);
      const scrollY = defaultScrollY > midHeight ? midHeight : defaultScrollY;
      const targetElement = document.querySelector(`#${hash}`);
      this.smoothScroll.startScroll(targetElement, {
        'duration': 600,
        'easing': _easing___WEBPACK_IMPORTED_MODULE_2__.easeInOutQuart,
        'direction': 'both',
        'hash': true,
        'offset': {
          'x': 0,
          'y': scrollY,
        },
      });
      this.isScrolling = true;
      const isFocusable = _focus___WEBPACK_IMPORTED_MODULE_4__.isElementFocusable(targetElement);
      // Set tabindex = -1 to non-focusable element, so focus() is able to
      // move focus to the element.
      if (!isFocusable) {
        targetElement.tabIndex = _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.NOT_TABBABLE;
      }
      targetElement.focus();
    }
    this.updateButtons();
  }
  /*
   * Return the link element that is partially visible.
   */
  getPartialLink(direction) {
    let watchPoint;
    direction === 'prev' ? (watchPoint = this.leftWatchPoint) :
                           (watchPoint = this.rightWatchPoint);
    for (const link of this.links) {
      const bounding = link.getBoundingClientRect();
      if (bounding.x < watchPoint && bounding.x + bounding.width > watchPoint) {
        return link;
      }
    }
    return this.links[0];
  }
  reset() {
    this.setActiveLink('');
  }
  activeLinkChangeHandler() {
    this.renderActiveLink();
    const hash = this.getActiveLink();
    if (hash !== '') {
      const activeEl = this.links.find((link) => link.hash === `#${hash}`);
      // Scroll the link element into view
      activeEl === null || activeEl === void 0 ? void 0 :
                                                 activeEl.scrollIntoView({
                                                   behavior: 'auto',
                                                   block: 'nearest',
                                                   inline: 'center',
                                                 });
    }
    this.updateButtons();
  }
  scrollHandler() {
    if (this.isScrolling === true) {
      return;
    }
    this.updateTopOffset();
  }
  resizeHandler() {
    /**
     * TODO: add test case to verify whether the active class is applied to the
     * prev or next button on resize.
     */
    this.leftWatchPoint =
        this.root.getBoundingClientRect().x + this.prevButton.offsetWidth;
    this.rightWatchPoint = this.leftWatchPoint + this.list.offsetWidth;
    this.updateButtons();
  }
  // Show and hide prev/next buttons
  updateButtons() {
    this.prevButton.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_8__.CssClasses.BUTTON_ACTIVE);
    this.nextButton.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_8__.CssClasses.BUTTON_ACTIVE);
    if (this.isRTL()) {
      if (this.list.scrollLeft < 0) {
        this.prevButton.classList.add(_constants__WEBPACK_IMPORTED_MODULE_8__.CssClasses.BUTTON_ACTIVE);
      }
      if (this.list.scrollWidth + this.list.scrollLeft - this.list.clientWidth >
          10) {
        this.nextButton.classList.add(_constants__WEBPACK_IMPORTED_MODULE_8__.CssClasses.BUTTON_ACTIVE);
      }
    } else {
      if (this.list.scrollLeft > 0) {
        this.prevButton.classList.add(_constants__WEBPACK_IMPORTED_MODULE_8__.CssClasses.BUTTON_ACTIVE);
      }
      if (this.list.scrollWidth - this.list.scrollLeft - this.list.clientWidth >
          10) {
        this.nextButton.classList.add(_constants__WEBPACK_IMPORTED_MODULE_8__.CssClasses.BUTTON_ACTIVE);
      }
    }
  }
  /**
   * Set active link via hash
   */
  renderActiveLink() {
    const id = this.getActiveLink();
    const currentActiveLink = this.links.find((link) => link.hash === `#${id}`);
    const prevActiveLink =
        this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_8__.CssClasses.LINK_ACTIVE}`);
    prevActiveLink === null || prevActiveLink === void 0 ?
        void 0 :
        prevActiveLink.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_8__.CssClasses.LINK_ACTIVE);
    prevActiveLink === null || prevActiveLink === void 0 ?
        void 0 :
        prevActiveLink.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_CURRENT);
    currentActiveLink === null || currentActiveLink === void 0 ?
        void 0 :
        currentActiveLink.classList.add(_constants__WEBPACK_IMPORTED_MODULE_8__.CssClasses.LINK_ACTIVE);
    currentActiveLink === null || currentActiveLink === void 0 ?
        void 0 :
        currentActiveLink.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_CURRENT, 'true');
  }
  /**
   * Updates vertical offset of the Jumplinks.
   */
  updateTopOffset() {
    if (this.lastScrollPosition === window.scrollY) {
      return;
    }
    // Remove rewind if it is near the page buttom, resolves the bouncing issue
    // on mobile.
    const nearBottom =
        document.body.clientHeight - window.scrollY - window.innerHeight <=
        _constants__WEBPACK_IMPORTED_MODULE_8__.Numbers.SCROLL_THRESHOLD;
    if (nearBottom) {
      this.root.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_8__.CssClasses.REWIND);
      this.unsetOffset();
      return;
    }
    // It is 128px by default
    const headerHeight = this.options.offset - _constants__WEBPACK_IMPORTED_MODULE_8__.Numbers.JUMPLINKS_MARGIN;
    // Remove rewind if it scrolls to top
    if (window.scrollY <= headerHeight) {
      this.root.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_8__.CssClasses.REWIND);
      this.unsetOffset();
      return;
    }
    // Rewind if it scrolls up
    if (window.scrollY > headerHeight) {
      if (window.scrollY < this.lastScrollPosition) {
        this.root.classList.add(_constants__WEBPACK_IMPORTED_MODULE_8__.CssClasses.REWIND);
        if (this.options.belowHeader) {
          const header = document.querySelector('header');
          this.setOffset(
              ((header === null || header === void 0 ? void 0 :
                                                       header.clientHeight) ||
               0) +
              _constants__WEBPACK_IMPORTED_MODULE_8__.Numbers.JUMPLINKS_MARGIN);
        } else {
          this.setOffset(this.options.offset);
        }
      } else {
        this.root.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_8__.CssClasses.REWIND);
        this.unsetOffset();
      }
    }
    this.lastScrollPosition = window.scrollY;
  }
  setOffset(top) {
    this.root.style.top = `${top}px`;
  }
  unsetOffset() {
    this.root.style.top = '';
  }
  isRTL() {
    return document.documentElement.dir === _constants__WEBPACK_IMPORTED_MODULE_8__.Strings.RTL;
  }
}



/***/ }),

/***/ "./_glue/lib/math/coordinate.js":
/*!**************************************!*\
  !*** ./_glue/lib/math/coordinate.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Coordinate: () => (/* binding */ Coordinate)
/* harmony export */ });
/**
 * @fileoverview A utility class for representing two-dimensional positions.
 */
/**
 * Class for representing coordinates and positions.
 */
class Coordinate {
  constructor(leftCoordinate = 0, topCoordinate = 0) {
    this.x = leftCoordinate;
    this.y = topCoordinate;
  }
  /**
   * Returns the difference between two coordinates as a new
   * Coordinate.
   */
  static difference(dimOne, dimTwo) {
    return new Coordinate(dimOne.x - dimTwo.x, dimOne.y - dimTwo.y);
  }
}



/***/ }),

/***/ "./_glue/lib/modal/constants.js":
/*!**************************************!*\
  !*** ./_glue/lib/modal/constants.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CssClasses: () => (/* binding */ CssClasses),
/* harmony export */   Strings: () => (/* binding */ Strings)
/* harmony export */ });
var CssClasses;
(function(CssClasses) {
CssClasses['ROOT'] = 'glue-modal';
CssClasses['CLOSE_BTN'] = 'glue-modal__close-btn';
CssClasses['CLOSING'] = 'glue-modal-closing';
CssClasses['OPEN'] = 'glue-modal-open';
CssClasses['NO_SCROLL'] = 'glue-no-scroll';
CssClasses['DARK'] = 'glue-modal--dark';
})(CssClasses || (CssClasses = {}));
var Strings;
(function(Strings) {
Strings['OPENED_EVENT'] = 'GlueModal:opened';
Strings['CLOSED_EVENT'] = 'GlueModal:closed';
Strings['CLOSE_MODAL_LABEL'] = 'Close the modal';
})(Strings || (Strings = {}));



/***/ }),

/***/ "./_glue/lib/modal/index.js":
/*!**********************************!*\
  !*** ./_glue/lib/modal/index.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Modal: () => (/* binding */ Modal)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _events_key__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events/key */ "./_glue/lib/events/key.js");
/* harmony import */ var _focus___WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../focus/ */ "./_glue/lib/focus/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./constants */ "./_glue/lib/modal/constants.js");








class Modal extends _base__WEBPACK_IMPORTED_MODULE_0__.Component {
  /**
   * Modal object providing focus management.
   * The element is present in the DOM and hidden.
   * The modal has role='dialog'.
   * @param el the element serving as the modal dialog.
   * @param focusAfterClosed The element to focus when the modal closes.
   * @param focusFirst The first element will receive focus after modal opens.
   */
  constructor(el, focusAfterClosed, focusFirst = null) {
    super(el);
    this.lastFocus = document.activeElement;
    this.ignoreFocusChange = false;
    this.ariaHiddenElements = [];
    /** Handle modal transition ends. */
    this.handleTransitionEnds = () => {
      this.root.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.CLOSING);
      this.focusAfterClosed.focus();
      this.root.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TRANSITIONEND, this.handleTransitionEnds);
    };
    this.closeBtn = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.CLOSE_BTN}`);
    this.focusAfterClosed = focusAfterClosed;
    this.focusFirst = focusFirst;
    this.handleCloseBtnClick = (e) => {
      e.stopPropagation();
      this.close();
    };
    this.handleKeyDown = (e) => {
      e.stopPropagation();
      const isEscape = e.code === _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.ESC;
      if (isEscape) {
        this.close();
      }
    };
    this.handleFocus = (e) => {
      this.trapFocus(e);
    };
    this.init();
  }
  /**
   * Throw an error if close button does not exist.
   */
  init() {
    this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.DIALOG);
    this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_MODAL, 'true');
  }
  /**
   * Set focus on descendant nodes until the first focusable element is
   * found.
   * @param element DOM node for which to find the first focusable descendant.
   * @return true if a focusable element is found and focus is set.
   */
  focusFirstDescendant(element) {
    for (let i = 0; i < element.children.length; i++) {
      const child = element.children[i];
      if (this.attemptFocus(child) || this.focusFirstDescendant(child)) {
        return true;
      }
    }
    return false;
  }
  /**
   * Find the last descendant node that is focusable.
   * @param element DOM node for which to find the last focusable descendant.
   * @return true if a focusable element is found and focus is set.
   */
  focusLastDescendant(element) {
    for (let i = element.children.length - 1; i >= 0; i--) {
      const child = element.children[i];
      if (this.attemptFocus(child) || this.focusLastDescendant(child)) {
        return true;
      }
    }
    return false;
  }
  /**
   * Attempt to set focus on the current node.
   * @param element The node to attempt to focus on.
   * @return true if element is focused.
   */
  attemptFocus(element) {
    if (!(0,_focus___WEBPACK_IMPORTED_MODULE_4__.isElementFocusable)(element)) {
      return false;
    }
    this.ignoreFocusChange = true;
    try {
      element.focus();
    } catch (e) {
      throw new Error(`${e}`);
    }
    this.ignoreFocusChange = false;
    return element === document.activeElement;
  }
  /**
   * Trap focus inside the modal dialog.
   * @param e focus event.
   */
  trapFocus(e) {
    // Ignore the focus change so lastFocus does not get updated.
    if (this.ignoreFocusChange) {
      return;
    }
    // Move the focus to the element if it is inside of the Modal dialog,
    // otherwise, it moves to the first or last focusable element.
    if (this.root.contains(e.target)) {
      this.lastFocus = e.target;
    } else {
      this.focusFirstDescendant(this.root);
      if (this.lastFocus === document.activeElement) {
        this.focusLastDescendant(this.root);
      }
      this.lastFocus = document.activeElement;
    }
  }
  /**
   * Open the modal dialog.
   */
  open() {
    var _a;
    this.root.classList.add(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.OPEN);
    this.emit(_constants__WEBPACK_IMPORTED_MODULE_5__.Strings.OPENED_EVENT, {});
    (_a = this.closeBtn) === null || _a === void 0 ?
        void 0 :
        _a.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.handleCloseBtnClick);
    // Disable background scrolling
    document.body.classList.add(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.NO_SCROLL);
    // Close modal on escape key
    document.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleKeyDown);
    // Trap focus in the modal when it catches a focus event.
    document.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.FOCUS, this.handleFocus, true);
    // Focus on the first focusable element if it is not specified.
    if (this.focusFirst) {
      this.focusFirst.focus();
    } else {
      this.focusFirstDescendant(this.root);
    }
    this.ariaHideElements();
  }
  /**
   * Close the modal dialog and deregister event listeners.
   */
  close() {
    var _a;
    this.root.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.OPEN);
    this.root.classList.add(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.CLOSING);
    this.emit(_constants__WEBPACK_IMPORTED_MODULE_5__.Strings.CLOSED_EVENT, {});
    // Deregister event listeners and add end modal
    document.body.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.NO_SCROLL);
    document.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.FOCUS, this.handleFocus, true);
    (_a = this.closeBtn) === null || _a === void 0 ?
        void 0 :
        _a.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.handleCloseBtnClick);
    document.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.handleKeyDown);
    this.root.addEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.TRANSITIONEND, this.handleTransitionEnds);
    this.ariaUnhideElements();
  }
  /**
   * Set aria hidden to true for all other elements.
   * This method provides complementary A11y support before aria-modal
   * The code is referenced from
   * https://source.corp.google.com/piper///depot/google3/googledata/html/external_content/scs_corp/ariablueprints/dialog/dialog-modal-1.0.html;l=81-101
   * gets broader browser support.
   */
  ariaHideElements() {
    let current = this.root;
    while (current && current.parentNode) {
      [...current.parentNode.children].forEach((child) => {
        if (child !== current && child.getAttribute('aria-hidden') !== 'true') {
          this.ariaHiddenElements.push(child);
          child.setAttribute('aria-hidden', 'true');
        }
      });
      current = current.parentNode;
    }
  }
  /**
   * Remove aria hidden to false for all other elements.
   */
  ariaUnhideElements() {
    this.ariaHiddenElements.forEach((el) => {
      el.removeAttribute('aria-hidden');
    });
    this.ariaHiddenElements = [];
  }
  setFocusAfterClosed(el) {
    this.focusAfterClosed = el;
  }
  destroy() {
    this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE);
    this.root.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_MODAL);
  }
}



/***/ }),

/***/ "./_glue/lib/observer/index.js":
/*!*************************************!*\
  !*** ./_glue/lib/observer/index.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Observer: () => (/* binding */ Observer)
/* harmony export */ });
/**
 * @fileoverview An Observer class to create observables.
 */
/**
 * Observer generates observables for data tracking.
 */
class Observer {
  constructor(data) {
    this.data = data;
    // Create a map for keys and callbacks.
    this.watchers = new Map();
    // Generate an observable.
    this.walk(this.data);
  }
  /**
   * Walk through all properties and convert them into
   * getter/setters. This method should only be called when
   * value type is Object.
   */
  walk(obj) {
    const keys = Object.keys(obj);
    for (let i = 0; i < keys.length; i++) {
      this.defineReactive(obj, keys[i]);
    }
  }
  /**
   * Define a reactive property on an object.
   */
  defineReactive(obj, key, val) {
    const property = Object.getOwnPropertyDescriptor(obj, key);
    if (property && property.configurable === false) {
      return;
    }
    // Use pre-defined getter/setters if they exist.
    const getter = property && property.get;
    const setter = property && property.set;
    if ((!getter || setter) && arguments.length === 2) {
      val = obj[key];
    }
    Object.defineProperty(obj, key, {
      enumerable: true,
      configurable: true,
      get: () => {
        const value = getter ? getter.call(obj) : val;
        if (!this.watchers.has(key)) {
          this.watchers.set(key, []);
        }
        return value;
      },
      set: (newVal) => {
        const value = getter ? getter.call(obj) : val;
        if (newVal === value) {
          return;
        }
        if (setter) {
          setter.call(obj, newVal);
        } else {
          val = newVal;
        }
        this.notify(key);
      },
    });
  }
  /**
   * Add callback to the watchers list.
   * @param key The key or object that the model listens to
   *     changes on.
   */
  listen(key, callback) {
    if (typeof key === 'object') {
      Object.keys(key).forEach((prop) => {
        if (!this.watchers.has(prop)) {
          this.watchers.set(prop, []);
        }
        const callbacks = this.watchers.get(prop);
        if (callbacks) callbacks.push(callback);
      });
    } else {
      if (!this.watchers.has(key)) {
        this.watchers.set(key, []);
      }
      const callbacks = this.watchers.get(key);
      if (callbacks) callbacks.push(callback);
    }
  }
  /**
   * Remove callback from the watchers list.
   * @param key The key or object that the model listens to
   *     changes on.
   */
  unlisten(key, callback) {
    if (typeof key === 'object') {
      Object.keys(key).forEach((prop) => {
        if (this.watchers.has(prop)) {
          this.watchers.set(
              prop, this.watchers.get(prop).filter((val) => val !== callback));
        }
      });
    } else if (this.watchers.get(key)) {
      this.watchers.set(
          key, this.watchers.get(key).filter((val) => val !== callback));
    }
  }
  /**
   * Notify subscribers.
   */
  notify(key) {
    if (this.watchers.get(key)) {
      this.watchers.get(key).forEach((subscriber) => {
        subscriber.call(null);
      });
    }
  }
}



/***/ }),

/***/ "./_glue/lib/popover/constants.js":
/*!****************************************!*\
  !*** ./_glue/lib/popover/constants.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CssClasses: () => (/* binding */ CssClasses),
/* harmony export */   CustomEvent: () => (/* binding */ CustomEvent),
/* harmony export */   DataAttr: () => (/* binding */ DataAttr),
/* harmony export */   PlacementOptions: () => (/* binding */ PlacementOptions),
/* harmony export */   RESIZE_DEBOUNCE_TIMING: () => (/* binding */ RESIZE_DEBOUNCE_TIMING),
/* harmony export */   Strings: () => (/* binding */ Strings)
/* harmony export */ });
/**
 * Custom popover placements
 */
var PlacementOptions;
(function(PlacementOptions) {
PlacementOptions['LEFT'] = 'left';
PlacementOptions['RIGHT'] = 'right';
PlacementOptions['TOP'] = 'top';
PlacementOptions['BOTTOM'] = 'bottom';
})(PlacementOptions || (PlacementOptions = {}));
var CssClasses;
(function(CssClasses) {
CssClasses['PREFIX'] = 'data-glue-popover';
CssClasses['ROOT'] = 'glue-popover';
CssClasses['TRIGGER'] = 'glue-popover__trigger';
CssClasses['DIALOG'] = 'glue-popover__dialog';
CssClasses['CLOSE_BTN'] = 'glue-popover__close-btn';
CssClasses['IS_SHOWN'] = 'glue-is-shown';
CssClasses['COPY'] = 'glue-copy';
})(CssClasses || (CssClasses = {}));
var Strings;
(function(Strings) {
Strings['TRIGGER'] = 'trigger';
Strings['PLACEMENT'] = 'placement';
Strings['FOCUS'] = 'takeFocus';
Strings['ROOT'] = 'root';
Strings['MISSING_ID'] = 'Missing or invalid ID. Popover requires a unique ID';
Strings['MISSING_TRIGGER'] = 'Popover trigger element is missing';
Strings['MISSING_DIALOG'] = 'Popover dialog element is missing';
Strings['INCORRECT_PLACEMENT'] =
    'Placement value needs to be one of these: left, right, top, bottom.';
})(Strings || (Strings = {}));
var DataAttr;
(function(DataAttr) {
DataAttr['TRIGGER'] = 'gluePopoverTrigger';
})(DataAttr || (DataAttr = {}));
/**
 * Custom popover events
 */
var CustomEvent;
(function(CustomEvent) {
CustomEvent['OPEN_EVENT'] = 'gluepopovershow';
CustomEvent['CLOSE_EVENT'] = 'gluepopoverclose';
})(CustomEvent || (CustomEvent = {}));
/** Debounce timing for resize events */
const RESIZE_DEBOUNCE_TIMING = 250;



/***/ }),

/***/ "./_glue/lib/popover/index.js":
/*!************************************!*\
  !*** ./_glue/lib/popover/index.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PlacementOptions: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_6__.PlacementOptions),
/* harmony export */   Popover: () => (/* binding */ Popover)
/* harmony export */ });
/* harmony import */ var _base___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base/ */ "./_glue/lib/base/index.js");
/* harmony import */ var _base_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base/utils */ "./_glue/lib/base/utils.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _debounce__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../debounce */ "./_glue/lib/debounce/index.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _events_key__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../events/key */ "./_glue/lib/events/key.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./constants */ "./_glue/lib/popover/constants.js");









/**
 * A components that shows a popover component by toggling a button.
 *
 * Responsibilities:
 *  - Attach component instance to root element
 *  - Initialize options object
 *  - Provide public methods for open, close and destroy
 *  - Set attributes and aria tags to elements.
 *  - Access all DOM api needs directly
 *  - Set and remove all event listeners
 *  - Controls and sets focus to elements
 *
 * Design doc: https://goto.google.com/glue-popover-mdc-dd
 *
 */
class Popover extends _base___WEBPACK_IMPORTED_MODULE_0__.Component {
  /**
   * @param rootElement The element that contains the popover.
   * @param options Popover options object.
   * @param buttonEl The element that opens the popover.
   * @param dialogEl The element for the popover dialog.
   */
  constructor(rootElement, options = {}, buttonEl, dialogEl) {
    super(rootElement);
    /**
     * Resize handler for the Popover.
     * Recalculate the position of the Popover when the window resizes.
     */
    this.handleResize = () => {
      this.setPopoverPosition();
    };
    /**
     * Resize debounce handler for the Popover.
     */
    this.handleResizeDebounce = () => {
      this.resizeDebounce.debounce();
    };
    // Compile the final set of options.
    this.options = Object.assign(
        {}, Popover.defaults, options, this.getAttributeOptions());
    if (!['top', 'bottom', 'left', 'right'].includes(this.options.placement)) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.INCORRECT_PLACEMENT);
    }
    this.clickOutsideDialogHandler = (evt) => {
      this.handleClickOutsideDialog(evt);
    };
    this.initInteractiveElements(buttonEl, dialogEl);
    this.resizeDebounce =
        new _debounce__WEBPACK_IMPORTED_MODULE_3__.Debounce(this.handleResize, _constants__WEBPACK_IMPORTED_MODULE_6__.RESIZE_DEBOUNCE_TIMING);
  }
  /**
   * Set up the button interactive elements.
   */
  initInteractiveElements(buttonEl, dialogEl) {
    // Get Button and Dialog elements if not already provided.
    if (buttonEl) {
      this.buttonEl = buttonEl;
    } else {
      this.buttonEl = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TRIGGER}`);
    }
    if (!this.buttonEl) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.MISSING_TRIGGER);
    }
    if (dialogEl) {
      this.dialogEl = dialogEl;
    } else {
      this.dialogEl = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.DIALOG}`);
      if (!this.dialogEl) {
        throw new Error(_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.MISSING_DIALOG);
      }
    }
    this.closeEl = this.dialogEl.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.CLOSE_BTN}`);
    // Bind to event handlers.
    this.buttonClickHandler = (evt) => {
      this.handleButtonClick(evt);
    };
    this.keyDownHandler = (evt) => {
      this.handleKeyDown(evt);
    };
    // Add events to trigger element for key and trigger events (set in opts).
    this.buttonEl.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_4__.EventType.CLICK, this.buttonClickHandler);
    this.buttonEl.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_4__.EventType.KEYDOWN, this.keyDownHandler);
    // Set listeners to handle an ESC key press or close btn when dialog open.
    this.dialogEl.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_4__.EventType.KEYDOWN, this.keyDownHandler);
    this.dialogEl.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_4__.EventType.CLICK, this.buttonClickHandler);
    // Automatically resize the Popover when the window resizes.
    window.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_4__.EventType.RESIZE, this.handleResizeDebounce);
    // Sets element attrs mainly for a11y.
    this.setDefaultElAttr();
  }
  /**
   * Destroys the popover instance.
   */
  destroy() {
    this.close();
    // Remove event listeners
    this.buttonEl.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_4__.EventType.CLICK, this.buttonClickHandler);
    document.removeEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_4__.EventType.CLICK, this.clickOutsideDialogHandler);
    this.dialogEl.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_4__.EventType.KEYDOWN, this.keyDownHandler);
    this.buttonEl.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_4__.EventType.KEYDOWN, this.keyDownHandler);
    this.dialogEl.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_4__.EventType.CLICK, this.buttonClickHandler);
    if (this.mouseLeaveHandler) {
      this.buttonEl.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_4__.EventType.MOUSELEAVE, this.mouseLeaveHandler);
      this.dialogEl.removeEventListener(
          _events_eventtype__WEBPACK_IMPORTED_MODULE_4__.EventType.MOUSELEAVE, this.mouseLeaveHandler);
    }
    if (this.blurHandler) {
      window.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_4__.EventType.BLUR, this.blurHandler);
    }
    window.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_4__.EventType.RESIZE, this.handleResizeDebounce);
  }
  /**
   * If an event is from the specified element.
   */
  checkEventFromChild(element, event) {
    return event.target instanceof Node && element.contains(event.target);
  }
  /**
   * Get attributes from target element and constructor an options object.
   */
  getAttributeOptions() {
    const {PREFIX} = _constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses;
    const {PLACEMENT, FOCUS} = _constants__WEBPACK_IMPORTED_MODULE_6__.Strings;
    const options = {};
    const placement = this.root.getAttribute(`${PREFIX}-${PLACEMENT}`);
    const focus = this.root.getAttribute(`${PREFIX}-${FOCUS}`);
    if (placement) options[PLACEMENT] = placement;
    if (focus) options[FOCUS] = placement;
    return options;
  }
  /**
   *  Adds default attributes to the corresponding elements
   */
  setDefaultElAttr() {
    this.dialogEl.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Role.DIALOG);
    this.dialogEl.tabIndex = _constants_attribute__WEBPACK_IMPORTED_MODULE_2__.TabIndex.NOT_TABBABLE;
    this.dialogEl.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Attribute.ARIA_HIDDEN, 'true');
    this.buttonEl.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Role.BUTTON);
    this.buttonEl.tabIndex = _constants_attribute__WEBPACK_IMPORTED_MODULE_2__.TabIndex.TABBABLE;
    this.buttonEl.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Attribute.ARIA_EXPANDED, 'false');
    if (!this.dialogEl.id || this.dialogEl.id.length === 0) {
      this.dialogEl.id = `glue-popover-${Math.round(Math.random() * 99999999)}`;
    }
    // Set aria-controls (extend value if it already exists)
    const ariaControlsElements = [
      this.dialogEl.id,
      this.buttonEl.getAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Attribute.ARIA_CONTROLS),
    ];
    this.buttonEl.setAttribute(
        _constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Attribute.ARIA_CONTROLS, ariaControlsElements.join(' ').trim());
    if (this.closeEl) {
      this.closeEl.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Role.BUTTON);
      this.closeEl.tabIndex = _constants_attribute__WEBPACK_IMPORTED_MODULE_2__.TabIndex.TABBABLE;
    }
  }
  /**
   * Set focus to element based on status
   */
  setElementFocus() {
    var _a;
    if (!this.options.takeFocus) return;
    (_a = this.buttonEl) === null || _a === void 0 ? void 0 : _a.focus();
  }
  /**
   * Shows popover and sets the pending flag.
   */
  open() {
    if (this.isOpen()) return;
    this.setPopoverPosition();
    this.dialogEl.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Attribute.ARIA_HIDDEN, 'false');
    this.buttonEl.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Attribute.ARIA_EXPANDED, 'true');
    this.root.classList.add(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.IS_SHOWN);
    document.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_4__.EventType.CLICK, this.clickOutsideDialogHandler);
    this.setElementFocus();
    this.emit(_constants__WEBPACK_IMPORTED_MODULE_6__.CustomEvent.OPEN_EVENT, {}, true);
  }
  /**
   * Close popover and sets the pending flag
   */
  close() {
    if (!this.isOpen()) return;
    this.dialogEl.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Attribute.ARIA_HIDDEN, 'true');
    this.buttonEl.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Attribute.ARIA_EXPANDED, 'false');
    this.root.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.IS_SHOWN);
    if (this.closeEl) this.closeEl.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.IS_SHOWN);
    this.setElementFocus();
    this.emit(_constants__WEBPACK_IMPORTED_MODULE_6__.CustomEvent.CLOSE_EVENT, {}, true);
    document.removeEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_4__.EventType.CLICK, this.clickOutsideDialogHandler);
  }
  /**
   * If the Dialog is currently open.
   */
  isOpen() {
    return this.root.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.IS_SHOWN);
  }
  /**
   * The handler is attached to the root element and handles a few cases
   * 1. Opens and closes the dialog via clicking trigger button.
   * 1. Closes the dialog via clicking close button.
   */
  handleButtonClick(event) {
    if (!this.isOpen()) {
      this.open();
    } else if (this.checkEventFromChild(this.buttonEl, event)) {
      this.close();
    } else if (
        this.closeEl && this.checkEventFromChild(this.closeEl, event) &&
        (!event.key || event.key === _events_key__WEBPACK_IMPORTED_MODULE_5__.Key.ENTER || event.key === _events_key__WEBPACK_IMPORTED_MODULE_5__.Key.SPACE)) {
      this.close();
    }
  }
  /**
   * Event handler for Escape key and Enter key.
   */
  handleKeyDown(event) {
    var _a, _b;
    event.stopPropagation();
    if (event.key === _events_key__WEBPACK_IMPORTED_MODULE_5__.Key.ESC) {
      this.close();
    } else if (this.closeEl && this.checkEventFromChild(this.closeEl, event)) {
      // To prevent the mouseclick when pressing return key
      event.preventDefault();
      this.close();
    } else if (
        this.isOpen() && this.checkEventFromChild(this.buttonEl, event) &&
        event.shiftKey && event.key === _events_key__WEBPACK_IMPORTED_MODULE_5__.Key.TAB) {
      event.preventDefault();
      this.close();
    } else if (
        !this.isOpen() && this.checkEventFromChild(this.buttonEl, event) &&
        (event.key === _events_key__WEBPACK_IMPORTED_MODULE_5__.Key.ENTER || event.key === _events_key__WEBPACK_IMPORTED_MODULE_5__.Key.SPACE)) {
      event.preventDefault();
      (_a = this.closeEl) === null || _a === void 0 ?
          void 0 :
          _a.classList.add(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.IS_SHOWN);
      this.open();
    }
    // Show close button when press TAB key.
    if (event.key === _events_key__WEBPACK_IMPORTED_MODULE_5__.Key.TAB &&
        this.checkEventFromChild(this.dialogEl, event)) {
      (_b = this.closeEl) === null || _b === void 0 ?
          void 0 :
          _b.classList.add(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.IS_SHOWN);
    }
  }
  /**
   * Click handler for closing window if user clicks outside the open
   * dialog window.
   */
  handleClickOutsideDialog(event) {
    const containsTarget =
        event.target instanceof Node && this.root.contains(event.target);
    if (!this.checkEventFromChild(this.dialogEl, event) &&
        !this.checkEventFromChild(this.buttonEl, event) && !containsTarget &&
        event.type === _events_eventtype__WEBPACK_IMPORTED_MODULE_4__.EventType.CLICK) {
      this.close();
    }
  }
  /**
   * Calculate the position of the Popover.
   */
  setPopoverPosition() {
    const pos = (0,_base_utils__WEBPACK_IMPORTED_MODULE_1__.getOverlayAutoPosition)(
        this.root, this.dialogEl, this.buttonEl, this.options.placement);
    if (pos) {
      const [left, top] = pos;
      this.dialogEl.style.left = `${left}px`;
      this.dialogEl.style.top = `${top}px`;
    }
  }
  /**
   * Default popover options
   */
  static get defaults() {
    return {
      placement: _constants__WEBPACK_IMPORTED_MODULE_6__.PlacementOptions.BOTTOM,
      takeFocus: true,
    };
  }
}



/***/ }),

/***/ "./_glue/lib/responsivemonitor/index.js":
/*!**********************************************!*\
  !*** ./_glue/lib/responsivemonitor/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ResponsiveMonitor: () => (/* binding */ ResponsiveMonitor)
/* harmony export */ });
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events/eventtype */ "./_glue/lib/events/eventtype.js");

/**
 * Calls handler functions when the document object matches a media query, or
 * when a CSS-injected named breakpoint is included in a list of strings. Can
 * also call another handler when one of the condition above does not apply
 * anymore.
 *
 * This typically can be used to enable or disable a UI component based on the
 * viewport size.
 *
 * Example:
 *
 * new ResponsiveMonitor({
 *   breakpoint: ['medium', 'large'],
 *   enter: (size) => component.start(),
 *   leave: (size) => component.stop(),
 * });
 *
 * new ResponsiveMonitor({
 *   media: '(min-width: 600px)',
 *   transform: (mql) => component.start(),
 *   revert: (mql) => component.stop(),
 * });
 *
 * new ResponsiveMonitor([{
 *   media: '(max-width: 400px)',
 *   transform: (mql) => component1.start(),
 * }, {
 *   media: '(min-width: 501px) and (max-width: 800px)',
 *   transform: component2.start(),
 * }]);
 *
 * For simpler use cases, it is also possible to have a function called every
 * time the current breakpoint changes.
 *
 * const rm = new ResponsiveMonitor();
 * rm.listen((size) => {
 *   if (size == 'medium') {
 *     component.start();
 *   }
 * });
 */
class ResponsiveMonitor {
  /**
   * Returns unique monitor instance.
   */
  static getInstance() {
    if (!ResponsiveMonitor.instance) {
      ResponsiveMonitor.instance = new ResponsiveMonitor();
    }
    return ResponsiveMonitor.instance;
  }
  /**
   * @param configRules One or several media queries associated with callbacks
   *     to trigger when their result changes.
   */
  constructor(configRules = []) {
    this.vpUpdateHandler = () => {
      this.handleViewportUpdate();
    };
    /**
     * Registered media query rules;
     */
    this.mqRuleHandlerMaps = [];
    /**
     * Callback functions used to listen to breakpoint changes.
     */
    this.bpChangeHandlers = [];
    /**
     * Registered breakpoint rules.
     */
    this.bpRuleHandlerMaps = [];
    /**
     * The current named breakpoint.
     */
    this.currentBreakpoint = this.readBreakpoint();
    /**
     * The previous named breakpoint.
     */
    this.previousBreakpoint = '';
    // Setup media query rules
    if (!Array.isArray(configRules)) {
      configRules = [configRules];
    }
    configRules.forEach(this.addRule.bind(this));
    // Setup named breakpoints listening
    window.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_0__.EventType.DOM_CONTENT_READY, this.vpUpdateHandler);
    window.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_0__.EventType.RESIZE, this.vpUpdateHandler);
    window.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_0__.EventType.ORIENTATION_CHANGE, this.vpUpdateHandler);
  }
  /**
   * Listens to media query or breakpoint changes.
   */
  listen(handler) {
    if (typeof handler === 'function') {
      this.bpChangeHandlers.push(handler);
    } else {
      this.addRule(handler);
    }
  }
  /**
   * Stops listening to media query or breakpoint changes.
   */
  unlisten(handler) {
    if (typeof handler === 'function') {
      let handler;
      for (let i = 0; (handler = this.bpChangeHandlers[i]); i++) {
        if (handler === handler) {
          this.bpChangeHandlers.splice(i, 1);
          return;
        }
      }
    } else {
      this.removeRule(handler);
    }
  }
  /**
   * Stops listening to all media query and breakpoint rules.
   */
  destroy() {
    this.currentBreakpoint = '';
    for (const mq of this.mqRuleHandlerMaps) {
      // tslint:disable-next-line:deprecation
      mq.mql.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_0__.EventType.CHANGE, mq.handler);
    }
    this.mqRuleHandlerMaps = [];
    this.bpRuleHandlerMaps = [];
    this.bpChangeHandlers = [];
    window.removeEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_0__.EventType.DOM_CONTENT_READY, this.vpUpdateHandler);
    window.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_0__.EventType.RESIZE, this.vpUpdateHandler);
    window.removeEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_0__.EventType.ORIENTATION_CHANGE, this.vpUpdateHandler);
  }
  /**
   * Returns the last known named breakpoint.
   */
  getCurrentBreakpoint() {
    return this.currentBreakpoint;
  }
  isBreakpointRule(rule) {
    return rule.breakpoint !== undefined;
  }
  isMediaQueryRuleRule(rule) {
    return rule.media !== undefined;
  }
  /**
   * Setup callback functions on a media query or a set of named breakpoints.
   * @param rule Configuration properties.
   */
  addRule(rule) {
    if (this.isBreakpointRule(rule)) {
      this.addBreakpointRule(rule);
      return;
    } else if (this.isMediaQueryRuleRule(rule)) {
      this.addMediaQueryRule(rule);
      return;
    }
  }
  /**
   * Disable callback functions on a media query or a set of named breakpoints.
   * @param rule Configuration properties.
   */
  removeRule(rule) {
    if (this.isBreakpointRule(rule)) {
      this.removeBreakpointRule(rule);
      return;
    } else if (this.isMediaQueryRuleRule(rule)) {
      this.removeMediaQueryRule(rule);
      return;
    }
  }
  /**
   * Setup callback functions on a set of named breakpoints.
   */
  addBreakpointRule(rule) {
    const checkBreakpoint = (size) => {
      const bps = rule.breakpoint;
      if (bps.indexOf(this.previousBreakpoint) === -1 &&
          bps.indexOf(this.currentBreakpoint) !== -1) {
        rule.enter(size);
        return;
      }
      if (rule.leave && bps.indexOf(this.previousBreakpoint) !== -1 &&
          bps.indexOf(this.currentBreakpoint) === -1) {
        rule.leave(size);
      }
    };
    // Keeps references for later unregistration purposes
    this.bpRuleHandlerMaps.push({
      rule,
      handler: checkBreakpoint,
    });
    checkBreakpoint(this.getCurrentBreakpoint());
    this.listen(checkBreakpoint);
  }
  /**
   * Disable callback functions on a set of named breakpoints.
   */
  removeBreakpointRule(rule) {
    let bpMap;
    for (let i = 0; (bpMap = this.bpRuleHandlerMaps[i]); i++) {
      if (bpMap.rule === rule) {
        this.unlisten(bpMap.handler);
      }
    }
  }
  /**
   * Setup callback functions on a media query.
   */
  addMediaQueryRule(rule) {
    const callback = this.handleMediaQueryChange(rule.transform, rule.revert);
    const mql = window.matchMedia(rule.media);
    // tslint:disable-next-line:no-any.
    const handler = () => {
      callback(mql);
    };
    // tslint:disable-next-line:deprecation
    mql.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_0__.EventType.CHANGE, handler);
    // Keeps references for later unregistration purposes
    this.mqRuleHandlerMaps.push({
      rule,
      mql,
      handler,
    });
    // Triggers callback at once if the media query result is true.
    if (mql.matches) {
      callback(mql);
    }
  }
  /**
   * Disable callback functions on a media query.
   */
  removeMediaQueryRule(rule) {
    for (const mqMap of this.mqRuleHandlerMaps) {
      if (mqMap.rule === rule) {
        // tslint:disable-next-line:deprecation
        mqMap.mql.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_0__.EventType.CHANGE, mqMap.handler);
      }
    }
  }
  /**
   * Creates a function that will trigger callbacks based on the media
   * query's result.
   * @param transformFunc Function to call if the media query result is true.
   * @param revertFunc Function to call if the media query result reverts to
   *     false.
   * @return A function used as handler of a media query list.
   */
  handleMediaQueryChange(transformFunc, revertFunc) {
    return (mql) => {
      if (mql.matches) {
        transformFunc(mql);
      } else if (revertFunc) {
        revertFunc(mql);
      }
    };
  }
  /**
   * Fires breakpoint callbacks if the current named breakpoint parsed from the
   * DOM has changed since the previous call.
   */
  handleViewportUpdate() {
    const breakpoint = this.readBreakpoint();
    if (this.currentBreakpoint === breakpoint) {
      return;
    }
    this.previousBreakpoint = this.currentBreakpoint;
    this.currentBreakpoint = breakpoint;
    for (const handler of this.bpChangeHandlers) {
      handler(this.currentBreakpoint);
    }
  }
  /**
   * Retrieves the named breakpoint currently injected in DOM.
   */
  readBreakpoint() {
    const styles = window.getComputedStyle(document.body, ':after');
    const content = styles.getPropertyValue('content');
    const breakpoint = content.replace(/["']/g, '');
    return breakpoint;
  }
}



/***/ }),

/***/ "./_glue/lib/smoothscroll/constants.js":
/*!*********************************************!*\
  !*** ./_glue/lib/smoothscroll/constants.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ScrollEventType: () => (/* binding */ ScrollEventType),
/* harmony export */   Strings: () => (/* binding */ Strings),
/* harmony export */   defaultOptions: () => (/* binding */ defaultOptions)
/* harmony export */ });
/* harmony import */ var _easing___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../easing/ */ "./_glue/lib/easing/index.js");
/**
 * @fileoverview Config typedef and event enum for SmoothScroll.
 */

var ScrollEventType;
(function(ScrollEventType) {
ScrollEventType['STARTSCROLL'] = 'glue.smoothScroll.start';
ScrollEventType['ENDSCROLL'] = 'glue.smoothScroll.end';
})(ScrollEventType || (ScrollEventType = {}));
var Strings;
(function(Strings) {
Strings['MISSING_PAGE_ELEMENT'] =
    'Smooth Scrolling requires a valid page element.';
Strings['DIRECTION_MALFORMED'] =
    'Scroll direction value only accepts "x", "y" or "both"';
})(Strings || (Strings = {}));
const defaultOptions = {
  'duration': 600,
  'offset': {
    'x': 0,
    'y': 0,
  },
  'easing': _easing___WEBPACK_IMPORTED_MODULE_0__.easeInOutQuart,
  'hash': true,
  'direction': 'both',
};



/***/ }),

/***/ "./_glue/lib/smoothscroll/index.js":
/*!*****************************************!*\
  !*** ./_glue/lib/smoothscroll/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmoothScroll: () => (/* binding */ SmoothScroll),
/* harmony export */   defaultOptions: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.defaultOptions)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./_glue/lib/smoothscroll/constants.js");
/* harmony import */ var _scrollmanager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scrollmanager */ "./_glue/lib/smoothscroll/scrollmanager.js");
/**
 * @fileoverview The SmoothScroll module allows an animated smooth scroll from
 * one location within the document to another. It broadcasts events when
 * scrolling starts and ends. Configurable parameters include duration of the
 * scroll, offset of the target element, the easing function and URL hash.
 *
 * For documentation and demo see
 * https://glue-docs.appspot.com/docs/components/raw/smoothscroll
 */


class SmoothScroll {
  constructor(config) {
    this.currentScrollElementId = '';
    this.scrollManager = new _scrollmanager__WEBPACK_IMPORTED_MODULE_1__.ScrollManager();
    this.globalConfig = Object.assign({}, _constants__WEBPACK_IMPORTED_MODULE_0__.defaultOptions, config);
  }
  /**
   * Allows an animated smooth scroll from one location within the
   * document to another.
   * @param id Element id.
   * @param elementConfig The config object to use for the scroll.
   */
  scrollToId(id = '', elementConfig) {
    let element;
    // If asked to scroll to a non-fragment, just scroll to the first page
    // element, which is typically the top of the page. Otherwise, scroll to
    // a real element in the page.
    if (id === '' || id === '#') {
      element = document.body.firstElementChild;
    } else {
      element = document.getElementById(id);
      if (!element) {
        throw new Error(`The target element for id "${id}" does not exist.`);
      }
    }
    this.currentScrollElementId = id;
    this.currentScrollElement = element;
    // Build the config out of the element config and global config.
    elementConfig = Object.assign({}, this.globalConfig, elementConfig);
    // Ask the scroll manager to start the scroll.
    this.scrollManager.startScroll(this.currentScrollElement, elementConfig);
    const temp = window.scrollY;
    if (elementConfig['hash'] &&
        window.location.hash !== `#${this.currentScrollElementId}`) {
      window.location.hash = `#${this.currentScrollElementId}`;
    }
    document.documentElement.scrollTop = temp;
  }
  /**
   * Destroy the component. Removes listeners.
   */
  destroy() {
    this.scrollManager.destroy();
  }
}



/***/ }),

/***/ "./_glue/lib/smoothscroll/scrollmanager.js":
/*!*************************************************!*\
  !*** ./_glue/lib/smoothscroll/scrollmanager.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ScrollManager: () => (/* binding */ ScrollManager)
/* harmony export */ });
/* harmony import */ var _easing___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../easing/ */ "./_glue/lib/easing/index.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./_glue/lib/smoothscroll/constants.js");
/**
 * @fileoverview Manages the scrolling animation operations for SmoothScroll.
 * Can be used independently of the SmoothScroll component to actuate scrolling.
 */





class ScrollManager {
  constructor() {
    this.elapsedTime = 0;
    this.startTime = 0;
    this.animationFrame = 0;
    this.position = {'x': 0, 'y': 0};
    this.distance = this.position;
    this.startPosition = this.position;
    this.endPosition = this.position;
    this.config = _constants__WEBPACK_IMPORTED_MODULE_2__.defaultOptions;
    this.mousewheelHandlerFunc = () => {
      this.mousewheelHandler();
    };
  }
  /**
   * Starts scroll, broadcasts 'start scroll' event and attaches mousewheel
   * event listener to window object.
   * @param element The element to scroll to.
   * @param config The config object for this scroll.
   */
  startScroll(element, config) {
    var _a;
    // Bail out if the scroll is in progress.
    if (this.animationFrame !== 0) return;
    if (!(element instanceof Element)) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_2__.Strings.MISSING_PAGE_ELEMENT);
    }
    // Broadcasts start scroll event globally.
    document.dispatchEvent(new Event(_constants__WEBPACK_IMPORTED_MODULE_2__.ScrollEventType.STARTSCROLL, {
      bubbles: true,
      cancelable: false,
    }));
    if (config) this.config = config;
    this.scrollElement = element;
    // Figure out the animation settings.
    this.startPosition = this.getScrollPosition();
    this.endPosition = this.getEndPosition(this.scrollElement);
    this.distance = {
      'x': this.endPosition.x - this.startPosition.x - this.config.offset.x,
      'y': this.endPosition.y - this.startPosition.y - this.config.offset.y,
    };
    this.easingFunction = typeof this.config.easing === 'string' ?
        _easing___WEBPACK_IMPORTED_MODULE_0__.easingFunctions[this.config.easing] :
        (_a = this.config.easing) !== null && _a !== void 0 ?
        _a :
        _easing___WEBPACK_IMPORTED_MODULE_0__.easingFunctions.linear;
    this.elapsedTime = 0;
    this.position = {'x': 0, 'y': 0};
    window.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_1__.EventType.MOUSEWHEEL, this.mousewheelHandlerFunc);
    this.animateScroll();
  }
  /**
   * Stops smooth scroll.
   */
  stopScroll() {
    // Broadcasts ENDSCROLL event globally.
    document.dispatchEvent(new Event(_constants__WEBPACK_IMPORTED_MODULE_2__.ScrollEventType.ENDSCROLL, {
      bubbles: true,
      cancelable: false,
    }));
    window.cancelAnimationFrame(this.animationFrame);
    this.animationFrame = 0;
    this.startTime = 0;
    this.removeMousewheelListener();
    this.config = _constants__WEBPACK_IMPORTED_MODULE_2__.defaultOptions;
  }
  /**
   * Recursively scrolls the page until it reaches the element.
   */
  animateScroll() {
    // If there is no config, then quit. Fixes an issue where this
    // would be called one last time when cancelling mid-scroll.
    if (!this.startTime) {
      this.startTime = Date.now();
    }
    const now = Date.now();
    this.elapsedTime = now - this.startTime;
    this.calculatePosition();
    this.updatePosition();
    // Continues the animation until the timer reaches the end.
    if (this.elapsedTime < this.config.duration) {
      this.animationFrame = window.requestAnimationFrame(() => {
        this.animateScroll();
      });
    } else {
      this.stopScroll();
    }
  }
  /**
   * Calculates the position based on elapsed time.
   */
  calculatePosition() {
    var _a, _b;
    if (this.config.duration > 0) {
      const percentage = Math.min(this.elapsedTime / this.config.duration, 1);
      const value = this.easingFunction(percentage);
      this.position.x = this.startPosition.x +
          ((_a = this.distance) === null || _a === void 0 ? void 0 : _a.x) *
              value;
      this.position.y = this.startPosition.y +
          ((_b = this.distance) === null || _b === void 0 ? void 0 : _b.y) *
              value;
    } else {
      this.position = this.endPosition;
    }
  }
  /**
   * Gets the page scroll position.
   * @return Page scroll position.
   */
  getScrollPosition() {
    if (window.pageYOffset) {
      return {
        'x': window.pageXOffset,
        'y': window.pageYOffset,
      };
    } else {
      return {
        'x': document.documentElement.scrollLeft,
        'y': document.documentElement.scrollTop,
      };
    }
  }
  /**
   * Gets the scroll position of the element.
   * @return The scroll position of the element.
   */
  getEndPosition(el) {
    let rect = {left: 0, top: 0};
    if (el && 'getBoundingClientRect' in el) {
      rect = el.getBoundingClientRect();
    }
    return {
      'x': rect.left + this.getScrollPosition().x,
      'y': rect.top + this.getScrollPosition().y,
    };
  }
  /**
   * Updates scroll position.
   */
  updatePosition() {
    switch (this.config.direction) {
      case 'x':
        this.updateScrollLeft();
        break;
      case 'y':
        this.updateScrollTop();
        break;
      case 'both':
        this.updateScrollLeft();
        this.updateScrollTop();
        break;
      default:
        throw new Error();
    }
  }
  /**
   * Updates scroll left position.
   */
  updateScrollLeft() {
    // Scrolls to the element if requestAnimationFrame is not supported.
    const position = this.position.x;
    document.body.scrollLeft = position;
    document.documentElement.scrollLeft = position;
  }
  /**
   * Updates scroll top position.
   */
  updateScrollTop() {
    // Scrolls to the element if requestAnimationFrame is not supported.
    const position = this.position.y;
    document.body.scrollTop = position;
    document.documentElement.scrollTop = position;
  }
  /**
   * Handler function for mousewheel event.
   */
  mousewheelHandler() {
    if (this.animationFrame) {
      this.stopScroll();
    }
  }
  /**
   * Remove the moisewheel event listener.
   */
  removeMousewheelListener() {
    window.removeEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_1__.EventType.MOUSEWHEEL, this.mousewheelHandlerFunc);
  }
  /**
   * Stopp the scrolling action and Destroy the component.
   */
  destroy() {
    this.stopScroll();
  }
}



/***/ }),

/***/ "./_glue/lib/social/constants.js":
/*!***************************************!*\
  !*** ./_glue/lib/social/constants.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CssClasses: () => (/* binding */ CssClasses)
/* harmony export */ });
/**
 * @fileoverview Constants used by the Social component.
 */
var CssClasses;
(function(CssClasses) {
CssClasses['SOCIAL_ROOT'] = 'glue-social';
CssClasses['PERSISTENT_VARIANT'] = 'glue-social--persistent';
CssClasses['COLOR_VARIANT'] = 'glue-social--color';
CssClasses['MONOCHROME_VARIANT'] = 'glue-social--monochrome';
CssClasses['PARTIAL_MONOCHROME_VARIANT'] = 'glue-social--partialmonochrome';
CssClasses['PANELS_VARIANT'] = 'glue-social--zippy';
CssClasses['PANELS_OPPOSITE_VARIANT'] = 'glue-social--zippy-opposite';
CssClasses['SOCIAL_GROUP'] = 'glue-social__group';
CssClasses['SOCIAL_LIST'] = 'glue-social__list';
CssClasses['SOCIAL_TITLE'] = 'glue-social__title';
CssClasses['SOCIAL_TITLE_INLINE'] = 'glue-social__title--inline';
CssClasses['SOCIAL_TITLE_ZIPPY'] = 'glue-social__title--zippy';
CssClasses['SOCIAL_ITEM'] = 'glue-social__item';
CssClasses['COPY_ROOT'] = 'glue-social__copy';
CssClasses['COPY_BUTTON'] = 'glue-social__copy-btn';
CssClasses['COPY_INPUT'] = 'glue-social__copy-input';
CssClasses['PANELS_SHARE_ICON'] = 'glue-social__share-icon';
CssClasses['LINK_ROOT'] = 'glue-social__link';
CssClasses['ICON_CLASSES'] = 'glue-icon glue-icon--social glue-icon--24px';
CssClasses['POPOVER_ROOT'] = 'glue-social__popover';
CssClasses['POPOVER_CLOSE'] = 'glue-social__close-btn';
CssClasses['POPOVER_DIALOG'] = 'glue-social__dialog';
CssClasses['POPOVER_TRIGGER'] = 'glue-social__icon-trigger';
CssClasses['TOOLTIP_ROOT'] = 'glue-social__tooltip';
CssClasses['TOOLTIP_TRIGGER'] = 'glue-social__tooltip-trigger';
CssClasses['TOOLTIP_CONTENT'] = 'glue-social__tooltip-content';
CssClasses['VISUALLY_HIDDEN'] = 'glue-visually-hidden';
})(CssClasses || (CssClasses = {}));



/***/ }),

/***/ "./_glue/lib/social/index.js":
/*!***********************************!*\
  !*** ./_glue/lib/social/index.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Social: () => (/* binding */ Social)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _copy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../copy */ "./_glue/lib/copy/index.js");
/* harmony import */ var _copy_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../copy/constants */ "./_glue/lib/copy/constants.js");
/* harmony import */ var _expansionpanels__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../expansionpanels */ "./_glue/lib/expansionpanels/index.js");
/* harmony import */ var _expansionpanels_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../expansionpanels/constants */ "./_glue/lib/expansionpanels/constants.js");
/* harmony import */ var _popover__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../popover */ "./_glue/lib/popover/index.js");
/* harmony import */ var _popover_constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../popover/constants */ "./_glue/lib/popover/constants.js");
/* harmony import */ var _tooltip__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../tooltip */ "./_glue/lib/tooltip/index.js");
/* harmony import */ var _tooltip_constants__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../tooltip/constants */ "./_glue/lib/tooltip/constants.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./constants */ "./_glue/lib/social/constants.js");
/**
 * @fileoverview Glue Social component
 * Initializes available subcomponents (popover, copy, expansion panels)
 */













class Social extends _base__WEBPACK_IMPORTED_MODULE_0__.Component {
  /**
   * @param root The social element container.
   */
  constructor(root) {
    super(root);
    this.tooltipComponents = [];
    // Grabs subcomponent elements if they exist
    this.copyEl = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.COPY_ROOT}`);
    this.popoverEl = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.POPOVER_ROOT}`);
    this.panelsEl = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.SOCIAL_GROUP}`);
    this.panelTitleEl = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.SOCIAL_TITLE}`);
    this.socialListEl = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.SOCIAL_LIST}`);
    this.tooltipEls =
        Array.from(this.root.querySelectorAll(`.${_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.TOOLTIP_ROOT}`));
    this.initialize();
  }
  /** Initializes the component. */
  initialize() {
    this.addCopy();
    this.addPopover();
    this.addPanels();
    this.addTooltips();
  }
  /**
   * Destroys the social instance and any subcomponents.
   */
  destroy() {
    this.removeCopy();
    this.removePopover();
    this.removePanels();
    this.removeTooltips();
  }
  /**
   * Sets up copy component if elements are present
   */
  addCopy() {
    var _a, _b;
    const copyInput = (_a = this.copyEl) === null || _a === void 0 ?
        void 0 :
        _a.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.COPY_INPUT}`);
    const copyButton = (_b = this.copyEl) === null || _b === void 0 ?
        void 0 :
        _b.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.COPY_BUTTON}`);
    if (!this.copyEl || !copyInput || !copyButton) {
      return;
    }
    // Add classes and attributes to the various sub elements
    this.copyEl.classList.add(_copy_constants__WEBPACK_IMPORTED_MODULE_3__.CssClasses.ROOT);
    copyInput.classList.add(_copy_constants__WEBPACK_IMPORTED_MODULE_3__.CssClasses.VALUE);
    copyButton.classList.add(_copy_constants__WEBPACK_IMPORTED_MODULE_3__.CssClasses.BUTTON);
    copyButton.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_LIVE, 'polite');
    // Initialize the component
    this.copyComponent = new _copy__WEBPACK_IMPORTED_MODULE_2__.Copy(this.copyEl);
  }
  /**
   * Removes copy component if present
   */
  removeCopy() {
    var _a, _b, _c;
    const copyInput = (_a = this.copyEl) === null || _a === void 0 ?
        void 0 :
        _a.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.COPY_INPUT}`);
    const copyButton = (_b = this.copyEl) === null || _b === void 0 ?
        void 0 :
        _b.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.COPY_BUTTON}`);
    if (!this.copyEl || !copyInput || !copyButton) {
      return;
    }
    // Destroy the component
    (_c = this.copyComponent) === null || _c === void 0 ? void 0 : _c.destroy();
    // Remove classes and attributes
    this.copyEl.classList.remove(_copy_constants__WEBPACK_IMPORTED_MODULE_3__.CssClasses.ROOT);
    copyInput.classList.remove(_copy_constants__WEBPACK_IMPORTED_MODULE_3__.CssClasses.VALUE);
    copyButton.classList.remove(_copy_constants__WEBPACK_IMPORTED_MODULE_3__.CssClasses.BUTTON);
    copyButton.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_LIVE);
  }
  /**
   * Sets up popover component if elements are present
   */
  addPopover() {
    var _a, _b, _c;
    const popoverTrigger = (_a = this.popoverEl) === null || _a === void 0 ?
        void 0 :
        _a.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.POPOVER_TRIGGER}`);
    const popoverDialog = (_b = this.popoverEl) === null || _b === void 0 ?
        void 0 :
        _b.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.POPOVER_DIALOG}`);
    const popoverClose = (_c = this.popoverEl) === null || _c === void 0 ?
        void 0 :
        _c.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.POPOVER_CLOSE}`);
    if (!this.popoverEl || !popoverTrigger || !popoverDialog || !popoverClose) {
      return;
    }
    // Add classes and attributes to the various sub elements
    this.popoverEl.classList.add(_popover_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.ROOT);
    this.popoverEl.dataset[_popover_constants__WEBPACK_IMPORTED_MODULE_7__.DataAttr.TRIGGER] = 'click';
    popoverTrigger.classList.add(_popover_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.TRIGGER);
    popoverDialog.classList.add(_popover_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.DIALOG);
    popoverClose.classList.add(_popover_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.CLOSE_BTN);
    // Initialize the component
    this.popoverComponent = new _popover__WEBPACK_IMPORTED_MODULE_6__.Popover(this.popoverEl, {placement: 'right'});
  }
  /**
   * Removes popover component if present
   */
  removePopover() {
    var _a, _b, _c, _d;
    const popoverTrigger = (_a = this.popoverEl) === null || _a === void 0 ?
        void 0 :
        _a.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.POPOVER_TRIGGER}`);
    const popoverDialog = (_b = this.popoverEl) === null || _b === void 0 ?
        void 0 :
        _b.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.POPOVER_DIALOG}`);
    const popoverClose = (_c = this.popoverEl) === null || _c === void 0 ?
        void 0 :
        _c.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.POPOVER_CLOSE}`);
    if (!this.popoverEl || !popoverTrigger || !popoverDialog || !popoverClose) {
      return;
    }
    // Destroy the component
    (_d = this.popoverComponent) === null || _d === void 0 ? void 0 :
                                                             _d.destroy();
    // Remove classes and attributes
    this.popoverEl.classList.remove(_popover_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.ROOT);
    delete this.popoverEl.dataset[_popover_constants__WEBPACK_IMPORTED_MODULE_7__.DataAttr.TRIGGER];
    popoverTrigger.classList.remove(_popover_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.TRIGGER);
    popoverDialog.classList.remove(_popover_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.DIALOG);
    popoverClose.classList.remove(_popover_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.CLOSE_BTN);
  }
  /**
   * Sets up expansion panels component if elements are present
   */
  addPanels() {
    if (!this.root.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.PANELS_VARIANT) ||
        !this.panelsEl || !this.panelTitleEl || !this.socialListEl) {
      return;
    }
    // Add classes and attributes to the various sub elements
    const panelsId = this.root.id ? this.root.id : 'social-panels';
    this.root.classList.add(`${_expansionpanels_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.GROUP}`);
    this.root.dataset[_expansionpanels_constants__WEBPACK_IMPORTED_MODULE_5__.DataAttr.KEY] = panelsId;
    this.panelsEl.classList.add(`${_expansionpanels_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.PANEL}`);
    // Set up panel title/button
    const panelsButtonEl = document.createElement('button');
    panelsButtonEl.className = this.panelTitleEl.className;
    panelsButtonEl.classList.add(`${_expansionpanels_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.BUTTON}`);
    panelsButtonEl.id = panelsId + '-toggle';
    panelsButtonEl.dataset[_expansionpanels_constants__WEBPACK_IMPORTED_MODULE_5__.DataAttr.TOGGLEFOR] = panelsId + '-content';
    panelsButtonEl.replaceChildren(...this.panelTitleEl.childNodes);
    this.panelTitleEl.replaceChildren();
    this.panelTitleEl.className = '';
    this.panelTitleEl.appendChild(panelsButtonEl);
    this.panelTitleEl.classList.add(`${_expansionpanels_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.TOGGLE}`);
    // Set up panel content
    const panelContentEl = document.createElement('div');
    panelContentEl.classList.add(`${_expansionpanels_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.CONTENT}`);
    this.panelsEl.appendChild(panelContentEl);
    panelContentEl.appendChild(this.socialListEl);
    panelContentEl.id = panelsId + '-content';
    // Initialize the component
    this.expanelsComponent = new _expansionpanels__WEBPACK_IMPORTED_MODULE_4__.ExpansionPanels(this.root);
  }
  /**
   * Removes expansion panels component if present
   */
  removePanels() {
    var _a;
    if (!this.root.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.PANELS_VARIANT) ||
        !this.panelsEl || !this.panelTitleEl || !this.socialListEl) {
      return;
    }
    // Destroy the component
    (_a = this.expanelsComponent) === null || _a === void 0 ? void 0 :
                                                              _a.destroy();
    // Remove panel content
    const panelContentEl =
        this.panelsEl.querySelector(`.${_expansionpanels_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.CONTENT}`);
    this.panelsEl.appendChild(this.socialListEl);
    panelContentEl === null || panelContentEl === void 0 ?
        void 0 :
        panelContentEl.remove();
    const panelsButtonEl =
        this.panelTitleEl.querySelector(`.${_expansionpanels_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.BUTTON}`);
    if (panelsButtonEl) {
      panelsButtonEl.classList.remove(`${_expansionpanels_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.BUTTON}`);
      this.panelTitleEl.className = panelsButtonEl.className;
      this.panelTitleEl.replaceChildren(...panelsButtonEl.childNodes);
      panelsButtonEl.remove();
    }
    // remove panels classes/attributes
    this.root.classList.remove(`${_expansionpanels_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.GROUP}`);
    delete this.root.dataset[_expansionpanels_constants__WEBPACK_IMPORTED_MODULE_5__.DataAttr.KEY];
    this.panelsEl.classList.remove(`${_expansionpanels_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.PANEL}`);
  }
  /**
   * Sets up tooltip components if elements are present
   */
  addTooltips() {
    for (const tooltipEl of this.tooltipEls) {
      const tooltipTrigger =
          tooltipEl.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.TOOLTIP_TRIGGER}`);
      const tooltipContent =
          tooltipEl.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.TOOLTIP_CONTENT}`);
      if (tooltipTrigger && tooltipContent) {
        tooltipEl.classList.add(`${_tooltip_constants__WEBPACK_IMPORTED_MODULE_9__.CssClasses.ROOT}`);
        if (this.root.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.PERSISTENT_VARIANT)) {
          // Use manual positioning for persistent variant tooltips
          tooltipEl.dataset[_tooltip_constants__WEBPACK_IMPORTED_MODULE_9__.DataAttrs.AUTO_POSITION] = 'false';
        }
        tooltipTrigger.classList.add(`${_tooltip_constants__WEBPACK_IMPORTED_MODULE_9__.CssClasses.TRIGGER}`);
        tooltipContent.classList.add(`${_tooltip_constants__WEBPACK_IMPORTED_MODULE_9__.CssClasses.CONTENT}`);
        tooltipContent.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.TOOLTIP);
        // Initialize tooltip Component
        this.tooltipComponents.push(new _tooltip__WEBPACK_IMPORTED_MODULE_8__.Tooltip(tooltipEl));
      }
    }
  }
  /**
   * Removes tooltip components if present
   */
  removeTooltips() {
    while (this.tooltipComponents.length > 0) {
      const tooltipComponent = this.tooltipComponents.pop();
      tooltipComponent === null || tooltipComponent === void 0 ?
          void 0 :
          tooltipComponent.destroy();
    }
    for (const tooltipEl of this.tooltipEls) {
      const tooltipTrigger =
          tooltipEl.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.TOOLTIP_TRIGGER}`);
      const tooltipContent =
          tooltipEl.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_10__.CssClasses.TOOLTIP_CONTENT}`);
      tooltipEl.classList.remove(`${_tooltip_constants__WEBPACK_IMPORTED_MODULE_9__.CssClasses.ROOT}`);
      delete tooltipEl.dataset[_tooltip_constants__WEBPACK_IMPORTED_MODULE_9__.DataAttrs.AUTO_POSITION];
      tooltipTrigger === null || tooltipTrigger === void 0 ?
          void 0 :
          tooltipTrigger.classList.remove(`${_tooltip_constants__WEBPACK_IMPORTED_MODULE_9__.CssClasses.TRIGGER}`);
      tooltipContent === null || tooltipContent === void 0 ?
          void 0 :
          tooltipContent.classList.remove(`${_tooltip_constants__WEBPACK_IMPORTED_MODULE_9__.CssClasses.CONTENT}`);
      tooltipContent === null || tooltipContent === void 0 ?
          void 0 :
          tooltipContent.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE);
    }
  }
}



/***/ }),

/***/ "./_glue/lib/tabpanels/constants.js":
/*!******************************************!*\
  !*** ./_glue/lib/tabpanels/constants.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CssClasses: () => (/* binding */ CssClasses),
/* harmony export */   DataAttr: () => (/* binding */ DataAttr),
/* harmony export */   Strings: () => (/* binding */ Strings)
/* harmony export */ });
/**
 * @fileoverview Constants used in Tab panels component.
 */
var CssClasses;
(function(CssClasses) {
CssClasses['TABPANEL_CONTAINER'] = 'glue-tabpanels';
CssClasses['TABPANEL_CENTERED'] = 'glue-tabpanels--centeredtabs';
CssClasses['TABPANEL_ICON'] = 'glue-tabpanels__heading-icon';
CssClasses['TABPANEL_PAGE_LIST'] = 'glue-tabpanels__page-list';
CssClasses['TABPANEL_PANEL_LIST'] = 'glue-tabpanels__panel-list';
CssClasses['TABPANEL_PANEL_TOGGLE'] = 'glue-tabpanels__panel-toggle';
CssClasses['TABPANEL_PANEL_BUTTON'] = 'glue-tabpanels__panel-button';
CssClasses['TABPANEL_PANEL_TITLE'] = 'glue-tabpanels__panel-title';
CssClasses['TABPANEL_PANEL_CONTENT'] = 'glue-tabpanels__panel-content';
CssClasses['TABPANEL_ELEMENT_SCOPE'] = 'glue-tabpanels__scope';
CssClasses['PANELS_TOGGLE_HEADER'] = 'glue-expansion-panel__button-header';
CssClasses['TABSET_ROOT'] = 'glue-tabs';
CssClasses['TABSET_TABLIST'] = 'glue-tabs__tablist';
CssClasses['TABSET_TAB'] = 'glue-tab';
CssClasses['TABSET_BUTTON'] = 'glue-tabs__button';
CssClasses['TABSET_PANELCONTAINER'] = 'glue-tabs__panelgroup';
CssClasses['TABSET_PAGE'] = 'glue-tabs__panel';
})(CssClasses || (CssClasses = {}));
var DataAttr;
(function(DataAttr) {
DataAttr['PANELS_KEY'] = 'glueExpansionPanelsKey';
DataAttr['TOGGLEFOR'] = 'glueExpansionPanelToggleFor';
DataAttr['INITIAL'] = 'glueExpansionPanelInitial';
})(DataAttr || (DataAttr = {}));
var Strings;
(function(Strings) {
Strings['MISSING_PAGE_LIST'] =
    'No element with glue-tabpanels__page-list class was found. TabPanels requires a Panels Page List';
Strings['MISSING_PANEL_LIST'] =
    'No element with glue-tabpanels__panel-list class was found. TabPanels requires a Panel List';
})(Strings || (Strings = {}));



/***/ }),

/***/ "./_glue/lib/tabpanels/index.js":
/*!**************************************!*\
  !*** ./_glue/lib/tabpanels/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabPanels: () => (/* binding */ TabPanels)
/* harmony export */ });
/* harmony import */ var _base_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base/index */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _expansionpanels__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../expansionpanels */ "./_glue/lib/expansionpanels/index.js");
/* harmony import */ var _expansionpanels_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../expansionpanels/constants */ "./_glue/lib/expansionpanels/constants.js");
/* harmony import */ var _responsivemonitor___WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../responsivemonitor/ */ "./_glue/lib/responsivemonitor/index.js");
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../tabs */ "./_glue/lib/tabs/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./constants */ "./_glue/lib/tabpanels/constants.js");









class TabPanels extends _base_index__WEBPACK_IMPORTED_MODULE_0__.Component {
  constructor(root, options) {
    super(root);
    this.options = Object.assign({}, TabPanels.defaults, options);
    // Set up expansion panel options
    this.panelsoptions = {
      isAnimated: this.options.isPanelsAnimated,
      panelsCount: this.options.panelsCount,
    };
    this.tablistEl =
        this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABPANEL_PAGE_LIST}`);
    this.panelsEl =
        this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABPANEL_PANEL_LIST}`);
    this.initialize();
  }
  /** Init the component. */
  initialize() {
    // Bail out if there are no elements for the panel and tabs.
    if (!this.tablistEl) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.MISSING_PAGE_LIST);
    }
    if (!this.panelsEl) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.MISSING_PANEL_LIST);
    }
    // Initially set up as tabs
    this.configureTabs(true);
    this.tabsComponent = new _tabs__WEBPACK_IMPORTED_MODULE_5__.Tabs(this.root);
    this.currentTab = this.tabsComponent.observer.data['currentTab'];
    if (this.options.isResponsive) {
      // Set up rules for Responsive Monitor
      this.responsiveTabsMonitor = new _responsivemonitor___WEBPACK_IMPORTED_MODULE_4__.ResponsiveMonitor({
        breakpoint: this.options.panelsBreakpoints,
        enter: () => {
          // Entering x-small/mobile breakpoint. Use expansion panels
          if (this.tabsComponent) {
            this.currentTab = this.tabsComponent.observer.data['currentTab'];
            this.tabsComponent.destroy();
            this.tabsComponent = undefined;
          }
          this.configureTabs(false);
          this.configureExpansionPanels(true, this.currentTab);
          this.panelsComponent =
              new _expansionpanels__WEBPACK_IMPORTED_MODULE_2__.ExpansionPanels(this.panelsEl, this.panelsoptions);
        },
        leave: () => {
          // Leaving x-small/mobile breakpoint. Use tabs
          if (this.panelsComponent) {
            this.panelsComponent.destroy();
            this.panelsComponent = undefined;
          }
          this.configureExpansionPanels(false, 0);
          this.configureTabs(true);
          this.tabsComponent = new _tabs__WEBPACK_IMPORTED_MODULE_5__.Tabs(this.root);
          this.tabsComponent.observer.data['currentTab'] = this.currentTab;
        },
      });
    }
  }
  /**
   * Default responsive tabs options.
   */
  static get defaults() {
    return {
      panelsBreakpoints: ['sm'],
      isPanelsAnimated: true,
      isResponsive: true,
      panelsCount: 2,
    };
  }
  /**
   * Set up the Tabs Component.
   */
  configureTabs(isTabs) {
    // Group settings
    this.root.classList.toggle(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABSET_ROOT, isTabs);
    // Tab list
    this.tablistEl.classList.toggle(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABSET_TABLIST, isTabs);
    // Temporarily set scope class for query selector scoping
    // This approximates :scope in the query selector
    this.tablistEl.classList.add(`${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABPANEL_ELEMENT_SCOPE}`);
    const tabsEls = Array.from(this.tablistEl.querySelectorAll(
        `.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABPANEL_ELEMENT_SCOPE} > div`));
    for (const el of tabsEls) {
      el.classList.toggle(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABSET_TAB, isTabs);
    }
    // Remove scope class
    this.tablistEl.classList.remove(`${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABPANEL_ELEMENT_SCOPE}`);
    // Tabs (shared with Panels group element)
    this.panelsEl.classList.toggle(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABSET_PANELCONTAINER, isTabs);
    // Temporarily set scope class for query selector scoping
    this.panelsEl.classList.add(`${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABPANEL_ELEMENT_SCOPE}`);
    const panelsEls = Array.from(this.panelsEl.querySelectorAll(
        `.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABPANEL_ELEMENT_SCOPE} > div`));
    for (const panelEl of panelsEls) {
      panelEl.classList.toggle(_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABSET_PAGE, isTabs);
    }
    // Remove scope class
    this.panelsEl.classList.remove(`${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABPANEL_ELEMENT_SCOPE}`);
  }
  /**
   * Set up the Expansion Panels Component.
   */
  configureExpansionPanels(isPanels, currentTab) {
    // Group settings
    this.panelsEl.classList.toggle(_expansionpanels_constants__WEBPACK_IMPORTED_MODULE_3__.CssClasses.GROUP, isPanels);
    // Individual panel settings
    let panelCount = 1;
    // Temporarily set scope class for query selector scoping
    // This approximates :scope in the query selector
    this.panelsEl.classList.add(`${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABPANEL_ELEMENT_SCOPE}`);
    const panelsEls = Array.from(this.panelsEl.querySelectorAll(
        `.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABPANEL_ELEMENT_SCOPE} > div`));
    for (const panelEl of panelsEls) {
      // Temporarily set scope class for query selector scoping
      panelEl.classList.add(`${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABPANEL_ELEMENT_SCOPE}`);
      panelEl.classList.toggle(_expansionpanels_constants__WEBPACK_IMPORTED_MODULE_3__.CssClasses.PANEL, isPanels);
      panelEl.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_HIDDEN);
      const panelToggleEl =
          panelEl.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABPANEL_ELEMENT_SCOPE} > .${
              _constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABPANEL_PANEL_TOGGLE}`);
      panelToggleEl.classList.toggle(_expansionpanels_constants__WEBPACK_IMPORTED_MODULE_3__.CssClasses.TOGGLE, isPanels);
      const panelButtonEl = panelToggleEl.querySelector(
          `.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABPANEL_ELEMENT_SCOPE} > .${
              _constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABPANEL_PANEL_TOGGLE} > :first-child`);
      panelButtonEl.classList.toggle(_expansionpanels_constants__WEBPACK_IMPORTED_MODULE_3__.CssClasses.BUTTON, isPanels);
      const panelTitleEl =
          panelToggleEl.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABPANEL_ELEMENT_SCOPE} .${
              _constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABPANEL_PANEL_TITLE}`);
      panelTitleEl.classList.toggle(
          _expansionpanels_constants__WEBPACK_IMPORTED_MODULE_3__.CssClasses.HEADER_TEXT, isPanels);
      const panelContentEl =
          panelEl.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABPANEL_ELEMENT_SCOPE} > .${
              _constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABPANEL_PANEL_CONTENT}`);
      panelContentEl.classList.toggle(_expansionpanels_constants__WEBPACK_IMPORTED_MODULE_3__.CssClasses.CONTENT, isPanels);
      if (isPanels) {
        panelButtonEl.dataset[_constants__WEBPACK_IMPORTED_MODULE_6__.DataAttr.TOGGLEFOR] = panelContentEl.id;
        if (panelCount === currentTab) {
          // Set current tab to render as expanded
          panelContentEl.dataset[_constants__WEBPACK_IMPORTED_MODULE_6__.DataAttr.INITIAL] = 'expanded';
        }
        panelCount++;
      } else {
        delete panelButtonEl.dataset[_constants__WEBPACK_IMPORTED_MODULE_6__.DataAttr.TOGGLEFOR];
        delete panelContentEl.dataset[_constants__WEBPACK_IMPORTED_MODULE_6__.DataAttr.INITIAL];
      }
      // Remove scope class
      panelEl.classList.remove(`${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABPANEL_ELEMENT_SCOPE}`);
    }
    // Remove scope class
    this.panelsEl.classList.remove(`${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABPANEL_ELEMENT_SCOPE}`);
  }
  /**
   * @see {Component.destroy}
   */
  destroy() {
    // Destroy subcomponents if set
    if (this.panelsComponent) {
      this.panelsComponent.destroy();
      this.panelsComponent = undefined;
      this.configureExpansionPanels(false, 0);
    }
    if (this.tabsComponent) {
      this.tabsComponent.destroy();
      this.tabsComponent = undefined;
      this.configureTabs(false);
    }
    // Destroy responsive monitor instance if set
    if (this.responsiveTabsMonitor) {
      this.responsiveTabsMonitor.destroy();
    }
  }
}



/***/ }),

/***/ "./_glue/lib/tabs/constants.js":
/*!*************************************!*\
  !*** ./_glue/lib/tabs/constants.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CssClasses: () => (/* binding */ CssClasses),
/* harmony export */   Strings: () => (/* binding */ Strings),
/* harmony export */   TabsAttrs: () => (/* binding */ TabsAttrs)
/* harmony export */ });
/**
 * Data attribute used for query selecting a specific tab.
 */
var TabsAttrs;
(function(TabsAttrs) {
TabsAttrs['CURRENT'] = 'glueTabsCurrent';
})(TabsAttrs || (TabsAttrs = {}));
var CssClasses;
(function(CssClasses) {
CssClasses['ROOT'] = 'glue-tabs';
CssClasses['TABLIST'] = 'glue-tabs__tablist';
CssClasses['TAB'] = 'glue-tab';
CssClasses['PANEL'] = 'glue-tabs__panel';
CssClasses['PANELGROUP'] = 'glue-tabs__panelgroup';
CssClasses['IS_SHOWN'] = 'glue-is-shown';
})(CssClasses || (CssClasses = {}));
var Strings;
(function(Strings) {
Strings['TRIGGER'] = 'trigger';
Strings['PLACEMENT'] = 'placement';
Strings['FOCUS'] = 'takeFocus';
Strings['ROOT'] = 'root';
Strings['MISSING_TABLIST'] = 'Tablist element is missing.';
Strings['MISSING_TABS'] = 'Tabs element is missing.';
Strings['MISSING_TABPANELS'] = 'Tab panels element is missing.';
Strings['DATA_CURRENT'] = 'currentTab';
})(Strings || (Strings = {}));



/***/ }),

/***/ "./_glue/lib/tabs/index.js":
/*!*********************************!*\
  !*** ./_glue/lib/tabs/index.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tabs: () => (/* binding */ Tabs)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _constants_classes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants/classes */ "./_glue/lib/constants/classes.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _events_key__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../events/key */ "./_glue/lib/events/key.js");
/* harmony import */ var _observer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../observer */ "./_glue/lib/observer/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./constants */ "./_glue/lib/tabs/constants.js");









/**
 * Static Tabs creates tabs of content in a progressive, enhanced way and
 * is accessible through keyboard and screen reader.
 */
class Tabs extends _base__WEBPACK_IMPORTED_MODULE_0__.Component {
  /**
   * @see {Compoment.constructor}
   */
  constructor(root, options = {currentTab: 1}) {
    super(root);
    /**
     * Handles a click.
     * @param e The event from the click.
     */
    this.handleClick = (e) => {
      // Ignore clicks on elements that aren't tabs.
      if (e.target instanceof Element) {
        const tabEl = e.target.closest(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TAB}`);
        if (tabEl === null) {
          return;
        }
        this.setActiveTab([...this.tabs].indexOf(tabEl) + 1);
      }
    };
    /**
     * Handles key press events to trigger changing the selected page. When the
     * user uses arrow left/right, it changes the active tab in the component.
     */
    this.handleKeydown = (e) => {
      if (e.code === _events_key__WEBPACK_IMPORTED_MODULE_4__.Key.RIGHT || e.code === _events_key__WEBPACK_IMPORTED_MODULE_4__.Key.LEFT) {
        if (e.code === _events_key__WEBPACK_IMPORTED_MODULE_4__.Key.RIGHT) {
          this.setActiveTab(this.getActiveTab() + 1);
        } else if (e.code === _events_key__WEBPACK_IMPORTED_MODULE_4__.Key.LEFT) {
          this.setActiveTab(this.getActiveTab() - 1);
        }
        if (this.getActiveTab() === 0) {
          this.setActiveTab(this.totalTabs);
        } else if (this.getActiveTab() === this.totalTabs + 1) {
          this.setActiveTab(1);
        }
      }
      if (e.code === _events_key__WEBPACK_IMPORTED_MODULE_4__.Key.HOME) {
        this.setActiveTab(1);
      }
      if (e.code === _events_key__WEBPACK_IMPORTED_MODULE_4__.Key.END) {
        this.setActiveTab(this.totalTabs);
      }
      if (e.code === _events_key__WEBPACK_IMPORTED_MODULE_4__.Key.RIGHT || e.code === _events_key__WEBPACK_IMPORTED_MODULE_4__.Key.LEFT || e.code === _events_key__WEBPACK_IMPORTED_MODULE_4__.Key.HOME ||
          e.code === _events_key__WEBPACK_IMPORTED_MODULE_4__.Key.END) {
        this.tabs[this.getActiveTab() - 1].focus();
      }
    };
    /** Tablist element */
    this.tablist = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TABLIST}`);
    /** A list of tabs elements. */
    this.tabs = Array.from(this.tablist.querySelectorAll(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.TAB}`));
    /** A list of tab panels elements. */
    this.tabPanels =
        Array.from(this.root.querySelectorAll(`.${_constants__WEBPACK_IMPORTED_MODULE_6__.CssClasses.PANEL}`));
    /** Total number of tabs. */
    this.totalTabs = this.tabs.length;
    this.currentTabChangeHandler = () => {
      this.render();
    };
    this.validateElements();
    this.setAriaRoles();
    // Add observer instance and attach listener to the currentTab data
    const val = this.getDataAttribute();
    let currentTab = 1;
    if (this.isValidTab(val)) {
      currentTab = val;
    } else if (this.isValidTab(options.currentTab)) {
      currentTab = options.currentTab;
    }
    this.observer = new _observer__WEBPACK_IMPORTED_MODULE_5__.Observer({
      'currentTab': currentTab,
    });
    this.observer.listen('currentTab', this.currentTabChangeHandler);
    this.tablist.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.CLICK, this.handleClick);
    this.tablist.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.KEYDOWN, this.handleKeydown);
    this.render();
  }
  validateElements() {
    if (!this.tablist) throw new Error(`${_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.MISSING_TABLIST}`);
    if (this.tabs.length === 0) {
      throw new Error(`${_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.MISSING_TABS}`);
    }
    if (this.tabPanels.length === 0) {
      throw new Error(`${_constants__WEBPACK_IMPORTED_MODULE_6__.Strings.MISSING_TABPANELS}`);
    }
  }
  /** Get the current Tab value from data attributes. */
  getDataAttribute() {
    return Number(this.root.dataset[_constants__WEBPACK_IMPORTED_MODULE_6__.TabsAttrs.CURRENT]);
  }
  /** Render the Tabs component. */
  render() {
    const currentPage = this.getActiveTab();
    if (currentPage < 1 || currentPage > this.totalTabs) {
      return;
    }
    for (const [index, el] of this.tabs.entries()) {
      const isSelected = index === currentPage - 1;
      el.tabIndex = isSelected ? _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.TABBABLE : _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.TabIndex.NOT_TABBABLE;
      el.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_SELECTED, isSelected.toString());
    }
    for (const el of this.tabPanels) {
      el.classList.remove(_constants_classes__WEBPACK_IMPORTED_MODULE_2__.CssClasses.SHOW);
    }
    this.tabPanels[currentPage - 1].classList.add(_constants_classes__WEBPACK_IMPORTED_MODULE_2__.CssClasses.SHOW);
  }
  /**
   * Provide spoken feedback to describe this component as tabs. If you've
   * added new dom, you'll want to call this method.
   */
  setAriaRoles() {
    this.tablist.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.TABLIST);
    this.tabs.forEach((el, index) => {
      el.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.TAB);
      el.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_CONTROLS, this.tabPanels[index].id);
    });
    this.tabPanels.forEach((el, index) => {
      el.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_LABELLEDBY, this.tabs[index].id);
      el.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.TABPANEL);
    });
  }
  /** Remove all aria roles. */
  removeAriaRoles() {
    this.tablist.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE);
    for (const el of this.tabs) {
      el.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE);
      el.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_CONTROLS);
      el.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.TAB_INDEX);
      el.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_SELECTED);
    }
    for (const el of this.tabPanels) {
      el.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ARIA_LABELLEDBY);
      el.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE);
    }
  }
  setActiveTab(idx) {
    this.observer.data.currentTab = idx;
  }
  getActiveTab() {
    return this.observer.data.currentTab;
  }
  /**
   * Return true if the tab index value is between 1 and the total tabs count.
   */
  isValidTab(val) {
    return Number.isInteger(val) && val >= 1 && val <= this.totalTabs;
  }
  /** Restores DOM back to previous state and removes event listeners. */
  destroy() {
    this.observer.unlisten('currentTab', this.currentTabChangeHandler);
    this.tablist.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.CLICK, this.handleClick);
    this.tablist.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.KEYDOWN, this.handleKeydown);
    this.removeAriaRoles();
    this.observer = new _observer__WEBPACK_IMPORTED_MODULE_5__.Observer({
      'currentTab': 1,
    });
  }
}



/***/ }),

/***/ "./_glue/lib/tooltip/constants.js":
/*!****************************************!*\
  !*** ./_glue/lib/tooltip/constants.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CssClasses: () => (/* binding */ CssClasses),
/* harmony export */   CustomEvent: () => (/* binding */ CustomEvent),
/* harmony export */   DataAttrs: () => (/* binding */ DataAttrs),
/* harmony export */   ErrorMessage: () => (/* binding */ ErrorMessage)
/* harmony export */ });
var CssClasses;
(function(CssClasses) {
CssClasses['ROOT'] = 'glue-tooltip';
CssClasses['ANIMATION'] = 'glue-tooltip__content--animation';
CssClasses['BODY'] = 'glue-tooltip__body';
CssClasses['CONTENT'] = 'glue-tooltip__content';
CssClasses['HEADER'] = 'glue-tooltip__header';
CssClasses['LINK'] = 'glue-tooltip__link';
CssClasses['RICH'] = 'glue-tooltip--rich';
CssClasses['SHOW_TOOLTIP'] = 'glue-tooltip__content--shown';
CssClasses['TRIGGER'] = 'glue-tooltip__trigger';
CssClasses['TRIGGER_LINK'] = 'glue-tooltip__trigger--link';
CssClasses['TRIGGER_ICON'] = 'glue-tooltip__trigger--icon';
CssClasses['TRIGGER_ICONAFTER'] = 'glue-tooltip__trigger--icon-after';
CssClasses['TONAL_LINK'] = 'glue-inline-tonal-link';
})(CssClasses || (CssClasses = {}));
/**
 * Custom tooltip events
 */
var CustomEvent;
(function(CustomEvent) {
CustomEvent['CLOSE_EVENT'] = 'gluetooltipclose';
CustomEvent['SHOW_EVENT'] = 'gluetooltipshow';
})(CustomEvent || (CustomEvent = {}));
var ErrorMessage;
(function(ErrorMessage) {
ErrorMessage['MISSING_CONTENT'] = 'The tooltip content element is missing';
ErrorMessage['MISSING_TRIGGER'] = 'The tooltip trigger element is missing';
ErrorMessage['INCORRECT_POSITION'] =
    'data-glue-tooltip-auto-position attribute only accepts true or false value.';
})(ErrorMessage || (ErrorMessage = {}));
var DataAttrs;
(function(DataAttrs) {
DataAttrs['AUTO_POSITION'] = 'glueTooltipAutoPosition';
})(DataAttrs || (DataAttrs = {}));



/***/ }),

/***/ "./_glue/lib/tooltip/index.js":
/*!************************************!*\
  !*** ./_glue/lib/tooltip/index.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tooltip: () => (/* binding */ Tooltip),
/* harmony export */   initMultiTooltip: () => (/* binding */ initMultiTooltip)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base */ "./_glue/lib/base/index.js");
/* harmony import */ var _base_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base/utils */ "./_glue/lib/base/utils.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _events_key__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../events/key */ "./_glue/lib/events/key.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./constants */ "./_glue/lib/tooltip/constants.js");








/**
 * A component that pops up when you hover over an interactive object.
 *
 * Responsibilities:
 *  - Provide public methods for open, close and destroy
 *  - Add ARIA labels for a11y
 *  - Reposition tooltip when it is on the edge of the page
 *  - Customize Tooltip by turning on/off auto position
 *  - Expose Tooltip show and hide events
 */
class Tooltip extends _base__WEBPACK_IMPORTED_MODULE_0__.Component {
  constructor(root, options) {
    super(root);
    /**
     * Checks target element and calls method for tooltip display.
     */
    this.handleOpen = (event) => {
      const targetEl = event.target;
      if (targetEl instanceof HTMLElement && this.isTooltipChild(targetEl)) {
        this.open();
      }
    };
    /**
     * Checks target element and calls method for tooltip hide.
     */
    this.handleClose = (event) => {
      const targetEl = event.target;
      if (targetEl instanceof HTMLElement && this.isTooltipChild(targetEl)) {
        this.close();
      }
    };
    /**
     * Event handler for Escape key.
     */
    this.handleKeyup = (event) => {
      const targetEl = event.target;
      if (event.key === _events_key__WEBPACK_IMPORTED_MODULE_4__.Key.ESC) {
        if (targetEl instanceof HTMLElement &&
            this.content.contains(targetEl)) {
          this.trigger.focus();
        }
        this.close();
      }
    };
    /**
     * Checks click on document and calls method for tooltip display.
     */
    this.handleClick = (event) => {
      const targetEl = event.target;
      if (targetEl instanceof HTMLElement && !this.isTooltipChild(targetEl)) {
        this.close();
      }
    };
    /**
     * Adds animation class on tooltip transition start.
     */
    this.handleTransitionStart = () => {
      if (this.content.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.SHOW_TOOLTIP)) {
        this.content.classList.add(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.ANIMATION);
      }
    };
    /**
     * Removes animation class on tooltip transition end.
     */
    this.handleTransitionEnd = () => {
      if (this.content.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.SHOW_TOOLTIP)) return;
      this.content.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.ANIMATION);
    };
    /**
     * Recalculates the tooltip position and displays it properly as per updated
     * screen size.
     */
    this.handleResize = () => {
      this.setTooltipPosition();
    };
    let element = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.TRIGGER}`);
    if (!element) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_5__.ErrorMessage.MISSING_TRIGGER);
    } else {
      this.trigger = element;
    }
    element = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.CONTENT}`);
    if (!element) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_5__.ErrorMessage.MISSING_CONTENT);
    } else {
      this.content = element;
      this.content.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Attribute.ARIA_HIDDEN, 'true');
      // Set aria-controls (extend value if it already exists)
      const ariaControlsElements = [
        this.content.id,
        this.trigger.getAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Attribute.ARIA_CONTROLS),
      ];
      this.trigger.setAttribute(
          _constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Attribute.ARIA_CONTROLS, ariaControlsElements.join(' ').trim());
      if (this.content.getAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Attribute.ROLE) === _constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Role.DIALOG) {
        this.content.tabIndex = _constants_attribute__WEBPACK_IMPORTED_MODULE_2__.TabIndex.TABBABLE;
      }
    }
    // Compile the final set of options.
    this.options = this.getAttributeOptions(options);
    this.registerEvents();
  }
  /**
   * Checks if the element is present inside the tooltip.
   * @param targetEl DOM node which is to be checked
   * @return true if DOM node is present in tooltip
   */
  isTooltipChild(targetEl) {
    return this.trigger.contains(targetEl) || this.content.contains(targetEl) ?
        true :
        false;
  }
  /**
   * Get attributes from target element and construct an options object.
   */
  getAttributeOptions(passedOptions) {
    const attrOptions = {};
    const attrData = this.root.dataset;
    if (_constants__WEBPACK_IMPORTED_MODULE_5__.DataAttrs.AUTO_POSITION in attrData) {
      let setPosition;
      if (attrData[_constants__WEBPACK_IMPORTED_MODULE_5__.DataAttrs.AUTO_POSITION] === 'false') {
        setPosition = false;
      } else if (attrData[_constants__WEBPACK_IMPORTED_MODULE_5__.DataAttrs.AUTO_POSITION] === 'true') {
        setPosition = true;
      } else {
        throw new Error(_constants__WEBPACK_IMPORTED_MODULE_5__.ErrorMessage.INCORRECT_POSITION);
      }
      attrOptions.autoPosition = setPosition;
    }
    const fullOptions =
        Object.assign({}, Tooltip.defaultOptions, passedOptions, attrOptions);
    return fullOptions;
  }
  /**
   * Default Tooltip options
   */
  static get defaultOptions() {
    return {
      autoPosition: true,
    };
  }
  /**
   * Adds events for the tooltip.
   */
  registerEvents() {
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.MOUSEENTER, this.handleOpen, true);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.FOCUS, this.handleOpen, true);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.MOUSELEAVE, this.handleClose, true);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.BLUR, this.handleClose, true);
    document.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.KEYUP, this.handleKeyup);
    document.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.CLICK, this.handleClick);
    window.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.RESIZE, this.handleResize);
    this.content.addEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.TRANSITIONSTART, this.handleTransitionStart);
    this.content.addEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.TRANSITIONEND, this.handleTransitionEnd);
  }
  /**
   * Calculates the position of the Tooltip.
   */
  setTooltipPosition() {
    if (this.options.autoPosition === true) {
      const pos = (0,_base_utils__WEBPACK_IMPORTED_MODULE_1__.getOverlayAutoPosition)(
          this.root, this.content, this.trigger, this.options.placement);
      if (pos) {
        const [left, top] = pos;
        this.content.style.left = `${left}px`;
        this.content.style.top = `${top}px`;
      }
    }
  }
  /**
   * Displays the tooltip.
   */
  open() {
    if (this.content.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.SHOW_TOOLTIP)) return;
    this.setTooltipPosition();
    this.content.classList.add(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.SHOW_TOOLTIP);
    this.content.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Attribute.ARIA_HIDDEN, 'false');
    this.emit(_constants__WEBPACK_IMPORTED_MODULE_5__.CustomEvent.SHOW_EVENT, {}, true);
  }
  /**
   * Hides the tooltip.
   */
  close() {
    if (!this.content.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.SHOW_TOOLTIP)) return;
    this.content.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.SHOW_TOOLTIP);
    this.content.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Attribute.ARIA_HIDDEN, 'true');
    this.emit(_constants__WEBPACK_IMPORTED_MODULE_5__.CustomEvent.CLOSE_EVENT, {}, true);
  }
  /** Resets component and removes event listeners. */
  destroy() {
    this.close();
    this.content.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Attribute.ARIA_HIDDEN);
    this.trigger.removeAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_2__.Attribute.ARIA_CONTROLS);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.MOUSEENTER, this.handleOpen, true);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.FOCUS, this.handleOpen, true);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.MOUSELEAVE, this.handleClose, true);
    this.root.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.BLUR, this.handleClose, true);
    document.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.KEYUP, this.handleKeyup);
    document.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.CLICK, this.handleClick);
    window.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.RESIZE, this.handleResize);
    this.content.removeEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.TRANSITIONSTART, this.handleTransitionStart);
    this.content.removeEventListener(
        _events_eventtype__WEBPACK_IMPORTED_MODULE_3__.EventType.TRANSITIONEND, this.handleTransitionEnd);
  }
}
/**
 * Initializes multiple tooltips with single call.
 */
function initMultiTooltip(tooltipElems) {
  [...tooltipElems].forEach((tooltipElem) => {
    // tslint:disable-next-line:no-unused-expression
    new Tooltip(tooltipElem);
  });
}



/***/ }),

/***/ "./_glue/lib/ytvideo/constants.js":
/*!****************************************!*\
  !*** ./_glue/lib/ytvideo/constants.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CssClasses: () => (/* binding */ CssClasses),
/* harmony export */   DataAttrs: () => (/* binding */ DataAttrs),
/* harmony export */   ErrorMessages: () => (/* binding */ ErrorMessages)
/* harmony export */ });
/**
 * Component element data attribute names used as player options.
 */
var DataAttrs;
(function(DataAttrs) {
DataAttrs['VIDEO_ID'] = 'glueYtVideoVid';
DataAttrs['PLAYER_ID'] = 'glueYtPlayerId';
DataAttrs['HEIGHT'] = 'glueYtVideoHeight';
DataAttrs['WIDTH'] = 'glueYtVideoWidth';
DataAttrs['PLAYER_VARS'] = 'glueYtVideoPlayerVars';
})(DataAttrs || (DataAttrs = {}));
var CssClasses;
(function(CssClasses) {
CssClasses['BASE'] = 'glue-video';
CssClasses['PREVIEW_CONTAINER'] = 'glue-video__preview-container';
CssClasses['DURATION'] = 'glue-video__timestamp-duration';
CssClasses['HIDE_ELEMENT'] = 'glue-video--hidden';
CssClasses['IMAGE_CONTAINER'] = 'glue-video__preview-image';
CssClasses['TIMESTAMP'] = 'glue-video__timestamp';
CssClasses['TIMESTAMP_SHOW'] = 'glue-video__timestamp--visible';
CssClasses['VIDEO_CONTAINER'] = 'glue-video__container';
CssClasses['INLINE_VIDEO'] = 'glue-video__preview-container--inline';
CssClasses['LABEL'] = 'glue-video__label';
})(CssClasses || (CssClasses = {}));
var ErrorMessages;
(function(ErrorMessages) {
ErrorMessages['MISSING_VIDEO'] = 'The video element is missing';
})(ErrorMessages || (ErrorMessages = {}));



/***/ }),

/***/ "./_glue/lib/ytvideo/index.js":
/*!************************************!*\
  !*** ./_glue/lib/ytvideo/index.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   YoutubeVideo: () => (/* binding */ YoutubeVideo)
/* harmony export */ });
/* harmony import */ var _base_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base/index */ "./_glue/lib/base/index.js");
/* harmony import */ var _constants_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/attribute */ "./_glue/lib/constants/attribute.js");
/* harmony import */ var _events_eventtype__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events/eventtype */ "./_glue/lib/events/eventtype.js");
/* harmony import */ var _events_key__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events/key */ "./_glue/lib/events/key.js");
/* harmony import */ var _focus__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../focus */ "./_glue/lib/focus/index.js");
/* harmony import */ var _modal_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../modal/constants */ "./_glue/lib/modal/constants.js");
/* harmony import */ var _modal_index__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../modal/index */ "./_glue/lib/modal/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./constants */ "./_glue/lib/ytvideo/constants.js");
/* harmony import */ var _videomanager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./videomanager */ "./_glue/lib/ytvideo/videomanager.js");
// taze: youtube from //third_party/javascript/typings/youtube











/**
 * Creates a YouTube Video component with access to the controls API.
 */
class YoutubeVideo extends _base_index__WEBPACK_IMPORTED_MODULE_0__.Component {
  constructor(root, options) {
    var _a, _b;
    super(root);
    // Unique element id for the player.
    this.id = '';
    /**
     * Hides image overlay and plays video.
     */
    this.hidePosterAndPlay = (e) => {
      var _a, _b;
      if (this.videoElement.contains(e.target)) return;
      // Return if it is a keyboard event, but not Enter key or Space key.
      if (e instanceof KeyboardEvent && e.key !== _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.ENTER &&
          e.key !== _events_key__WEBPACK_IMPORTED_MODULE_3__.Key.SPACE) {
        return;
      }
      if (this.modal) {
        e.preventDefault();
        this.modal.open();
      } else {
        (_a = this.previewElement) === null || _a === void 0 ?
            void 0 :
            _a.classList.add(_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.HIDE_ELEMENT);
        this.videoElement.classList.remove(_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.HIDE_ELEMENT);
        this.root.blur();  // Allows iframe to be clicked
      }
      (_b = this.getPlayer()) === null || _b === void 0 ? void 0 :
                                                          _b.playVideo();
    };
    this.previewElement =
        this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.PREVIEW_CONTAINER}`);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.hidePosterAndPlay);
    this.root.addEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.hidePosterAndPlay);
    if (!(0,_focus__WEBPACK_IMPORTED_MODULE_4__.isElementFocusable)(root)) {
      this.root.tabIndex = 0;
    }
    if (this.root.tagName !== 'A') {
      this.root.setAttribute(_constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Attribute.ROLE, _constants_attribute__WEBPACK_IMPORTED_MODULE_1__.Role.BUTTON);
    }
    const video =
        (options === null || options === void 0 ? void 0 :
                                                  options.modalElement) ?
        options === null || options === void 0 ?
        void 0 :
        options.modalElement.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.VIDEO_CONTAINER}`) :
        this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.VIDEO_CONTAINER}`);
    if (!video) {
      throw new Error(_constants__WEBPACK_IMPORTED_MODULE_7__.ErrorMessages.MISSING_VIDEO);
    }
    this.videoElement = video;
    if ((_a = this.previewElement) === null || _a === void 0 ?
            void 0 :
            _a.classList.contains(_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.INLINE_VIDEO)) {
      this.videoElement.classList.add(_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.HIDE_ELEMENT);
    }
    // Create a modal component if there is modal markup.
    this.modalCloseHandler = () => {
      var _a;
      (_a = this.getPlayer()) === null || _a === void 0 ? void 0 :
                                                          _a.pauseVideo();
    };
    this.options = this.setPlayerOptions(options);
    this.modalElement =
        (options === null || options === void 0 ? void 0 :
                                                  options.modalElement) ?
        options === null || options === void 0 ? void 0 : options.modalElement :
        this.root.querySelector(`.${_modal_constants__WEBPACK_IMPORTED_MODULE_5__.CssClasses.ROOT}`);
    if (this.modalElement) {
      this.modal = new _modal_index__WEBPACK_IMPORTED_MODULE_6__.Modal(this.modalElement, this.root);
      // Needs to listen for the modal closing so the video can be paused.
      this.modalElement.addEventListener(
          _modal_constants__WEBPACK_IMPORTED_MODULE_5__.Strings.CLOSED_EVENT, this.modalCloseHandler);
    }
    // The manager of YT API and videos.
    this.manager = _videomanager__WEBPACK_IMPORTED_MODULE_8__.YoutubeVideoManager.getManager();
    YT.ready(() => {
      this.initializeVideo();
    });
    this.posterImageElement =
        this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.IMAGE_CONTAINER}`);
    const posterSrc = (_b = this.posterImageElement) === null || _b === void 0 ?
        void 0 :
        _b.getAttribute('src');
    if (this.posterImageElement &&
        (posterSrc === null || posterSrc === void 0 ? void 0 :
                                                      posterSrc.length) === 0) {
      this.posterImageElement.src = `https://i.ytimg.com/vi_webp/${
          this.options.videoId}/maxresdefault.webp`;
    }
  }
  destroy() {
    var _a, _b, _c, _d, _e;
    super.destroy();
    (_a = this.modal) === null || _a === void 0 ? void 0 : _a.close();
    (_b = this.modal) === null || _b === void 0 ? void 0 : _b.destroy();
    (_c = this.modalElement) === null || _c === void 0 ?
        void 0 :
        _c.removeEventListener(
            _modal_constants__WEBPACK_IMPORTED_MODULE_5__.Strings.CLOSED_EVENT, this.modalCloseHandler);
    (_d = this.root) === null || _d === void 0 ?
        void 0 :
        _d.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.CLICK, this.hidePosterAndPlay);
    (_e = this.root) === null || _e === void 0 ?
        void 0 :
        _e.removeEventListener(_events_eventtype__WEBPACK_IMPORTED_MODULE_2__.EventType.KEYDOWN, this.hidePosterAndPlay);
    this.destroyPlayer();
  }
  /**
   * Default YtVideo options
   */
  static get defaultOptions() {
    return {
      playerId: '',
      width: '',
      height: '',
      videoId: '',
      playerVars: {},
      events: {},
    };
  }
  /**
   * Sets or creates the unique identifier for the player element to be
   * used as the unique key.
   */
  initId() {
    var _a;
    // Get IDs in order of precedence.
    //   1. element id attribute
    //   2. playerId from options passed-in
    //   3. a random unique id
    let id = (_a = this.videoElement.id) !== null && _a !== void 0 ? _a : '';
    // Make ID unique and random if unprovided.
    if (this.isValidPlayerId(id)) {
      id = this.options.playerId ||
          `youtube-player-${Math.round(Math.random() * Math.pow(10, 6))}`;
      // There must be an element id.
      this.videoElement.id = id;
    }
    this.id = id;
  }
  /**
   * Re-initialize the video player with new options.
   * @param passedOptions The new options package.
   */
  refreshPlayerOptions(passedOptions) {
    this.destroyPlayer();
    this.options =
        Object.assign({}, YoutubeVideo.defaultOptions, passedOptions);
    if (this.options.playerId) this.id = this.options.playerId;
    this.initializeVideo();
  }
  /**
   * Sets the options and id of the video.
   * Uses data-attributes, if present, otherwise use passed-in option
   * If neither exist, use the default
   * @param passedOptions Options passed in by the user.
   */
  setPlayerOptions(passedOptions) {
    const attrOptions = {};
    const attrData = this.videoElement.dataset;
    if (_constants__WEBPACK_IMPORTED_MODULE_7__.DataAttrs.VIDEO_ID in attrData) {
      attrOptions.videoId = attrData[_constants__WEBPACK_IMPORTED_MODULE_7__.DataAttrs.VIDEO_ID];
    }
    if (_constants__WEBPACK_IMPORTED_MODULE_7__.DataAttrs.PLAYER_ID in attrData) {
      attrOptions.playerId = attrData[_constants__WEBPACK_IMPORTED_MODULE_7__.DataAttrs.PLAYER_ID];
    }
    if (_constants__WEBPACK_IMPORTED_MODULE_7__.DataAttrs.HEIGHT in attrData) {
      attrOptions.height = attrData[_constants__WEBPACK_IMPORTED_MODULE_7__.DataAttrs.HEIGHT];
    }
    if (_constants__WEBPACK_IMPORTED_MODULE_7__.DataAttrs.WIDTH in attrData) {
      attrOptions.width = attrData[_constants__WEBPACK_IMPORTED_MODULE_7__.DataAttrs.WIDTH];
    }
    if (_constants__WEBPACK_IMPORTED_MODULE_7__.DataAttrs.PLAYER_VARS in attrData) {
      attrOptions.playerVars = attrData[_constants__WEBPACK_IMPORTED_MODULE_7__.DataAttrs.PLAYER_VARS];
    }
    const fullOptions = Object.assign(
        {}, YoutubeVideo.defaultOptions, passedOptions, attrOptions);
    if (fullOptions.playerId) {
      this.id = fullOptions.playerId;
    }
    return fullOptions;
  }
  /**
   * Initialize the video player.
   */
  initializeVideo() {
    // The video can't be stored without an ID.
    if (this.isValidPlayerId(this.id)) {
      this.initId();
    }
    // Make sure the playerId is set.
    this.options.playerId = this.id;
    // makeVideoContainerElem will make a new sub-element that the
    // YT Player will replace with an iframe. This step prevents
    // replacing the root element with the iframe.
    const el = this.videoElement.appendChild(document.createElement('div'));
    if (this.options.events) {
      if (this.options.events.onReady === undefined) {
        this.options.events.onReady = () => {
          this.setVideoTimestamp();
        };
      } else {
        const userFunction = this.options.events.onReady;
        this.options.events.onReady = (event) => {
          this.setVideoTimestamp();
          userFunction(event);
        };
      }
    }
    const player = new window.YT.Player(el, this.options);
    this.manager.registerYtPlayer(this.id, player);
  }
  /**
   * Gets the video duration and sets timestamp.
   */
  setVideoTimestamp() {
    var _a, _b, _c, _d;
    const timestamp = this.root.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.DURATION}`);
    if (timestamp) {
      const duration = (_b = (_a = this.getPlayer()) === null || _a === void 0 ?
                            void 0 :
                            _a.getDuration()) !== null &&
              _b !== void 0 ?
          _b :
          0;
      const mills = new Date(duration * 1000).toISOString();
      const time = mills.substring(11, 13) === '00' ? mills.substring(14, 19) :
                                                      mills.substring(11, 19);
      timestamp.textContent = time;
      (_d = (_c = this.root) === null || _c === void 0 ?
           void 0 :
           _c.querySelector(`.${_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.TIMESTAMP}`)) === null ||
              _d === void 0 ?
          void 0 :
          _d.classList.add(`${_constants__WEBPACK_IMPORTED_MODULE_7__.CssClasses.TIMESTAMP_SHOW}`);
    }
  }
  /**
   * Gets video player object.
   */
  getPlayer() {
    return this.manager.getYtPlayer(this.id);
  }
  /**
   * Destroys the video player and iframe.
   */
  destroyPlayer() {
    this.manager.unregisterYtPlayer(this.id);
  }
  /**
   * Gets video player ID.
   */
  getPlayerId() {
    if (this.isValidPlayerId(this.id)) {
      this.initId();
    }
    return this.id;
  }
  /**
   * If the player ID is a valid one.
   * This is lifted from closure goog.string.isEmptyOrWhitespace function.
   */
  isValidPlayerId(id) {
    return /^[\s\xa0]*$/.test(id);
  }
}



/***/ }),

/***/ "./_glue/lib/ytvideo/videomanager.js":
/*!*******************************************!*\
  !*** ./_glue/lib/ytvideo/videomanager.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   YoutubeVideoManager: () => (/* binding */ YoutubeVideoManager)
/* harmony export */ });
/**
 * Manages a collection of YouTube videos. Also manages the YouTibe Video API.
 */
class YoutubeVideoManager {
  constructor() {
    this.videoObjects = new Map();
  }
  static getManager() {
    if (!YoutubeVideoManager.instance) {
      YoutubeVideoManager.instance = new YoutubeVideoManager();
    }
    return YoutubeVideoManager.instance;
  }
  static destroyManager() {
    YoutubeVideoManager.instance = undefined;
  }
  /**
   * Stores the YouTube player object
   * @param id The id of a player.
   * @param player The player instance.
   */
  registerYtPlayer(id, player) {
    this.videoObjects.set(id, player);
  }
  /**
   * Destroy a player.
   * @param id The id of a player.
   */
  unregisterYtPlayer(id) {
    const player = this.videoObjects.get(id);
    player === null || player === void 0 ? void 0 : player.destroy();
    this.videoObjects.delete(id);
    // If we just destroyed the last video, then the manager
    // should destroy iteself since it now manages nothing.
    if (this.videoObjects.size === 0) {
      YoutubeVideoManager.destroyManager();
    }
  }
  /**
   * Get YouTube player object.
   * @param id The id of a player.
   */
  getYtPlayer(id) {
    return this.videoObjects.get(id);
  }
}
YoutubeVideoManager.instance = undefined;



/***/ }),

/***/ "./node_modules/@lit/reactive-element/development/css-tag.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@lit/reactive-element/development/css-tag.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSSResult: () => (/* binding */ CSSResult),
/* harmony export */   adoptStyles: () => (/* binding */ adoptStyles),
/* harmony export */   css: () => (/* binding */ css),
/* harmony export */   getCompatibleStyle: () => (/* binding */ getCompatibleStyle),
/* harmony export */   supportsAdoptingStyleSheets: () => (/* binding */ supportsAdoptingStyleSheets),
/* harmony export */   unsafeCSS: () => (/* binding */ unsafeCSS)
/* harmony export */ });
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const NODE_MODE = false;
// Allows minifiers to rename references to globalThis
const global = globalThis;
/**
 * Whether the current browser supports `adoptedStyleSheets`.
 */
const supportsAdoptingStyleSheets = global.ShadowRoot &&
    (global.ShadyCSS === undefined || global.ShadyCSS.nativeShadow) &&
    'adoptedStyleSheets' in Document.prototype &&
    'replace' in CSSStyleSheet.prototype;
const constructionToken = Symbol();
const cssTagCache = new WeakMap();
/**
 * A container for a string of CSS text, that may be used to create a CSSStyleSheet.
 *
 * CSSResult is the return value of `css`-tagged template literals and
 * `unsafeCSS()`. In order to ensure that CSSResults are only created via the
 * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.
 */
class CSSResult {
    constructor(cssText, strings, safeToken) {
        // This property needs to remain unminified.
        this['_$cssResult$'] = true;
        if (safeToken !== constructionToken) {
            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');
        }
        this.cssText = cssText;
        this._strings = strings;
    }
    // This is a getter so that it's lazy. In practice, this means stylesheets
    // are not created until the first element instance is made.
    get styleSheet() {
        // If `supportsAdoptingStyleSheets` is true then we assume CSSStyleSheet is
        // constructable.
        let styleSheet = this._styleSheet;
        const strings = this._strings;
        if (supportsAdoptingStyleSheets && styleSheet === undefined) {
            const cacheable = strings !== undefined && strings.length === 1;
            if (cacheable) {
                styleSheet = cssTagCache.get(strings);
            }
            if (styleSheet === undefined) {
                (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(this.cssText);
                if (cacheable) {
                    cssTagCache.set(strings, styleSheet);
                }
            }
        }
        return styleSheet;
    }
    toString() {
        return this.cssText;
    }
}
const textFromCSSResult = (value) => {
    // This property needs to remain unminified.
    if (value['_$cssResult$'] === true) {
        return value.cssText;
    }
    else if (typeof value === 'number') {
        return value;
    }
    else {
        throw new Error(`Value passed to 'css' function must be a 'css' function result: ` +
            `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` +
            `to ensure page security.`);
    }
};
/**
 * Wrap a value for interpolation in a {@linkcode css} tagged template literal.
 *
 * This is unsafe because untrusted CSS text can be used to phone home
 * or exfiltrate data to an attacker controlled site. Take care to only use
 * this with trusted input.
 */
const unsafeCSS = (value) => new CSSResult(typeof value === 'string' ? value : String(value), undefined, constructionToken);
/**
 * A template literal tag which can be used with LitElement's
 * {@linkcode LitElement.styles} property to set element styles.
 *
 * For security reasons, only literal string values and number may be used in
 * embedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}
 * may be used inside an expression.
 */
const css = (strings, ...values) => {
    const cssText = strings.length === 1
        ? strings[0]
        : values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);
    return new CSSResult(cssText, strings, constructionToken);
};
/**
 * Applies the given styles to a `shadowRoot`. When Shadow DOM is
 * available but `adoptedStyleSheets` is not, styles are appended to the
 * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).
 * Note, when shimming is used, any styles that are subsequently placed into
 * the shadowRoot should be placed *before* any shimmed adopted styles. This
 * will match spec behavior that gives adopted sheets precedence over styles in
 * shadowRoot.
 */
const adoptStyles = (renderRoot, styles) => {
    if (supportsAdoptingStyleSheets) {
        renderRoot.adoptedStyleSheets = styles.map((s) => s instanceof CSSStyleSheet ? s : s.styleSheet);
    }
    else {
        for (const s of styles) {
            const style = document.createElement('style');
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const nonce = global['litNonce'];
            if (nonce !== undefined) {
                style.setAttribute('nonce', nonce);
            }
            style.textContent = s.cssText;
            renderRoot.appendChild(style);
        }
    }
};
const cssResultFromStyleSheet = (sheet) => {
    let cssText = '';
    for (const rule of sheet.cssRules) {
        cssText += rule.cssText;
    }
    return unsafeCSS(cssText);
};
const getCompatibleStyle = supportsAdoptingStyleSheets ||
    (NODE_MODE && global.CSSStyleSheet === undefined)
    ? (s) => s
    : (s) => s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;
//# sourceMappingURL=css-tag.js.map

/***/ }),

/***/ "./node_modules/@lit/reactive-element/development/decorators/base.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@lit/reactive-element/development/decorators/base.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   desc: () => (/* binding */ desc)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * Wraps up a few best practices when returning a property descriptor from a
 * decorator.
 *
 * Marks the defined property as configurable, and enumerable, and handles
 * the case where we have a busted Reflect.decorate zombiefill (e.g. in Angular
 * apps).
 *
 * @internal
 */
const desc = (obj, name, descriptor) => {
    // For backwards compatibility, we keep them configurable and enumerable.
    descriptor.configurable = true;
    descriptor.enumerable = true;
    if (
    // We check for Reflect.decorate each time, in case the zombiefill
    // is applied via lazy loading some Angular code.
    Reflect.decorate &&
        typeof name !== 'object') {
        // If we're called as a legacy decorator, and Reflect.decorate is present
        // then we have no guarantees that the returned descriptor will be
        // defined on the class, so we must apply it directly ourselves.
        Object.defineProperty(obj, name, descriptor);
    }
    return descriptor;
};
//# sourceMappingURL=base.js.map

/***/ }),

/***/ "./node_modules/@lit/reactive-element/development/decorators/custom-element.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@lit/reactive-element/development/decorators/custom-element.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   customElement: () => (/* binding */ customElement)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * Class decorator factory that defines the decorated class as a custom element.
 *
 * ```js
 * @customElement('my-element')
 * class MyElement extends LitElement {
 *   render() {
 *     return html``;
 *   }
 * }
 * ```
 * @category Decorator
 * @param tagName The tag name of the custom element to define.
 */
const customElement = (tagName) => (classOrTarget, context) => {
    if (context !== undefined) {
        context.addInitializer(() => {
            customElements.define(tagName, classOrTarget);
        });
    }
    else {
        customElements.define(tagName, classOrTarget);
    }
};
//# sourceMappingURL=custom-element.js.map

/***/ }),

/***/ "./node_modules/@lit/reactive-element/development/decorators/event-options.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@lit/reactive-element/development/decorators/event-options.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   eventOptions: () => (/* binding */ eventOptions)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * Adds event listener options to a method used as an event listener in a
 * lit-html template.
 *
 * @param options An object that specifies event listener options as accepted by
 * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.
 *
 * Current browsers support the `capture`, `passive`, and `once` options. See:
 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters
 *
 * ```ts
 * class MyElement {
 *   clicked = false;
 *
 *   render() {
 *     return html`
 *       <div @click=${this._onClick}>
 *         <button></button>
 *       </div>
 *     `;
 *   }
 *
 *   @eventOptions({capture: true})
 *   _onClick(e) {
 *     this.clicked = true;
 *   }
 * }
 * ```
 * @category Decorator
 */
function eventOptions(options) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return ((protoOrValue, nameOrContext) => {
        const method = typeof protoOrValue === 'function'
            ? protoOrValue
            : protoOrValue[nameOrContext];
        Object.assign(method, options);
    });
}
//# sourceMappingURL=event-options.js.map

/***/ }),

/***/ "./node_modules/@lit/reactive-element/development/decorators/property.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@lit/reactive-element/development/decorators/property.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   property: () => (/* binding */ property),
/* harmony export */   standardProperty: () => (/* binding */ standardProperty)
/* harmony export */ });
/* harmony import */ var _reactive_element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reactive-element.js */ "./node_modules/@lit/reactive-element/development/reactive-element.js");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/*
 * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all
 * property decorators (but not class decorators) in this file that have
 * an @ExportDecoratedItems annotation must be defined as a regular function,
 * not an arrow function.
 */

const DEV_MODE = true;
let issueWarning;
if (DEV_MODE) {
    // Ensure warnings are issued only 1x, even if multiple versions of Lit
    // are loaded.
    const issuedWarnings = (globalThis.litIssuedWarnings ??= new Set());
    // Issue a warning, if we haven't already.
    issueWarning = (code, warning) => {
        warning += ` See https://lit.dev/msg/${code} for more information.`;
        if (!issuedWarnings.has(warning)) {
            console.warn(warning);
            issuedWarnings.add(warning);
        }
    };
}
const legacyProperty = (options, proto, name) => {
    const hasOwnProperty = proto.hasOwnProperty(name);
    proto.constructor.createProperty(name, hasOwnProperty ? { ...options, wrapped: true } : options);
    // For accessors (which have a descriptor on the prototype) we need to
    // return a descriptor, otherwise TypeScript overwrites the descriptor we
    // define in createProperty() with the original descriptor. We don't do this
    // for fields, which don't have a descriptor, because this could overwrite
    // descriptor defined by other decorators.
    return hasOwnProperty
        ? Object.getOwnPropertyDescriptor(proto, name)
        : undefined;
};
// This is duplicated from a similar variable in reactive-element.ts, but
// actually makes sense to have this default defined with the decorator, so
// that different decorators could have different defaults.
const defaultPropertyDeclaration = {
    attribute: true,
    type: String,
    converter: _reactive_element_js__WEBPACK_IMPORTED_MODULE_0__.defaultConverter,
    reflect: false,
    hasChanged: _reactive_element_js__WEBPACK_IMPORTED_MODULE_0__.notEqual,
};
/**
 * Wraps a class accessor or setter so that `requestUpdate()` is called with the
 * property name and old value when the accessor is set.
 */
const standardProperty = (options = defaultPropertyDeclaration, target, context) => {
    const { kind, metadata } = context;
    if (DEV_MODE && metadata == null) {
        issueWarning('missing-class-metadata', `The class ${target} is missing decorator metadata. This ` +
            `could mean that you're using a compiler that supports decorators ` +
            `but doesn't support decorator metadata, such as TypeScript 5.1. ` +
            `Please update your compiler.`);
    }
    // Store the property options
    let properties = globalThis.litPropertyMetadata.get(metadata);
    if (properties === undefined) {
        globalThis.litPropertyMetadata.set(metadata, (properties = new Map()));
    }
    properties.set(context.name, options);
    if (kind === 'accessor') {
        // Standard decorators cannot dynamically modify the class, so we can't
        // replace a field with accessors. The user must use the new `accessor`
        // keyword instead.
        const { name } = context;
        return {
            set(v) {
                const oldValue = target.get.call(this);
                target.set.call(this, v);
                this.requestUpdate(name, oldValue, options);
            },
            init(v) {
                if (v !== undefined) {
                    this._$changeProperty(name, undefined, options);
                }
                return v;
            },
        };
    }
    else if (kind === 'setter') {
        const { name } = context;
        return function (value) {
            const oldValue = this[name];
            target.call(this, value);
            this.requestUpdate(name, oldValue, options);
        };
    }
    throw new Error(`Unsupported decorator location: ${kind}`);
};
/**
 * A class field or accessor decorator which creates a reactive property that
 * reflects a corresponding attribute value. When a decorated property is set
 * the element will update and render. A {@linkcode PropertyDeclaration} may
 * optionally be supplied to configure property features.
 *
 * This decorator should only be used for public fields. As public fields,
 * properties should be considered as primarily settable by element users,
 * either via attribute or the property itself.
 *
 * Generally, properties that are changed by the element should be private or
 * protected fields and should use the {@linkcode state} decorator.
 *
 * However, sometimes element code does need to set a public property. This
 * should typically only be done in response to user interaction, and an event
 * should be fired informing the user; for example, a checkbox sets its
 * `checked` property when clicked and fires a `changed` event. Mutating public
 * properties should typically not be done for non-primitive (object or array)
 * properties. In other cases when an element needs to manage state, a private
 * property decorated via the {@linkcode state} decorator should be used. When
 * needed, state properties can be initialized via public properties to
 * facilitate complex interactions.
 *
 * ```ts
 * class MyElement {
 *   @property({ type: Boolean })
 *   clicked = false;
 * }
 * ```
 * @category Decorator
 * @ExportDecoratedItems
 */
function property(options) {
    return (protoOrTarget, nameOrContext
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ) => {
        return (typeof nameOrContext === 'object'
            ? standardProperty(options, protoOrTarget, nameOrContext)
            : legacyProperty(options, protoOrTarget, nameOrContext));
    };
}
//# sourceMappingURL=property.js.map

/***/ }),

/***/ "./node_modules/@lit/reactive-element/development/decorators/query-all.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@lit/reactive-element/development/decorators/query-all.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   queryAll: () => (/* binding */ queryAll)
/* harmony export */ });
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ "./node_modules/@lit/reactive-element/development/decorators/base.js");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Shared fragment used to generate empty NodeLists when a render root is
// undefined
let fragment;
/**
 * A property decorator that converts a class property into a getter
 * that executes a querySelectorAll on the element's renderRoot.
 *
 * @param selector A DOMString containing one or more selectors to match.
 *
 * See:
 * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll
 *
 * ```ts
 * class MyElement {
 *   @queryAll('div')
 *   divs: NodeListOf<HTMLDivElement>;
 *
 *   render() {
 *     return html`
 *       <div id="first"></div>
 *       <div id="second"></div>
 *     `;
 *   }
 * }
 * ```
 * @category Decorator
 */
function queryAll(selector) {
    return ((obj, name) => {
        return (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.desc)(obj, name, {
            get() {
                const container = this.renderRoot ?? (fragment ??= document.createDocumentFragment());
                return container.querySelectorAll(selector);
            },
        });
    });
}
//# sourceMappingURL=query-all.js.map

/***/ }),

/***/ "./node_modules/@lit/reactive-element/development/decorators/query-assigned-elements.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@lit/reactive-element/development/decorators/query-assigned-elements.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   queryAssignedElements: () => (/* binding */ queryAssignedElements)
/* harmony export */ });
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ "./node_modules/@lit/reactive-element/development/decorators/base.js");
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */

/**
 * A property decorator that converts a class property into a getter that
 * returns the `assignedElements` of the given `slot`. Provides a declarative
 * way to use
 * [`HTMLSlotElement.assignedElements`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).
 *
 * Can be passed an optional {@linkcode QueryAssignedElementsOptions} object.
 *
 * Example usage:
 * ```ts
 * class MyElement {
 *   @queryAssignedElements({ slot: 'list' })
 *   listItems!: Array<HTMLElement>;
 *   @queryAssignedElements()
 *   unnamedSlotEls!: Array<HTMLElement>;
 *
 *   render() {
 *     return html`
 *       <slot name="list"></slot>
 *       <slot></slot>
 *     `;
 *   }
 * }
 * ```
 *
 * Note, the type of this property should be annotated as `Array<HTMLElement>`.
 *
 * @category Decorator
 */
function queryAssignedElements(options) {
    return ((obj, name) => {
        const { slot, selector } = options ?? {};
        const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;
        return (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.desc)(obj, name, {
            get() {
                const slotEl = this.renderRoot?.querySelector(slotSelector);
                const elements = slotEl?.assignedElements(options) ?? [];
                return (selector === undefined
                    ? elements
                    : elements.filter((node) => node.matches(selector)));
            },
        });
    });
}
//# sourceMappingURL=query-assigned-elements.js.map

/***/ }),

/***/ "./node_modules/@lit/reactive-element/development/decorators/query-assigned-nodes.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@lit/reactive-element/development/decorators/query-assigned-nodes.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   queryAssignedNodes: () => (/* binding */ queryAssignedNodes)
/* harmony export */ });
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ "./node_modules/@lit/reactive-element/development/decorators/base.js");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */

/**
 * A property decorator that converts a class property into a getter that
 * returns the `assignedNodes` of the given `slot`.
 *
 * Can be passed an optional {@linkcode QueryAssignedNodesOptions} object.
 *
 * Example usage:
 * ```ts
 * class MyElement {
 *   @queryAssignedNodes({slot: 'list', flatten: true})
 *   listItems!: Array<Node>;
 *
 *   render() {
 *     return html`
 *       <slot name="list"></slot>
 *     `;
 *   }
 * }
 * ```
 *
 * Note the type of this property should be annotated as `Array<Node>`. Use the
 * queryAssignedElements decorator to list only elements, and optionally filter
 * the element list using a CSS selector.
 *
 * @category Decorator
 */
function queryAssignedNodes(options) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return ((obj, name) => {
        const { slot } = options ?? {};
        const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;
        return (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.desc)(obj, name, {
            get() {
                const slotEl = this.renderRoot?.querySelector(slotSelector);
                return (slotEl?.assignedNodes(options) ?? []);
            },
        });
    });
}
//# sourceMappingURL=query-assigned-nodes.js.map

/***/ }),

/***/ "./node_modules/@lit/reactive-element/development/decorators/query-async.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@lit/reactive-element/development/decorators/query-async.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   queryAsync: () => (/* binding */ queryAsync)
/* harmony export */ });
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ "./node_modules/@lit/reactive-element/development/decorators/base.js");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Note, in the future, we may extend this decorator to support the use case
// where the queried element may need to do work to become ready to interact
// with (e.g. load some implementation code). If so, we might elect to
// add a second argument defining a function that can be run to make the
// queried element loaded/updated/ready.
/**
 * A property decorator that converts a class property into a getter that
 * returns a promise that resolves to the result of a querySelector on the
 * element's renderRoot done after the element's `updateComplete` promise
 * resolves. When the queried property may change with element state, this
 * decorator can be used instead of requiring users to await the
 * `updateComplete` before accessing the property.
 *
 * @param selector A DOMString containing one or more selectors to match.
 *
 * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector
 *
 * ```ts
 * class MyElement {
 *   @queryAsync('#first')
 *   first: Promise<HTMLDivElement>;
 *
 *   render() {
 *     return html`
 *       <div id="first"></div>
 *       <div id="second"></div>
 *     `;
 *   }
 * }
 *
 * // external usage
 * async doSomethingWithFirst() {
 *  (await aMyElement.first).doSomething();
 * }
 * ```
 * @category Decorator
 */
function queryAsync(selector) {
    return ((obj, name) => {
        return (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.desc)(obj, name, {
            async get() {
                await this.updateComplete;
                return this.renderRoot?.querySelector(selector) ?? null;
            },
        });
    });
}
//# sourceMappingURL=query-async.js.map

/***/ }),

/***/ "./node_modules/@lit/reactive-element/development/decorators/query.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@lit/reactive-element/development/decorators/query.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   query: () => (/* binding */ query)
/* harmony export */ });
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ "./node_modules/@lit/reactive-element/development/decorators/base.js");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */

const DEV_MODE = true;
let issueWarning;
if (DEV_MODE) {
    // Ensure warnings are issued only 1x, even if multiple versions of Lit
    // are loaded.
    const issuedWarnings = (globalThis.litIssuedWarnings ??= new Set());
    // Issue a warning, if we haven't already.
    issueWarning = (code, warning) => {
        warning += code
            ? ` See https://lit.dev/msg/${code} for more information.`
            : '';
        if (!issuedWarnings.has(warning)) {
            console.warn(warning);
            issuedWarnings.add(warning);
        }
    };
}
/**
 * A property decorator that converts a class property into a getter that
 * executes a querySelector on the element's renderRoot.
 *
 * @param selector A DOMString containing one or more selectors to match.
 * @param cache An optional boolean which when true performs the DOM query only
 *     once and caches the result.
 *
 * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector
 *
 * ```ts
 * class MyElement {
 *   @query('#first')
 *   first: HTMLDivElement;
 *
 *   render() {
 *     return html`
 *       <div id="first"></div>
 *       <div id="second"></div>
 *     `;
 *   }
 * }
 * ```
 * @category Decorator
 */
function query(selector, cache) {
    return ((protoOrTarget, nameOrContext, descriptor) => {
        const doQuery = (el) => {
            const result = (el.renderRoot?.querySelector(selector) ?? null);
            if (DEV_MODE && result === null && cache && !el.hasUpdated) {
                const name = typeof nameOrContext === 'object'
                    ? nameOrContext.name
                    : nameOrContext;
                issueWarning('', `@query'd field ${JSON.stringify(String(name))} with the 'cache' ` +
                    `flag set for selector '${selector}' has been accessed before ` +
                    `the first update and returned null. This is expected if the ` +
                    `renderRoot tree has not been provided beforehand (e.g. via ` +
                    `Declarative Shadow DOM). Therefore the value hasn't been cached.`);
            }
            // TODO: if we want to allow users to assert that the query will never
            // return null, we need a new option and to throw here if the result
            // is null.
            return result;
        };
        if (cache) {
            // Accessors to wrap from either:
            //   1. The decorator target, in the case of standard decorators
            //   2. The property descriptor, in the case of experimental decorators
            //      on auto-accessors.
            //   3. Functions that access our own cache-key property on the instance,
            //      in the case of experimental decorators on fields.
            const { get, set } = typeof nameOrContext === 'object'
                ? protoOrTarget
                : descriptor ??
                    (() => {
                        const key = DEV_MODE
                            ? Symbol(`${String(nameOrContext)} (@query() cache)`)
                            : Symbol();
                        return {
                            get() {
                                return this[key];
                            },
                            set(v) {
                                this[key] = v;
                            },
                        };
                    })();
            return (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.desc)(protoOrTarget, nameOrContext, {
                get() {
                    let result = get.call(this);
                    if (result === undefined) {
                        result = doQuery(this);
                        if (result !== null || this.hasUpdated) {
                            set.call(this, result);
                        }
                    }
                    return result;
                },
            });
        }
        else {
            // This object works as the return type for both standard and
            // experimental decorators.
            return (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.desc)(protoOrTarget, nameOrContext, {
                get() {
                    return doQuery(this);
                },
            });
        }
    });
}
//# sourceMappingURL=query.js.map

/***/ }),

/***/ "./node_modules/@lit/reactive-element/development/decorators/state.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@lit/reactive-element/development/decorators/state.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   state: () => (/* binding */ state)
/* harmony export */ });
/* harmony import */ var _property_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./property.js */ "./node_modules/@lit/reactive-element/development/decorators/property.js");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/*
 * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all
 * property decorators (but not class decorators) in this file that have
 * an @ExportDecoratedItems annotation must be defined as a regular function,
 * not an arrow function.
 */

/**
 * Declares a private or protected reactive property that still triggers
 * updates to the element when it changes. It does not reflect from the
 * corresponding attribute.
 *
 * Properties declared this way must not be used from HTML or HTML templating
 * systems, they're solely for properties internal to the element. These
 * properties may be renamed by optimization tools like closure compiler.
 * @category Decorator
 */
function state(options) {
    return (0,_property_js__WEBPACK_IMPORTED_MODULE_0__.property)({
        ...options,
        // Add both `state` and `attribute` because we found a third party
        // controller that is keying off of PropertyOptions.state to determine
        // whether a field is a private internal property or not.
        state: true,
        attribute: false,
    });
}
//# sourceMappingURL=state.js.map

/***/ }),

/***/ "./node_modules/@lit/reactive-element/development/reactive-element.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@lit/reactive-element/development/reactive-element.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSSResult: () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.CSSResult),
/* harmony export */   ReactiveElement: () => (/* binding */ ReactiveElement),
/* harmony export */   adoptStyles: () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.adoptStyles),
/* harmony export */   css: () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.css),
/* harmony export */   defaultConverter: () => (/* binding */ defaultConverter),
/* harmony export */   getCompatibleStyle: () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.getCompatibleStyle),
/* harmony export */   notEqual: () => (/* binding */ notEqual),
/* harmony export */   supportsAdoptingStyleSheets: () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.supportsAdoptingStyleSheets),
/* harmony export */   unsafeCSS: () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.unsafeCSS)
/* harmony export */ });
/* harmony import */ var _css_tag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./css-tag.js */ "./node_modules/@lit/reactive-element/development/css-tag.js");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * Use this module if you want to create your own base class extending
 * {@link ReactiveElement}.
 * @packageDocumentation
 */

// In the Node build, this import will be injected by Rollup:
// import {HTMLElement, customElements} from '@lit-labs/ssr-dom-shim';

// TODO (justinfagnani): Add `hasOwn` here when we ship ES2022
const { is, defineProperty, getOwnPropertyDescriptor, getOwnPropertyNames, getOwnPropertySymbols, getPrototypeOf, } = Object;
const NODE_MODE = false;
// Lets a minifier replace globalThis references with a minified name
const global = globalThis;
if (NODE_MODE) {
    global.customElements ??= customElements;
}
const DEV_MODE = true;
let issueWarning;
const trustedTypes = global
    .trustedTypes;
// Temporary workaround for https://crbug.com/993268
// Currently, any attribute starting with "on" is considered to be a
// TrustedScript source. Such boolean attributes must be set to the equivalent
// trusted emptyScript value.
const emptyStringForBooleanAttribute = trustedTypes
    ? trustedTypes.emptyScript
    : '';
const polyfillSupport = DEV_MODE
    ? global.reactiveElementPolyfillSupportDevMode
    : global.reactiveElementPolyfillSupport;
if (DEV_MODE) {
    // Ensure warnings are issued only 1x, even if multiple versions of Lit
    // are loaded.
    const issuedWarnings = (global.litIssuedWarnings ??=
        new Set());
    // Issue a warning, if we haven't already.
    issueWarning = (code, warning) => {
        warning += ` See https://lit.dev/msg/${code} for more information.`;
        if (!issuedWarnings.has(warning)) {
            console.warn(warning);
            issuedWarnings.add(warning);
        }
    };
    issueWarning('dev-mode', `Lit is in dev mode. Not recommended for production!`);
    // Issue polyfill support warning.
    if (global.ShadyDOM?.inUse && polyfillSupport === undefined) {
        issueWarning('polyfill-support-missing', `Shadow DOM is being polyfilled via \`ShadyDOM\` but ` +
            `the \`polyfill-support\` module has not been loaded.`);
    }
}
/**
 * Useful for visualizing and logging insights into what the Lit template system is doing.
 *
 * Compiled out of prod mode builds.
 */
const debugLogEvent = DEV_MODE
    ? (event) => {
        const shouldEmit = global
            .emitLitDebugLogEvents;
        if (!shouldEmit) {
            return;
        }
        global.dispatchEvent(new CustomEvent('lit-debug', {
            detail: event,
        }));
    }
    : undefined;
/*
 * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
 * replaced at compile time by the munged name for object[property]. We cannot
 * alias this function, so we have to use a small shim that has the same
 * behavior when not compiling.
 */
/*@__INLINE__*/
const JSCompiler_renameProperty = (prop, _obj) => prop;
const defaultConverter = {
    toAttribute(value, type) {
        switch (type) {
            case Boolean:
                value = value ? emptyStringForBooleanAttribute : null;
                break;
            case Object:
            case Array:
                // if the value is `null` or `undefined` pass this through
                // to allow removing/no change behavior.
                value = value == null ? value : JSON.stringify(value);
                break;
        }
        return value;
    },
    fromAttribute(value, type) {
        let fromValue = value;
        switch (type) {
            case Boolean:
                fromValue = value !== null;
                break;
            case Number:
                fromValue = value === null ? null : Number(value);
                break;
            case Object:
            case Array:
                // Do *not* generate exception when invalid JSON is set as elements
                // don't normally complain on being mis-configured.
                // TODO(sorvell): Do generate exception in *dev mode*.
                try {
                    // Assert to adhere to Bazel's "must type assert JSON parse" rule.
                    fromValue = JSON.parse(value);
                }
                catch (e) {
                    fromValue = null;
                }
                break;
        }
        return fromValue;
    },
};
/**
 * Change function that returns true if `value` is different from `oldValue`.
 * This method is used as the default for a property's `hasChanged` function.
 */
const notEqual = (value, old) => !is(value, old);
const defaultPropertyDeclaration = {
    attribute: true,
    type: String,
    converter: defaultConverter,
    reflect: false,
    hasChanged: notEqual,
};
// Ensure metadata is enabled. TypeScript does not polyfill
// Symbol.metadata, so we must ensure that it exists.
Symbol.metadata ??= Symbol('metadata');
// Map from a class's metadata object to property options
// Note that we must use nullish-coalescing assignment so that we only use one
// map even if we load multiple version of this module.
global.litPropertyMetadata ??= new WeakMap();
/**
 * Base element class which manages element properties and attributes. When
 * properties change, the `update` method is asynchronously called. This method
 * should be supplied by subclasses to render updates as desired.
 * @noInheritDoc
 */
class ReactiveElement
// In the Node build, this `extends` clause will be substituted with
// `(globalThis.HTMLElement ?? HTMLElement)`.
//
// This way, we will first prefer any global `HTMLElement` polyfill that the
// user has assigned, and then fall back to the `HTMLElement` shim which has
// been imported (see note at the top of this file about how this import is
// generated by Rollup). Note that the `HTMLElement` variable has been
// shadowed by this import, so it no longer refers to the global.
 extends HTMLElement {
    /**
     * Adds an initializer function to the class that is called during instance
     * construction.
     *
     * This is useful for code that runs against a `ReactiveElement`
     * subclass, such as a decorator, that needs to do work for each
     * instance, such as setting up a `ReactiveController`.
     *
     * ```ts
     * const myDecorator = (target: typeof ReactiveElement, key: string) => {
     *   target.addInitializer((instance: ReactiveElement) => {
     *     // This is run during construction of the element
     *     new MyController(instance);
     *   });
     * }
     * ```
     *
     * Decorating a field will then cause each instance to run an initializer
     * that adds a controller:
     *
     * ```ts
     * class MyElement extends LitElement {
     *   @myDecorator foo;
     * }
     * ```
     *
     * Initializers are stored per-constructor. Adding an initializer to a
     * subclass does not add it to a superclass. Since initializers are run in
     * constructors, initializers will run in order of the class hierarchy,
     * starting with superclasses and progressing to the instance's class.
     *
     * @nocollapse
     */
    static addInitializer(initializer) {
        this.__prepare();
        (this._initializers ??= []).push(initializer);
    }
    /**
     * Returns a list of attributes corresponding to the registered properties.
     * @nocollapse
     * @category attributes
     */
    static get observedAttributes() {
        // Ensure we've created all properties
        this.finalize();
        // this.__attributeToPropertyMap is only undefined after finalize() in
        // ReactiveElement itself. ReactiveElement.observedAttributes is only
        // accessed with ReactiveElement as the receiver when a subclass or mixin
        // calls super.observedAttributes
        return (this.__attributeToPropertyMap && [...this.__attributeToPropertyMap.keys()]);
    }
    /**
     * Creates a property accessor on the element prototype if one does not exist
     * and stores a {@linkcode PropertyDeclaration} for the property with the
     * given options. The property setter calls the property's `hasChanged`
     * property option or uses a strict identity check to determine whether or not
     * to request an update.
     *
     * This method may be overridden to customize properties; however,
     * when doing so, it's important to call `super.createProperty` to ensure
     * the property is setup correctly. This method calls
     * `getPropertyDescriptor` internally to get a descriptor to install.
     * To customize what properties do when they are get or set, override
     * `getPropertyDescriptor`. To customize the options for a property,
     * implement `createProperty` like this:
     *
     * ```ts
     * static createProperty(name, options) {
     *   options = Object.assign(options, {myOption: true});
     *   super.createProperty(name, options);
     * }
     * ```
     *
     * @nocollapse
     * @category properties
     */
    static createProperty(name, options = defaultPropertyDeclaration) {
        // If this is a state property, force the attribute to false.
        if (options.state) {
            options.attribute = false;
        }
        this.__prepare();
        this.elementProperties.set(name, options);
        if (!options.noAccessor) {
            const key = DEV_MODE
                ? // Use Symbol.for in dev mode to make it easier to maintain state
                    // when doing HMR.
                    Symbol.for(`${String(name)} (@property() cache)`)
                : Symbol();
            const descriptor = this.getPropertyDescriptor(name, key, options);
            if (descriptor !== undefined) {
                defineProperty(this.prototype, name, descriptor);
            }
        }
    }
    /**
     * Returns a property descriptor to be defined on the given named property.
     * If no descriptor is returned, the property will not become an accessor.
     * For example,
     *
     * ```ts
     * class MyElement extends LitElement {
     *   static getPropertyDescriptor(name, key, options) {
     *     const defaultDescriptor =
     *         super.getPropertyDescriptor(name, key, options);
     *     const setter = defaultDescriptor.set;
     *     return {
     *       get: defaultDescriptor.get,
     *       set(value) {
     *         setter.call(this, value);
     *         // custom action.
     *       },
     *       configurable: true,
     *       enumerable: true
     *     }
     *   }
     * }
     * ```
     *
     * @nocollapse
     * @category properties
     */
    static getPropertyDescriptor(name, key, options) {
        const { get, set } = getOwnPropertyDescriptor(this.prototype, name) ?? {
            get() {
                return this[key];
            },
            set(v) {
                this[key] = v;
            },
        };
        if (DEV_MODE && get == null) {
            if ('value' in (getOwnPropertyDescriptor(this.prototype, name) ?? {})) {
                throw new Error(`Field ${JSON.stringify(String(name))} on ` +
                    `${this.name} was declared as a reactive property ` +
                    `but it's actually declared as a value on the prototype. ` +
                    `Usually this is due to using @property or @state on a method.`);
            }
            issueWarning('reactive-property-without-getter', `Field ${JSON.stringify(String(name))} on ` +
                `${this.name} was declared as a reactive property ` +
                `but it does not have a getter. This will be an error in a ` +
                `future version of Lit.`);
        }
        return {
            get() {
                return get?.call(this);
            },
            set(value) {
                const oldValue = get?.call(this);
                set.call(this, value);
                this.requestUpdate(name, oldValue, options);
            },
            configurable: true,
            enumerable: true,
        };
    }
    /**
     * Returns the property options associated with the given property.
     * These options are defined with a `PropertyDeclaration` via the `properties`
     * object or the `@property` decorator and are registered in
     * `createProperty(...)`.
     *
     * Note, this method should be considered "final" and not overridden. To
     * customize the options for a given property, override
     * {@linkcode createProperty}.
     *
     * @nocollapse
     * @final
     * @category properties
     */
    static getPropertyOptions(name) {
        return this.elementProperties.get(name) ?? defaultPropertyDeclaration;
    }
    /**
     * Initializes static own properties of the class used in bookkeeping
     * for element properties, initializers, etc.
     *
     * Can be called multiple times by code that needs to ensure these
     * properties exist before using them.
     *
     * This method ensures the superclass is finalized so that inherited
     * property metadata can be copied down.
     * @nocollapse
     */
    static __prepare() {
        if (this.hasOwnProperty(JSCompiler_renameProperty('elementProperties', this))) {
            // Already prepared
            return;
        }
        // Finalize any superclasses
        const superCtor = getPrototypeOf(this);
        superCtor.finalize();
        // Create own set of initializers for this class if any exist on the
        // superclass and copy them down. Note, for a small perf boost, avoid
        // creating initializers unless needed.
        if (superCtor._initializers !== undefined) {
            this._initializers = [...superCtor._initializers];
        }
        // Initialize elementProperties from the superclass
        this.elementProperties = new Map(superCtor.elementProperties);
    }
    /**
     * Finishes setting up the class so that it's ready to be registered
     * as a custom element and instantiated.
     *
     * This method is called by the ReactiveElement.observedAttributes getter.
     * If you override the observedAttributes getter, you must either call
     * super.observedAttributes to trigger finalization, or call finalize()
     * yourself.
     *
     * @nocollapse
     */
    static finalize() {
        if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this))) {
            return;
        }
        this.finalized = true;
        this.__prepare();
        // Create properties from the static properties block:
        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {
            const props = this.properties;
            const propKeys = [
                ...getOwnPropertyNames(props),
                ...getOwnPropertySymbols(props),
            ];
            for (const p of propKeys) {
                this.createProperty(p, props[p]);
            }
        }
        // Create properties from standard decorator metadata:
        const metadata = this[Symbol.metadata];
        if (metadata !== null) {
            const properties = litPropertyMetadata.get(metadata);
            if (properties !== undefined) {
                for (const [p, options] of properties) {
                    this.elementProperties.set(p, options);
                }
            }
        }
        // Create the attribute-to-property map
        this.__attributeToPropertyMap = new Map();
        for (const [p, options] of this.elementProperties) {
            const attr = this.__attributeNameForProperty(p, options);
            if (attr !== undefined) {
                this.__attributeToPropertyMap.set(attr, p);
            }
        }
        this.elementStyles = this.finalizeStyles(this.styles);
        if (DEV_MODE) {
            if (this.hasOwnProperty('createProperty')) {
                issueWarning('no-override-create-property', 'Overriding ReactiveElement.createProperty() is deprecated. ' +
                    'The override will not be called with standard decorators');
            }
            if (this.hasOwnProperty('getPropertyDescriptor')) {
                issueWarning('no-override-get-property-descriptor', 'Overriding ReactiveElement.getPropertyDescriptor() is deprecated. ' +
                    'The override will not be called with standard decorators');
            }
        }
    }
    /**
     * Takes the styles the user supplied via the `static styles` property and
     * returns the array of styles to apply to the element.
     * Override this method to integrate into a style management system.
     *
     * Styles are deduplicated preserving the _last_ instance in the list. This
     * is a performance optimization to avoid duplicated styles that can occur
     * especially when composing via subclassing. The last item is kept to try
     * to preserve the cascade order with the assumption that it's most important
     * that last added styles override previous styles.
     *
     * @nocollapse
     * @category styles
     */
    static finalizeStyles(styles) {
        const elementStyles = [];
        if (Array.isArray(styles)) {
            // Dedupe the flattened array in reverse order to preserve the last items.
            // Casting to Array<unknown> works around TS error that
            // appears to come from trying to flatten a type CSSResultArray.
            const set = new Set(styles.flat(Infinity).reverse());
            // Then preserve original order by adding the set items in reverse order.
            for (const s of set) {
                elementStyles.unshift((0,_css_tag_js__WEBPACK_IMPORTED_MODULE_0__.getCompatibleStyle)(s));
            }
        }
        else if (styles !== undefined) {
            elementStyles.push((0,_css_tag_js__WEBPACK_IMPORTED_MODULE_0__.getCompatibleStyle)(styles));
        }
        return elementStyles;
    }
    /**
     * Returns the property name for the given attribute `name`.
     * @nocollapse
     */
    static __attributeNameForProperty(name, options) {
        const attribute = options.attribute;
        return attribute === false
            ? undefined
            : typeof attribute === 'string'
                ? attribute
                : typeof name === 'string'
                    ? name.toLowerCase()
                    : undefined;
    }
    constructor() {
        super();
        this.__instanceProperties = undefined;
        /**
         * True if there is a pending update as a result of calling `requestUpdate()`.
         * Should only be read.
         * @category updates
         */
        this.isUpdatePending = false;
        /**
         * Is set to `true` after the first update. The element code cannot assume
         * that `renderRoot` exists before the element `hasUpdated`.
         * @category updates
         */
        this.hasUpdated = false;
        /**
         * Name of currently reflecting property
         */
        this.__reflectingProperty = null;
        this.__initialize();
    }
    /**
     * Internal only override point for customizing work done when elements
     * are constructed.
     */
    __initialize() {
        this.__updatePromise = new Promise((res) => (this.enableUpdating = res));
        this._$changedProperties = new Map();
        // This enqueues a microtask that ust run before the first update, so it
        // must be called before requestUpdate()
        this.__saveInstanceProperties();
        // ensures first update will be caught by an early access of
        // `updateComplete`
        this.requestUpdate();
        this.constructor._initializers?.forEach((i) => i(this));
    }
    /**
     * Registers a `ReactiveController` to participate in the element's reactive
     * update cycle. The element automatically calls into any registered
     * controllers during its lifecycle callbacks.
     *
     * If the element is connected when `addController()` is called, the
     * controller's `hostConnected()` callback will be immediately called.
     * @category controllers
     */
    addController(controller) {
        (this.__controllers ??= new Set()).add(controller);
        // If a controller is added after the element has been connected,
        // call hostConnected. Note, re-using existence of `renderRoot` here
        // (which is set in connectedCallback) to avoid the need to track a
        // first connected state.
        if (this.renderRoot !== undefined && this.isConnected) {
            controller.hostConnected?.();
        }
    }
    /**
     * Removes a `ReactiveController` from the element.
     * @category controllers
     */
    removeController(controller) {
        this.__controllers?.delete(controller);
    }
    /**
     * Fixes any properties set on the instance before upgrade time.
     * Otherwise these would shadow the accessor and break these properties.
     * The properties are stored in a Map which is played back after the
     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
     * (<=41), properties created for native platform properties like (`id` or
     * `name`) may not have default values set in the element constructor. On
     * these browsers native properties appear on instances and therefore their
     * default value will overwrite any element default (e.g. if the element sets
     * this.id = 'id' in the constructor, the 'id' will become '' since this is
     * the native platform default).
     */
    __saveInstanceProperties() {
        const instanceProperties = new Map();
        const elementProperties = this.constructor
            .elementProperties;
        for (const p of elementProperties.keys()) {
            if (this.hasOwnProperty(p)) {
                instanceProperties.set(p, this[p]);
                delete this[p];
            }
        }
        if (instanceProperties.size > 0) {
            this.__instanceProperties = instanceProperties;
        }
    }
    /**
     * Returns the node into which the element should render and by default
     * creates and returns an open shadowRoot. Implement to customize where the
     * element's DOM is rendered. For example, to render into the element's
     * childNodes, return `this`.
     *
     * @return Returns a node into which to render.
     * @category rendering
     */
    createRenderRoot() {
        const renderRoot = this.shadowRoot ??
            this.attachShadow(this.constructor.shadowRootOptions);
        (0,_css_tag_js__WEBPACK_IMPORTED_MODULE_0__.adoptStyles)(renderRoot, this.constructor.elementStyles);
        return renderRoot;
    }
    /**
     * On first connection, creates the element's renderRoot, sets up
     * element styling, and enables updating.
     * @category lifecycle
     */
    connectedCallback() {
        // Create renderRoot before controllers `hostConnected`
        this.renderRoot ??=
            this.createRenderRoot();
        this.enableUpdating(true);
        this.__controllers?.forEach((c) => c.hostConnected?.());
    }
    /**
     * Note, this method should be considered final and not overridden. It is
     * overridden on the element instance with a function that triggers the first
     * update.
     * @category updates
     */
    enableUpdating(_requestedUpdate) { }
    /**
     * Allows for `super.disconnectedCallback()` in extensions while
     * reserving the possibility of making non-breaking feature additions
     * when disconnecting at some point in the future.
     * @category lifecycle
     */
    disconnectedCallback() {
        this.__controllers?.forEach((c) => c.hostDisconnected?.());
    }
    /**
     * Synchronizes property values when attributes change.
     *
     * Specifically, when an attribute is set, the corresponding property is set.
     * You should rarely need to implement this callback. If this method is
     * overridden, `super.attributeChangedCallback(name, _old, value)` must be
     * called.
     *
     * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)
     * on MDN for more information about the `attributeChangedCallback`.
     * @category attributes
     */
    attributeChangedCallback(name, _old, value) {
        this._$attributeToProperty(name, value);
    }
    __propertyToAttribute(name, value) {
        const elemProperties = this.constructor.elementProperties;
        const options = elemProperties.get(name);
        const attr = this.constructor.__attributeNameForProperty(name, options);
        if (attr !== undefined && options.reflect === true) {
            const converter = options.converter?.toAttribute !==
                undefined
                ? options.converter
                : defaultConverter;
            const attrValue = converter.toAttribute(value, options.type);
            if (DEV_MODE &&
                this.constructor.enabledWarnings.includes('migration') &&
                attrValue === undefined) {
                issueWarning('undefined-attribute-value', `The attribute value for the ${name} property is ` +
                    `undefined on element ${this.localName}. The attribute will be ` +
                    `removed, but in the previous version of \`ReactiveElement\`, ` +
                    `the attribute would not have changed.`);
            }
            // Track if the property is being reflected to avoid
            // setting the property again via `attributeChangedCallback`. Note:
            // 1. this takes advantage of the fact that the callback is synchronous.
            // 2. will behave incorrectly if multiple attributes are in the reaction
            // stack at time of calling. However, since we process attributes
            // in `update` this should not be possible (or an extreme corner case
            // that we'd like to discover).
            // mark state reflecting
            this.__reflectingProperty = name;
            if (attrValue == null) {
                this.removeAttribute(attr);
            }
            else {
                this.setAttribute(attr, attrValue);
            }
            // mark state not reflecting
            this.__reflectingProperty = null;
        }
    }
    /** @internal */
    _$attributeToProperty(name, value) {
        const ctor = this.constructor;
        // Note, hint this as an `AttributeMap` so closure clearly understands
        // the type; it has issues with tracking types through statics
        const propName = ctor.__attributeToPropertyMap.get(name);
        // Use tracking info to avoid reflecting a property value to an attribute
        // if it was just set because the attribute changed.
        if (propName !== undefined && this.__reflectingProperty !== propName) {
            const options = ctor.getPropertyOptions(propName);
            const converter = typeof options.converter === 'function'
                ? { fromAttribute: options.converter }
                : options.converter?.fromAttribute !== undefined
                    ? options.converter
                    : defaultConverter;
            // mark state reflecting
            this.__reflectingProperty = propName;
            this[propName] = converter.fromAttribute(value, options.type
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            );
            // mark state not reflecting
            this.__reflectingProperty = null;
        }
    }
    /**
     * Requests an update which is processed asynchronously. This should be called
     * when an element should update based on some state not triggered by setting
     * a reactive property. In this case, pass no arguments. It should also be
     * called when manually implementing a property setter. In this case, pass the
     * property `name` and `oldValue` to ensure that any configured property
     * options are honored.
     *
     * @param name name of requesting property
     * @param oldValue old value of requesting property
     * @param options property options to use instead of the previously
     *     configured options
     * @category updates
     */
    requestUpdate(name, oldValue, options) {
        // If we have a property key, perform property update steps.
        if (name !== undefined) {
            if (DEV_MODE && name instanceof Event) {
                issueWarning(``, `The requestUpdate() method was called with an Event as the property name. This is probably a mistake caused by binding this.requestUpdate as an event listener. Instead bind a function that will call it with no arguments: () => this.requestUpdate()`);
            }
            options ??= this.constructor.getPropertyOptions(name);
            const hasChanged = options.hasChanged ?? notEqual;
            const newValue = this[name];
            if (hasChanged(newValue, oldValue)) {
                this._$changeProperty(name, oldValue, options);
            }
            else {
                // Abort the request if the property should not be considered changed.
                return;
            }
        }
        if (this.isUpdatePending === false) {
            this.__updatePromise = this.__enqueueUpdate();
        }
    }
    /**
     * @internal
     */
    _$changeProperty(name, oldValue, options) {
        // TODO (justinfagnani): Create a benchmark of Map.has() + Map.set(
        // vs just Map.set()
        if (!this._$changedProperties.has(name)) {
            this._$changedProperties.set(name, oldValue);
        }
        // Add to reflecting properties set.
        // Note, it's important that every change has a chance to add the
        // property to `__reflectingProperties`. This ensures setting
        // attribute + property reflects correctly.
        if (options.reflect === true && this.__reflectingProperty !== name) {
            (this.__reflectingProperties ??= new Set()).add(name);
        }
    }
    /**
     * Sets up the element to asynchronously update.
     */
    async __enqueueUpdate() {
        this.isUpdatePending = true;
        try {
            // Ensure any previous update has resolved before updating.
            // This `await` also ensures that property changes are batched.
            await this.__updatePromise;
        }
        catch (e) {
            // Refire any previous errors async so they do not disrupt the update
            // cycle. Errors are refired so developers have a chance to observe
            // them, and this can be done by implementing
            // `window.onunhandledrejection`.
            Promise.reject(e);
        }
        const result = this.scheduleUpdate();
        // If `scheduleUpdate` returns a Promise, we await it. This is done to
        // enable coordinating updates with a scheduler. Note, the result is
        // checked to avoid delaying an additional microtask unless we need to.
        if (result != null) {
            await result;
        }
        return !this.isUpdatePending;
    }
    /**
     * Schedules an element update. You can override this method to change the
     * timing of updates by returning a Promise. The update will await the
     * returned Promise, and you should resolve the Promise to allow the update
     * to proceed. If this method is overridden, `super.scheduleUpdate()`
     * must be called.
     *
     * For instance, to schedule updates to occur just before the next frame:
     *
     * ```ts
     * override protected async scheduleUpdate(): Promise<unknown> {
     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
     *   super.scheduleUpdate();
     * }
     * ```
     * @category updates
     */
    scheduleUpdate() {
        const result = this.performUpdate();
        if (DEV_MODE &&
            this.constructor.enabledWarnings.includes('async-perform-update') &&
            typeof result?.then ===
                'function') {
            issueWarning('async-perform-update', `Element ${this.localName} returned a Promise from performUpdate(). ` +
                `This behavior is deprecated and will be removed in a future ` +
                `version of ReactiveElement.`);
        }
        return result;
    }
    /**
     * Performs an element update. Note, if an exception is thrown during the
     * update, `firstUpdated` and `updated` will not be called.
     *
     * Call `performUpdate()` to immediately process a pending update. This should
     * generally not be needed, but it can be done in rare cases when you need to
     * update synchronously.
     *
     * @category updates
     */
    performUpdate() {
        // Abort any update if one is not pending when this is called.
        // This can happen if `performUpdate` is called early to "flush"
        // the update.
        if (!this.isUpdatePending) {
            return;
        }
        debugLogEvent?.({ kind: 'update' });
        if (!this.hasUpdated) {
            // Create renderRoot before first update. This occurs in `connectedCallback`
            // but is done here to support out of tree calls to `enableUpdating`/`performUpdate`.
            this.renderRoot ??=
                this.createRenderRoot();
            if (DEV_MODE) {
                // Produce warning if any reactive properties on the prototype are
                // shadowed by class fields. Instance fields set before upgrade are
                // deleted by this point, so any own property is caused by class field
                // initialization in the constructor.
                const ctor = this.constructor;
                const shadowedProperties = [...ctor.elementProperties.keys()].filter((p) => this.hasOwnProperty(p) && p in getPrototypeOf(this));
                if (shadowedProperties.length) {
                    throw new Error(`The following properties on element ${this.localName} will not ` +
                        `trigger updates as expected because they are set using class ` +
                        `fields: ${shadowedProperties.join(', ')}. ` +
                        `Native class fields and some compiled output will overwrite ` +
                        `accessors used for detecting changes. See ` +
                        `https://lit.dev/msg/class-field-shadowing ` +
                        `for more information.`);
                }
            }
            // Mixin instance properties once, if they exist.
            if (this.__instanceProperties) {
                // TODO (justinfagnani): should we use the stored value? Could a new value
                // have been set since we stored the own property value?
                for (const [p, value] of this.__instanceProperties) {
                    this[p] = value;
                }
                this.__instanceProperties = undefined;
            }
            // Trigger initial value reflection and populate the initial
            // changedProperties map, but only for the case of experimental
            // decorators on accessors, which will not have already populated the
            // changedProperties map. We can't know if these accessors had
            // initializers, so we just set them anyway - a difference from
            // experimental decorators on fields and standard decorators on
            // auto-accessors.
            // For context why experimentalDecorators with auto accessors are handled
            // specifically also see:
            // https://github.com/lit/lit/pull/4183#issuecomment-1711959635
            const elementProperties = this.constructor
                .elementProperties;
            if (elementProperties.size > 0) {
                for (const [p, options] of elementProperties) {
                    if (options.wrapped === true &&
                        !this._$changedProperties.has(p) &&
                        this[p] !== undefined) {
                        this._$changeProperty(p, this[p], options);
                    }
                }
            }
        }
        let shouldUpdate = false;
        const changedProperties = this._$changedProperties;
        try {
            shouldUpdate = this.shouldUpdate(changedProperties);
            if (shouldUpdate) {
                this.willUpdate(changedProperties);
                this.__controllers?.forEach((c) => c.hostUpdate?.());
                this.update(changedProperties);
            }
            else {
                this.__markUpdated();
            }
        }
        catch (e) {
            // Prevent `firstUpdated` and `updated` from running when there's an
            // update exception.
            shouldUpdate = false;
            // Ensure element can accept additional updates after an exception.
            this.__markUpdated();
            throw e;
        }
        // The update is no longer considered pending and further updates are now allowed.
        if (shouldUpdate) {
            this._$didUpdate(changedProperties);
        }
    }
    /**
     * Invoked before `update()` to compute values needed during the update.
     *
     * Implement `willUpdate` to compute property values that depend on other
     * properties and are used in the rest of the update process.
     *
     * ```ts
     * willUpdate(changedProperties) {
     *   // only need to check changed properties for an expensive computation.
     *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {
     *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);
     *   }
     * }
     *
     * render() {
     *   return html`SHA: ${this.sha}`;
     * }
     * ```
     *
     * @category updates
     */
    willUpdate(_changedProperties) { }
    // Note, this is an override point for polyfill-support.
    // @internal
    _$didUpdate(changedProperties) {
        this.__controllers?.forEach((c) => c.hostUpdated?.());
        if (!this.hasUpdated) {
            this.hasUpdated = true;
            this.firstUpdated(changedProperties);
        }
        this.updated(changedProperties);
        if (DEV_MODE &&
            this.isUpdatePending &&
            this.constructor.enabledWarnings.includes('change-in-update')) {
            issueWarning('change-in-update', `Element ${this.localName} scheduled an update ` +
                `(generally because a property was set) ` +
                `after an update completed, causing a new update to be scheduled. ` +
                `This is inefficient and should be avoided unless the next update ` +
                `can only be scheduled as a side effect of the previous update.`);
        }
    }
    __markUpdated() {
        this._$changedProperties = new Map();
        this.isUpdatePending = false;
    }
    /**
     * Returns a Promise that resolves when the element has completed updating.
     * The Promise value is a boolean that is `true` if the element completed the
     * update without triggering another update. The Promise result is `false` if
     * a property was set inside `updated()`. If the Promise is rejected, an
     * exception was thrown during the update.
     *
     * To await additional asynchronous work, override the `getUpdateComplete`
     * method. For example, it is sometimes useful to await a rendered element
     * before fulfilling this Promise. To do this, first await
     * `super.getUpdateComplete()`, then any subsequent state.
     *
     * @return A promise of a boolean that resolves to true if the update completed
     *     without triggering another update.
     * @category updates
     */
    get updateComplete() {
        return this.getUpdateComplete();
    }
    /**
     * Override point for the `updateComplete` promise.
     *
     * It is not safe to override the `updateComplete` getter directly due to a
     * limitation in TypeScript which means it is not possible to call a
     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target
     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).
     * This method should be overridden instead. For example:
     *
     * ```ts
     * class MyElement extends LitElement {
     *   override async getUpdateComplete() {
     *     const result = await super.getUpdateComplete();
     *     await this._myChild.updateComplete;
     *     return result;
     *   }
     * }
     * ```
     *
     * @return A promise of a boolean that resolves to true if the update completed
     *     without triggering another update.
     * @category updates
     */
    getUpdateComplete() {
        return this.__updatePromise;
    }
    /**
     * Controls whether or not `update()` should be called when the element requests
     * an update. By default, this method always returns `true`, but this can be
     * customized to control when to update.
     *
     * @param _changedProperties Map of changed properties with old values
     * @category updates
     */
    shouldUpdate(_changedProperties) {
        return true;
    }
    /**
     * Updates the element. This method reflects property values to attributes.
     * It can be overridden to render and keep updated element DOM.
     * Setting properties inside this method will *not* trigger
     * another update.
     *
     * @param _changedProperties Map of changed properties with old values
     * @category updates
     */
    update(_changedProperties) {
        // The forEach() expression will only run when when __reflectingProperties is
        // defined, and it returns undefined, setting __reflectingProperties to
        // undefined
        this.__reflectingProperties &&= this.__reflectingProperties.forEach((p) => this.__propertyToAttribute(p, this[p]));
        this.__markUpdated();
    }
    /**
     * Invoked whenever the element is updated. Implement to perform
     * post-updating tasks via DOM APIs, for example, focusing an element.
     *
     * Setting properties inside this method will trigger the element to update
     * again after this update cycle completes.
     *
     * @param _changedProperties Map of changed properties with old values
     * @category updates
     */
    updated(_changedProperties) { }
    /**
     * Invoked when the element is first updated. Implement to perform one time
     * work on the element after update.
     *
     * ```ts
     * firstUpdated() {
     *   this.renderRoot.getElementById('my-text-area').focus();
     * }
     * ```
     *
     * Setting properties inside this method will trigger the element to update
     * again after this update cycle completes.
     *
     * @param _changedProperties Map of changed properties with old values
     * @category updates
     */
    firstUpdated(_changedProperties) { }
}
/**
 * Memoized list of all element styles.
 * Created lazily on user subclasses when finalizing the class.
 * @nocollapse
 * @category styles
 */
ReactiveElement.elementStyles = [];
/**
 * Options used when calling `attachShadow`. Set this property to customize
 * the options for the shadowRoot; for example, to create a closed
 * shadowRoot: `{mode: 'closed'}`.
 *
 * Note, these options are used in `createRenderRoot`. If this method
 * is customized, options should be respected if possible.
 * @nocollapse
 * @category rendering
 */
ReactiveElement.shadowRootOptions = { mode: 'open' };
// Assigned here to work around a jscompiler bug with static fields
// when compiling to ES5.
// https://github.com/google/closure-compiler/issues/3177
ReactiveElement[JSCompiler_renameProperty('elementProperties', ReactiveElement)] = new Map();
ReactiveElement[JSCompiler_renameProperty('finalized', ReactiveElement)] = new Map();
// Apply polyfills if available
polyfillSupport?.({ ReactiveElement });
// Dev mode warnings...
if (DEV_MODE) {
    // Default warning set.
    ReactiveElement.enabledWarnings = [
        'change-in-update',
        'async-perform-update',
    ];
    const ensureOwnWarnings = function (ctor) {
        if (!ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))) {
            ctor.enabledWarnings = ctor.enabledWarnings.slice();
        }
    };
    ReactiveElement.enableWarning = function (warning) {
        ensureOwnWarnings(this);
        if (!this.enabledWarnings.includes(warning)) {
            this.enabledWarnings.push(warning);
        }
    };
    ReactiveElement.disableWarning = function (warning) {
        ensureOwnWarnings(this);
        const i = this.enabledWarnings.indexOf(warning);
        if (i >= 0) {
            this.enabledWarnings.splice(i, 1);
        }
    };
}
// IMPORTANT: do not change the property name or the assignment expression.
// This line will be used in regexes to search for ReactiveElement usage.
(global.reactiveElementVersions ??= []).push('2.0.4');
if (DEV_MODE && global.reactiveElementVersions.length > 1) {
    issueWarning('multiple-versions', `Multiple versions of Lit loaded. Loading multiple versions ` +
        `is not recommended.`);
}
//# sourceMappingURL=reactive-element.js.map

/***/ }),

/***/ "./node_modules/@material/web/checkbox/checkbox.js":
/*!*********************************************************!*\
  !*** ./node_modules/@material/web/checkbox/checkbox.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MdCheckbox: () => (/* binding */ MdCheckbox)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ "./node_modules/lit/decorators.js");
/* harmony import */ var _internal_checkbox_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/checkbox.js */ "./node_modules/@material/web/checkbox/internal/checkbox.js");
/* harmony import */ var _internal_checkbox_styles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/checkbox-styles.js */ "./node_modules/@material/web/checkbox/internal/checkbox-styles.js");
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */




/**
 * @summary Checkboxes allow users to select one or more items from a set.
 * Checkboxes can turn an option on or off.
 *
 * @description
 * Use checkboxes to:
 * - Select one or more options from a list
 * - Present a list containing sub-selections
 * - Turn an item on or off in a desktop environment
 *
 * @final
 * @suppress {visibility}
 */
let MdCheckbox = class MdCheckbox extends _internal_checkbox_js__WEBPACK_IMPORTED_MODULE_1__.Checkbox {
};
MdCheckbox.styles = [_internal_checkbox_styles_js__WEBPACK_IMPORTED_MODULE_2__.styles];
MdCheckbox = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.customElement)('md-checkbox')
], MdCheckbox);

//# sourceMappingURL=checkbox.js.map

/***/ }),

/***/ "./node_modules/@material/web/checkbox/internal/checkbox-styles.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@material/web/checkbox/internal/checkbox-styles.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   styles: () => (/* binding */ styles)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
// Generated stylesheet for ./checkbox/internal/checkbox-styles.css.

const styles = (0,lit__WEBPACK_IMPORTED_MODULE_0__.css) `:host{border-start-start-radius:var(--md-checkbox-container-shape-start-start, var(--md-checkbox-container-shape, 2px));border-start-end-radius:var(--md-checkbox-container-shape-start-end, var(--md-checkbox-container-shape, 2px));border-end-end-radius:var(--md-checkbox-container-shape-end-end, var(--md-checkbox-container-shape, 2px));border-end-start-radius:var(--md-checkbox-container-shape-end-start, var(--md-checkbox-container-shape, 2px));display:inline-flex;height:var(--md-checkbox-container-size, 18px);position:relative;vertical-align:top;width:var(--md-checkbox-container-size, 18px);-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer}:host([disabled]){cursor:default}:host([touch-target=wrapper]){margin:max(0px,(48px - var(--md-checkbox-container-size, 18px))/2)}md-focus-ring{height:44px;inset:unset;width:44px}input{appearance:none;height:48px;margin:0;opacity:0;outline:none;position:absolute;width:48px;z-index:1;cursor:inherit}:host([touch-target=none]) input{height:100%;width:100%}.container{border-radius:inherit;display:flex;height:100%;place-content:center;place-items:center;position:relative;width:100%}.outline,.background,.icon{inset:0;position:absolute}.outline,.background{border-radius:inherit}.outline{border-color:var(--md-checkbox-outline-color, var(--md-sys-color-on-surface-variant, #49454f));border-style:solid;border-width:var(--md-checkbox-outline-width, 2px);box-sizing:border-box}.background{background-color:var(--md-checkbox-selected-container-color, var(--md-sys-color-primary, #6750a4))}.background,.icon{opacity:0;transition-duration:150ms,50ms;transition-property:transform,opacity;transition-timing-function:cubic-bezier(0.3, 0, 0.8, 0.15),linear;transform:scale(0.6)}:where(.selected) :is(.background,.icon){opacity:1;transition-duration:350ms,50ms;transition-timing-function:cubic-bezier(0.05, 0.7, 0.1, 1),linear;transform:scale(1)}md-ripple{border-radius:var(--md-checkbox-state-layer-shape, var(--md-sys-shape-corner-full, 9999px));height:var(--md-checkbox-state-layer-size, 40px);inset:unset;width:var(--md-checkbox-state-layer-size, 40px);--md-ripple-hover-color: var(--md-checkbox-hover-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--md-ripple-hover-opacity: var(--md-checkbox-hover-state-layer-opacity, 0.08);--md-ripple-pressed-color: var(--md-checkbox-pressed-state-layer-color, var(--md-sys-color-primary, #6750a4));--md-ripple-pressed-opacity: var(--md-checkbox-pressed-state-layer-opacity, 0.12)}.selected md-ripple{--md-ripple-hover-color: var(--md-checkbox-selected-hover-state-layer-color, var(--md-sys-color-primary, #6750a4));--md-ripple-hover-opacity: var(--md-checkbox-selected-hover-state-layer-opacity, 0.08);--md-ripple-pressed-color: var(--md-checkbox-selected-pressed-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--md-ripple-pressed-opacity: var(--md-checkbox-selected-pressed-state-layer-opacity, 0.12)}.icon{fill:var(--md-checkbox-selected-icon-color, var(--md-sys-color-on-primary, #fff));height:var(--md-checkbox-icon-size, 18px);width:var(--md-checkbox-icon-size, 18px)}.mark.short{height:2px;transition-property:transform,height;width:2px}.mark.long{height:2px;transition-property:transform,width;width:10px}.mark{animation-duration:150ms;animation-timing-function:cubic-bezier(0.3, 0, 0.8, 0.15);transition-duration:150ms;transition-timing-function:cubic-bezier(0.3, 0, 0.8, 0.15)}.selected .mark{animation-duration:350ms;animation-timing-function:cubic-bezier(0.05, 0.7, 0.1, 1);transition-duration:350ms;transition-timing-function:cubic-bezier(0.05, 0.7, 0.1, 1)}.checked .mark,.prev-checked.unselected .mark{transform:scaleY(-1) translate(7px, -14px) rotate(45deg)}.checked .mark.short,.prev-checked.unselected .mark.short{height:5.6568542495px}.checked .mark.long,.prev-checked.unselected .mark.long{width:11.313708499px}.indeterminate .mark,.prev-indeterminate.unselected .mark{transform:scaleY(-1) translate(4px, -10px) rotate(0deg)}.prev-unselected .mark{transition-property:none}.prev-unselected.checked .mark.long{animation-name:prev-unselected-to-checked}@keyframes prev-unselected-to-checked{from{width:0}}:where(:hover) .outline{border-color:var(--md-checkbox-hover-outline-color, var(--md-sys-color-on-surface, #1d1b20));border-width:var(--md-checkbox-hover-outline-width, 2px)}:where(:hover) .background{background:var(--md-checkbox-selected-hover-container-color, var(--md-sys-color-primary, #6750a4))}:where(:hover) .icon{fill:var(--md-checkbox-selected-hover-icon-color, var(--md-sys-color-on-primary, #fff))}:where(:focus-within) .outline{border-color:var(--md-checkbox-focus-outline-color, var(--md-sys-color-on-surface, #1d1b20));border-width:var(--md-checkbox-focus-outline-width, 2px)}:where(:focus-within) .background{background:var(--md-checkbox-selected-focus-container-color, var(--md-sys-color-primary, #6750a4))}:where(:focus-within) .icon{fill:var(--md-checkbox-selected-focus-icon-color, var(--md-sys-color-on-primary, #fff))}:where(:active) .outline{border-color:var(--md-checkbox-pressed-outline-color, var(--md-sys-color-on-surface, #1d1b20));border-width:var(--md-checkbox-pressed-outline-width, 2px)}:where(:active) .background{background:var(--md-checkbox-selected-pressed-container-color, var(--md-sys-color-primary, #6750a4))}:where(:active) .icon{fill:var(--md-checkbox-selected-pressed-icon-color, var(--md-sys-color-on-primary, #fff))}:where(.disabled,.prev-disabled) :is(.background,.icon,.mark){animation-duration:0s;transition-duration:0s}:where(.disabled) .outline{border-color:var(--md-checkbox-disabled-outline-color, var(--md-sys-color-on-surface, #1d1b20));border-width:var(--md-checkbox-disabled-outline-width, 2px);opacity:var(--md-checkbox-disabled-container-opacity, 0.38)}:where(.selected.disabled) .outline{visibility:hidden}:where(.selected.disabled) .background{background:var(--md-checkbox-selected-disabled-container-color, var(--md-sys-color-on-surface, #1d1b20));opacity:var(--md-checkbox-selected-disabled-container-opacity, 0.38)}:where(.disabled) .icon{fill:var(--md-checkbox-selected-disabled-icon-color, var(--md-sys-color-surface, #fef7ff))}@media(forced-colors: active){.background{background-color:CanvasText}.selected.disabled .background{background-color:GrayText;opacity:1}.outline{border-color:CanvasText}.disabled .outline{border-color:GrayText;opacity:1}.icon{fill:Canvas}}
`;
//# sourceMappingURL=checkbox-styles.js.map

/***/ }),

/***/ "./node_modules/@material/web/checkbox/internal/checkbox.js":
/*!******************************************************************!*\
  !*** ./node_modules/@material/web/checkbox/internal/checkbox.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Checkbox: () => (/* binding */ Checkbox)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _focus_md_focus_ring_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../focus/md-focus-ring.js */ "./node_modules/@material/web/focus/md-focus-ring.js");
/* harmony import */ var _ripple_ripple_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ripple/ripple.js */ "./node_modules/@material/web/ripple/ripple.js");
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lit/decorators.js */ "./node_modules/lit/decorators.js");
/* harmony import */ var lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lit/directives/class-map.js */ "./node_modules/lit/directives/class-map.js");
/* harmony import */ var _internal_aria_delegate_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../internal/aria/delegate.js */ "./node_modules/@material/web/internal/aria/delegate.js");
/* harmony import */ var _internal_events_form_label_activation_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../internal/events/form-label-activation.js */ "./node_modules/@material/web/internal/events/form-label-activation.js");
/* harmony import */ var _internal_events_redispatch_event_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../internal/events/redispatch-event.js */ "./node_modules/@material/web/internal/events/redispatch-event.js");
/* harmony import */ var _labs_behaviors_constraint_validation_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../labs/behaviors/constraint-validation.js */ "./node_modules/@material/web/labs/behaviors/constraint-validation.js");
/* harmony import */ var _labs_behaviors_element_internals_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../labs/behaviors/element-internals.js */ "./node_modules/@material/web/labs/behaviors/element-internals.js");
/* harmony import */ var _labs_behaviors_form_associated_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../labs/behaviors/form-associated.js */ "./node_modules/@material/web/labs/behaviors/form-associated.js");
/* harmony import */ var _labs_behaviors_validators_checkbox_validator_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../labs/behaviors/validators/checkbox-validator.js */ "./node_modules/@material/web/labs/behaviors/validators/checkbox-validator.js");
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */













// Separate variable needed for closure.
const checkboxBaseClass = (0,_internal_aria_delegate_js__WEBPACK_IMPORTED_MODULE_5__.mixinDelegatesAria)((0,_labs_behaviors_constraint_validation_js__WEBPACK_IMPORTED_MODULE_8__.mixinConstraintValidation)((0,_labs_behaviors_form_associated_js__WEBPACK_IMPORTED_MODULE_10__.mixinFormAssociated)((0,_labs_behaviors_element_internals_js__WEBPACK_IMPORTED_MODULE_9__.mixinElementInternals)(lit__WEBPACK_IMPORTED_MODULE_2__.LitElement))));
/**
 * A checkbox component.
 *
 *
 * @fires change {Event} The native `change` event on
 * [`<input>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)
 * --bubbles
 * @fires input {InputEvent} The native `input` event on
 * [`<input>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)
 * --bubbles --composed
 */
class Checkbox extends checkboxBaseClass {
    constructor() {
        super();
        /**
         * Whether or not the checkbox is selected.
         */
        this.checked = false;
        /**
         * Whether or not the checkbox is indeterminate.
         *
         * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate_state_checkboxes
         */
        this.indeterminate = false;
        /**
         * When true, require the checkbox to be selected when participating in
         * form submission.
         *
         * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#validation
         */
        this.required = false;
        /**
         * The value of the checkbox that is submitted with a form when selected.
         *
         * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#value
         */
        this.value = 'on';
        this.prevChecked = false;
        this.prevDisabled = false;
        this.prevIndeterminate = false;
        if (!lit__WEBPACK_IMPORTED_MODULE_2__.isServer) {
            this.addEventListener('click', (event) => {
                if (!(0,_internal_events_form_label_activation_js__WEBPACK_IMPORTED_MODULE_6__.isActivationClick)(event) || !this.input) {
                    return;
                }
                this.focus();
                (0,_internal_events_form_label_activation_js__WEBPACK_IMPORTED_MODULE_6__.dispatchActivationClick)(this.input);
            });
        }
    }
    update(changed) {
        if (changed.has('checked') ||
            changed.has('disabled') ||
            changed.has('indeterminate')) {
            this.prevChecked = changed.get('checked') ?? this.checked;
            this.prevDisabled = changed.get('disabled') ?? this.disabled;
            this.prevIndeterminate =
                changed.get('indeterminate') ?? this.indeterminate;
        }
        super.update(changed);
    }
    render() {
        const prevNone = !this.prevChecked && !this.prevIndeterminate;
        const prevChecked = this.prevChecked && !this.prevIndeterminate;
        const prevIndeterminate = this.prevIndeterminate;
        const isChecked = this.checked && !this.indeterminate;
        const isIndeterminate = this.indeterminate;
        const containerClasses = (0,lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_4__.classMap)({
            'disabled': this.disabled,
            'selected': isChecked || isIndeterminate,
            'unselected': !isChecked && !isIndeterminate,
            'checked': isChecked,
            'indeterminate': isIndeterminate,
            'prev-unselected': prevNone,
            'prev-checked': prevChecked,
            'prev-indeterminate': prevIndeterminate,
            'prev-disabled': this.prevDisabled,
        });
        // Needed for closure conformance
        const { ariaLabel, ariaInvalid } = this;
        // Note: <input> needs to be rendered before the <svg> for
        // form.reportValidity() to work in Chrome.
        return (0,lit__WEBPACK_IMPORTED_MODULE_2__.html) `
      <div class="container ${containerClasses}">
        <input
          type="checkbox"
          id="input"
          aria-checked=${isIndeterminate ? 'mixed' : lit__WEBPACK_IMPORTED_MODULE_2__.nothing}
          aria-label=${ariaLabel || lit__WEBPACK_IMPORTED_MODULE_2__.nothing}
          aria-invalid=${ariaInvalid || lit__WEBPACK_IMPORTED_MODULE_2__.nothing}
          ?disabled=${this.disabled}
          ?required=${this.required}
          .indeterminate=${this.indeterminate}
          .checked=${this.checked}
          @input=${this.handleInput}
          @change=${this.handleChange} />

        <div class="outline"></div>
        <div class="background"></div>
        <md-focus-ring part="focus-ring" for="input"></md-focus-ring>
        <md-ripple for="input" ?disabled=${this.disabled}></md-ripple>
        <svg class="icon" viewBox="0 0 18 18" aria-hidden="true">
          <rect class="mark short" />
          <rect class="mark long" />
        </svg>
      </div>
    `;
    }
    handleInput(event) {
        const target = event.target;
        this.checked = target.checked;
        this.indeterminate = target.indeterminate;
        // <input> 'input' event bubbles and is composed, don't re-dispatch it.
    }
    handleChange(event) {
        // <input> 'change' event is not composed, re-dispatch it.
        (0,_internal_events_redispatch_event_js__WEBPACK_IMPORTED_MODULE_7__.redispatchEvent)(this, event);
    }
    [_labs_behaviors_form_associated_js__WEBPACK_IMPORTED_MODULE_10__.getFormValue]() {
        if (!this.checked || this.indeterminate) {
            return null;
        }
        return this.value;
    }
    [_labs_behaviors_form_associated_js__WEBPACK_IMPORTED_MODULE_10__.getFormState]() {
        return String(this.checked);
    }
    formResetCallback() {
        // The checked property does not reflect, so the original attribute set by
        // the user is used to determine the default value.
        this.checked = this.hasAttribute('checked');
    }
    formStateRestoreCallback(state) {
        this.checked = state === 'true';
    }
    [_labs_behaviors_constraint_validation_js__WEBPACK_IMPORTED_MODULE_8__.createValidator]() {
        return new _labs_behaviors_validators_checkbox_validator_js__WEBPACK_IMPORTED_MODULE_11__.CheckboxValidator(() => this);
    }
    [_labs_behaviors_constraint_validation_js__WEBPACK_IMPORTED_MODULE_8__.getValidityAnchor]() {
        return this.input;
    }
}
/** @nocollapse */
Checkbox.shadowRootOptions = {
    ...lit__WEBPACK_IMPORTED_MODULE_2__.LitElement.shadowRootOptions,
    delegatesFocus: true,
};
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)({ type: Boolean })
], Checkbox.prototype, "checked", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)({ type: Boolean })
], Checkbox.prototype, "indeterminate", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)({ type: Boolean })
], Checkbox.prototype, "required", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)()
], Checkbox.prototype, "value", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.state)()
], Checkbox.prototype, "prevChecked", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.state)()
], Checkbox.prototype, "prevDisabled", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.state)()
], Checkbox.prototype, "prevIndeterminate", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.query)('input')
], Checkbox.prototype, "input", void 0);
//# sourceMappingURL=checkbox.js.map

/***/ }),

/***/ "./node_modules/@material/web/elevation/elevation.js":
/*!***********************************************************!*\
  !*** ./node_modules/@material/web/elevation/elevation.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MdElevation: () => (/* binding */ MdElevation)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ "./node_modules/lit/decorators.js");
/* harmony import */ var _internal_elevation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/elevation.js */ "./node_modules/@material/web/elevation/internal/elevation.js");
/* harmony import */ var _internal_elevation_styles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/elevation-styles.js */ "./node_modules/@material/web/elevation/internal/elevation-styles.js");
/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */




/**
 * The `<md-elevation>` custom element with default styles.
 *
 * Elevation is the relative distance between two surfaces along the z-axis.
 *
 * @final
 * @suppress {visibility}
 */
let MdElevation = class MdElevation extends _internal_elevation_js__WEBPACK_IMPORTED_MODULE_1__.Elevation {
};
MdElevation.styles = [_internal_elevation_styles_js__WEBPACK_IMPORTED_MODULE_2__.styles];
MdElevation = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.customElement)('md-elevation')
], MdElevation);

//# sourceMappingURL=elevation.js.map

/***/ }),

/***/ "./node_modules/@material/web/elevation/internal/elevation-styles.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@material/web/elevation/internal/elevation-styles.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   styles: () => (/* binding */ styles)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
// Generated stylesheet for ./elevation/internal/elevation-styles.css.

const styles = (0,lit__WEBPACK_IMPORTED_MODULE_0__.css) `:host,.shadow,.shadow::before,.shadow::after{border-radius:inherit;inset:0;position:absolute;transition-duration:inherit;transition-property:inherit;transition-timing-function:inherit}:host{display:flex;pointer-events:none;transition-property:box-shadow,opacity}.shadow::before,.shadow::after{content:"";transition-property:box-shadow,opacity;--_level: var(--md-elevation-level, 0);--_shadow-color: var(--md-elevation-shadow-color, var(--md-sys-color-shadow, #000))}.shadow::before{box-shadow:0px calc(1px*(clamp(0,var(--_level),1) + clamp(0,var(--_level) - 3,1) + 2*clamp(0,var(--_level) - 4,1))) calc(1px*(2*clamp(0,var(--_level),1) + clamp(0,var(--_level) - 2,1) + clamp(0,var(--_level) - 4,1))) 0px var(--_shadow-color);opacity:.3}.shadow::after{box-shadow:0px calc(1px*(clamp(0,var(--_level),1) + clamp(0,var(--_level) - 1,1) + 2*clamp(0,var(--_level) - 2,3))) calc(1px*(3*clamp(0,var(--_level),2) + 2*clamp(0,var(--_level) - 2,3))) calc(1px*(clamp(0,var(--_level),4) + 2*clamp(0,var(--_level) - 4,1))) var(--_shadow-color);opacity:.15}
`;
//# sourceMappingURL=elevation-styles.js.map

/***/ }),

/***/ "./node_modules/@material/web/elevation/internal/elevation.js":
/*!********************************************************************!*\
  !*** ./node_modules/@material/web/elevation/internal/elevation.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Elevation: () => (/* binding */ Elevation)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * A component for elevation.
 */
class Elevation extends lit__WEBPACK_IMPORTED_MODULE_0__.LitElement {
    connectedCallback() {
        super.connectedCallback();
        // Needed for VoiceOver, which will create a "group" if the element is a
        // sibling to other content.
        this.setAttribute('aria-hidden', 'true');
    }
    render() {
        return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html) `<span class="shadow"></span>`;
    }
}
//# sourceMappingURL=elevation.js.map

/***/ }),

/***/ "./node_modules/@material/web/field/filled-field.js":
/*!**********************************************************!*\
  !*** ./node_modules/@material/web/field/filled-field.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MdFilledField: () => (/* binding */ MdFilledField)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ "./node_modules/lit/decorators.js");
/* harmony import */ var _internal_filled_field_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/filled-field.js */ "./node_modules/@material/web/field/internal/filled-field.js");
/* harmony import */ var _internal_filled_styles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/filled-styles.js */ "./node_modules/@material/web/field/internal/filled-styles.js");
/* harmony import */ var _internal_shared_styles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/shared-styles.js */ "./node_modules/@material/web/field/internal/shared-styles.js");
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */





/**
 * TODO(b/228525797): add docs
 * @final
 * @suppress {visibility}
 */
let MdFilledField = class MdFilledField extends _internal_filled_field_js__WEBPACK_IMPORTED_MODULE_1__.FilledField {
};
MdFilledField.styles = [_internal_shared_styles_js__WEBPACK_IMPORTED_MODULE_3__.styles, _internal_filled_styles_js__WEBPACK_IMPORTED_MODULE_2__.styles];
MdFilledField = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.customElement)('md-filled-field')
], MdFilledField);

//# sourceMappingURL=filled-field.js.map

/***/ }),

/***/ "./node_modules/@material/web/field/internal/field.js":
/*!************************************************************!*\
  !*** ./node_modules/@material/web/field/internal/field.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Field: () => (/* binding */ Field)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit/decorators.js */ "./node_modules/lit/decorators.js");
/* harmony import */ var lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lit/directives/class-map.js */ "./node_modules/lit/directives/class-map.js");
/* harmony import */ var _internal_motion_animation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../internal/motion/animation.js */ "./node_modules/@material/web/internal/motion/animation.js");
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */





/**
 * A field component.
 */
class Field extends lit__WEBPACK_IMPORTED_MODULE_0__.LitElement {
    constructor() {
        super(...arguments);
        this.disabled = false;
        this.error = false;
        this.focused = false;
        this.label = '';
        this.noAsterisk = false;
        this.populated = false;
        this.required = false;
        this.resizable = false;
        this.supportingText = '';
        this.errorText = '';
        this.count = -1;
        this.max = -1;
        /**
         * Whether or not the field has leading content.
         */
        this.hasStart = false;
        /**
         * Whether or not the field has trailing content.
         */
        this.hasEnd = false;
        this.isAnimating = false;
        /**
         * When set to true, the error text's `role="alert"` will be removed, then
         * re-added after an animation frame. This will re-announce an error message
         * to screen readers.
         */
        this.refreshErrorAlert = false;
        this.disableTransitions = false;
    }
    get counterText() {
        // Count and max are typed as number, but can be set to null when Lit removes
        // their attributes. These getters coerce back to a number for calculations.
        const countAsNumber = this.count ?? -1;
        const maxAsNumber = this.max ?? -1;
        // Counter does not show if count is negative, or max is negative or 0.
        if (countAsNumber < 0 || maxAsNumber <= 0) {
            return '';
        }
        return `${countAsNumber} / ${maxAsNumber}`;
    }
    get supportingOrErrorText() {
        return this.error && this.errorText ? this.errorText : this.supportingText;
    }
    /**
     * Re-announces the field's error supporting text to screen readers.
     *
     * Error text announces to screen readers anytime it is visible and changes.
     * Use the method to re-announce the message when the text has not changed,
     * but announcement is still needed (such as for `reportValidity()`).
     */
    reannounceError() {
        this.refreshErrorAlert = true;
    }
    update(props) {
        // Client-side property updates
        const isDisabledChanging = props.has('disabled') && props.get('disabled') !== undefined;
        if (isDisabledChanging) {
            this.disableTransitions = true;
        }
        // When disabling, remove focus styles if focused.
        if (this.disabled && this.focused) {
            props.set('focused', true);
            this.focused = false;
        }
        // Animate if focused or populated change.
        this.animateLabelIfNeeded({
            wasFocused: props.get('focused'),
            wasPopulated: props.get('populated'),
        });
        super.update(props);
    }
    render() {
        const floatingLabel = this.renderLabel(/*isFloating*/ true);
        const restingLabel = this.renderLabel(/*isFloating*/ false);
        const outline = this.renderOutline?.(floatingLabel);
        const classes = {
            'disabled': this.disabled,
            'disable-transitions': this.disableTransitions,
            'error': this.error && !this.disabled,
            'focused': this.focused,
            'with-start': this.hasStart,
            'with-end': this.hasEnd,
            'populated': this.populated,
            'resizable': this.resizable,
            'required': this.required,
            'no-label': !this.label,
        };
        return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html) `
      <div class="field ${(0,lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_2__.classMap)(classes)}">
        <div class="container-overflow">
          ${this.renderBackground?.()}
          <slot name="container"></slot>
          ${this.renderStateLayer?.()} ${this.renderIndicator?.()} ${outline}
          <div class="container">
            <div class="start">
              <slot name="start"></slot>
            </div>
            <div class="middle">
              <div class="label-wrapper">
                ${restingLabel} ${outline ? lit__WEBPACK_IMPORTED_MODULE_0__.nothing : floatingLabel}
              </div>
              <div class="content">
                <slot></slot>
              </div>
            </div>
            <div class="end">
              <slot name="end"></slot>
            </div>
          </div>
        </div>
        ${this.renderSupportingText()}
      </div>
    `;
    }
    updated(changed) {
        if (changed.has('supportingText') ||
            changed.has('errorText') ||
            changed.has('count') ||
            changed.has('max')) {
            this.updateSlottedAriaDescribedBy();
        }
        if (this.refreshErrorAlert) {
            // The past render cycle removed the role="alert" from the error message.
            // Re-add it after an animation frame to re-announce the error.
            requestAnimationFrame(() => {
                this.refreshErrorAlert = false;
            });
        }
        if (this.disableTransitions) {
            requestAnimationFrame(() => {
                this.disableTransitions = false;
            });
        }
    }
    renderSupportingText() {
        const { supportingOrErrorText, counterText } = this;
        if (!supportingOrErrorText && !counterText) {
            return lit__WEBPACK_IMPORTED_MODULE_0__.nothing;
        }
        // Always render the supporting text span so that our `space-around`
        // container puts the counter at the end.
        const start = (0,lit__WEBPACK_IMPORTED_MODULE_0__.html) `<span>${supportingOrErrorText}</span>`;
        // Conditionally render counter so we don't render the extra `gap`.
        // TODO(b/244473435): add aria-label and announcements
        const end = counterText
            ? (0,lit__WEBPACK_IMPORTED_MODULE_0__.html) `<span class="counter">${counterText}</span>`
            : lit__WEBPACK_IMPORTED_MODULE_0__.nothing;
        // Announce if there is an error and error text visible.
        // If refreshErrorAlert is true, do not announce. This will remove the
        // role="alert" attribute. Another render cycle will happen after an
        // animation frame to re-add the role.
        const shouldErrorAnnounce = this.error && this.errorText && !this.refreshErrorAlert;
        const role = shouldErrorAnnounce ? 'alert' : lit__WEBPACK_IMPORTED_MODULE_0__.nothing;
        return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html) `
      <div class="supporting-text" role=${role}>${start}${end}</div>
      <slot
        name="aria-describedby"
        @slotchange=${this.updateSlottedAriaDescribedBy}></slot>
    `;
    }
    updateSlottedAriaDescribedBy() {
        for (const element of this.slottedAriaDescribedBy) {
            (0,lit__WEBPACK_IMPORTED_MODULE_0__.render)((0,lit__WEBPACK_IMPORTED_MODULE_0__.html) `${this.supportingOrErrorText} ${this.counterText}`, element);
            element.setAttribute('hidden', '');
        }
    }
    renderLabel(isFloating) {
        if (!this.label) {
            return lit__WEBPACK_IMPORTED_MODULE_0__.nothing;
        }
        let visible;
        if (isFloating) {
            // Floating label is visible when focused/populated or when animating.
            visible = this.focused || this.populated || this.isAnimating;
        }
        else {
            // Resting label is visible when unfocused. It is never visible while
            // animating.
            visible = !this.focused && !this.populated && !this.isAnimating;
        }
        const classes = {
            'hidden': !visible,
            'floating': isFloating,
            'resting': !isFloating,
        };
        // Add '*' if a label is present and the field is required
        const labelText = `${this.label}${this.required && !this.noAsterisk ? '*' : ''}`;
        return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html) `
      <span class="label ${(0,lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_2__.classMap)(classes)}" aria-hidden=${!visible}
        >${labelText}</span
      >
    `;
    }
    animateLabelIfNeeded({ wasFocused, wasPopulated, }) {
        if (!this.label) {
            return;
        }
        wasFocused ??= this.focused;
        wasPopulated ??= this.populated;
        const wasFloating = wasFocused || wasPopulated;
        const shouldBeFloating = this.focused || this.populated;
        if (wasFloating === shouldBeFloating) {
            return;
        }
        this.isAnimating = true;
        this.labelAnimation?.cancel();
        // Only one label is visible at a time for clearer text rendering.
        // The floating label is visible and used during animation. At the end of
        // the animation, it will either remain visible (if floating) or hide and
        // the resting label will be shown.
        //
        // We don't use forward filling because if the dimensions of the text field
        // change (leading icon removed, density changes, etc), then the animation
        // will be inaccurate.
        //
        // Re-calculating the animation each time will prevent any visual glitches
        // from appearing.
        // TODO(b/241113345): use animation tokens
        this.labelAnimation = this.floatingLabelEl?.animate(this.getLabelKeyframes(), { duration: 150, easing: _internal_motion_animation_js__WEBPACK_IMPORTED_MODULE_3__.EASING.STANDARD });
        this.labelAnimation?.addEventListener('finish', () => {
            // At the end of the animation, update the visible label.
            this.isAnimating = false;
        });
    }
    getLabelKeyframes() {
        const { floatingLabelEl, restingLabelEl } = this;
        if (!floatingLabelEl || !restingLabelEl) {
            return [];
        }
        const { x: floatingX, y: floatingY, height: floatingHeight, } = floatingLabelEl.getBoundingClientRect();
        const { x: restingX, y: restingY, height: restingHeight, } = restingLabelEl.getBoundingClientRect();
        const floatingScrollWidth = floatingLabelEl.scrollWidth;
        const restingScrollWidth = restingLabelEl.scrollWidth;
        // Scale by width ratio instead of font size since letter-spacing will scale
        // incorrectly. Using the width we can better approximate the adjusted
        // scale and compensate for tracking and overflow.
        // (use scrollWidth instead of width to account for clipped labels)
        const scale = restingScrollWidth / floatingScrollWidth;
        const xDelta = restingX - floatingX;
        // The line-height of the resting and floating label are different. When
        // we move the floating label down to the resting label's position, it won't
        // exactly match because of this. We need to adjust by half of what the
        // final scaled floating label's height will be.
        const yDelta = restingY -
            floatingY +
            Math.round((restingHeight - floatingHeight * scale) / 2);
        // Create the two transforms: floating to resting (using the calculations
        // above), and resting to floating (re-setting the transform to initial
        // values).
        const restTransform = `translateX(${xDelta}px) translateY(${yDelta}px) scale(${scale})`;
        const floatTransform = `translateX(0) translateY(0) scale(1)`;
        // Constrain the floating labels width to a scaled percentage of the
        // resting label's width. This will prevent long clipped labels from
        // overflowing the container.
        const restingClientWidth = restingLabelEl.clientWidth;
        const isRestingClipped = restingScrollWidth > restingClientWidth;
        const width = isRestingClipped ? `${restingClientWidth / scale}px` : '';
        if (this.focused || this.populated) {
            return [
                { transform: restTransform, width },
                { transform: floatTransform, width },
            ];
        }
        return [
            { transform: floatTransform, width },
            { transform: restTransform, width },
        ];
    }
    getSurfacePositionClientRect() {
        return this.containerEl.getBoundingClientRect();
    }
}
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: Boolean })
], Field.prototype, "disabled", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: Boolean })
], Field.prototype, "error", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: Boolean })
], Field.prototype, "focused", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)()
], Field.prototype, "label", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: Boolean, attribute: 'no-asterisk' })
], Field.prototype, "noAsterisk", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: Boolean })
], Field.prototype, "populated", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: Boolean })
], Field.prototype, "required", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: Boolean })
], Field.prototype, "resizable", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ attribute: 'supporting-text' })
], Field.prototype, "supportingText", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ attribute: 'error-text' })
], Field.prototype, "errorText", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: Number })
], Field.prototype, "count", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: Number })
], Field.prototype, "max", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: Boolean, attribute: 'has-start' })
], Field.prototype, "hasStart", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: Boolean, attribute: 'has-end' })
], Field.prototype, "hasEnd", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.queryAssignedElements)({ slot: 'aria-describedby' })
], Field.prototype, "slottedAriaDescribedBy", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.state)()
], Field.prototype, "isAnimating", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.state)()
], Field.prototype, "refreshErrorAlert", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.state)()
], Field.prototype, "disableTransitions", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.query)('.label.floating')
], Field.prototype, "floatingLabelEl", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.query)('.label.resting')
], Field.prototype, "restingLabelEl", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.query)('.container')
], Field.prototype, "containerEl", void 0);
//# sourceMappingURL=field.js.map

/***/ }),

/***/ "./node_modules/@material/web/field/internal/filled-field.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@material/web/field/internal/filled-field.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FilledField: () => (/* binding */ FilledField)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/* harmony import */ var _field_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./field.js */ "./node_modules/@material/web/field/internal/field.js");
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */


/**
 * A filled field component.
 */
class FilledField extends _field_js__WEBPACK_IMPORTED_MODULE_1__.Field {
    renderBackground() {
        return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html) ` <div class="background"></div> `;
    }
    renderStateLayer() {
        return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html) ` <div class="state-layer"></div> `;
    }
    renderIndicator() {
        return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html) `<div class="active-indicator"></div>`;
    }
}
//# sourceMappingURL=filled-field.js.map

/***/ }),

/***/ "./node_modules/@material/web/field/internal/filled-styles.js":
/*!********************************************************************!*\
  !*** ./node_modules/@material/web/field/internal/filled-styles.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   styles: () => (/* binding */ styles)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
// Generated stylesheet for ./field/internal/filled-styles.css.

const styles = (0,lit__WEBPACK_IMPORTED_MODULE_0__.css) `@layer styles{:host{--_active-indicator-color: var(--md-filled-field-active-indicator-color, var(--md-sys-color-on-surface-variant, #49454f));--_active-indicator-height: var(--md-filled-field-active-indicator-height, 1px);--_bottom-space: var(--md-filled-field-bottom-space, 16px);--_container-color: var(--md-filled-field-container-color, var(--md-sys-color-surface-container-highest, #e6e0e9));--_content-color: var(--md-filled-field-content-color, var(--md-sys-color-on-surface, #1d1b20));--_content-font: var(--md-filled-field-content-font, var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto)));--_content-line-height: var(--md-filled-field-content-line-height, var(--md-sys-typescale-body-large-line-height, 1.5rem));--_content-size: var(--md-filled-field-content-size, var(--md-sys-typescale-body-large-size, 1rem));--_content-space: var(--md-filled-field-content-space, 16px);--_content-weight: var(--md-filled-field-content-weight, var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400)));--_disabled-active-indicator-color: var(--md-filled-field-disabled-active-indicator-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-active-indicator-height: var(--md-filled-field-disabled-active-indicator-height, 1px);--_disabled-active-indicator-opacity: var(--md-filled-field-disabled-active-indicator-opacity, 0.38);--_disabled-container-color: var(--md-filled-field-disabled-container-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-container-opacity: var(--md-filled-field-disabled-container-opacity, 0.04);--_disabled-content-color: var(--md-filled-field-disabled-content-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-content-opacity: var(--md-filled-field-disabled-content-opacity, 0.38);--_disabled-label-text-color: var(--md-filled-field-disabled-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-label-text-opacity: var(--md-filled-field-disabled-label-text-opacity, 0.38);--_disabled-leading-content-color: var(--md-filled-field-disabled-leading-content-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-leading-content-opacity: var(--md-filled-field-disabled-leading-content-opacity, 0.38);--_disabled-supporting-text-color: var(--md-filled-field-disabled-supporting-text-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-supporting-text-opacity: var(--md-filled-field-disabled-supporting-text-opacity, 0.38);--_disabled-trailing-content-color: var(--md-filled-field-disabled-trailing-content-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-trailing-content-opacity: var(--md-filled-field-disabled-trailing-content-opacity, 0.38);--_error-active-indicator-color: var(--md-filled-field-error-active-indicator-color, var(--md-sys-color-error, #b3261e));--_error-content-color: var(--md-filled-field-error-content-color, var(--md-sys-color-on-surface, #1d1b20));--_error-focus-active-indicator-color: var(--md-filled-field-error-focus-active-indicator-color, var(--md-sys-color-error, #b3261e));--_error-focus-content-color: var(--md-filled-field-error-focus-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_error-focus-label-text-color: var(--md-filled-field-error-focus-label-text-color, var(--md-sys-color-error, #b3261e));--_error-focus-leading-content-color: var(--md-filled-field-error-focus-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_error-focus-supporting-text-color: var(--md-filled-field-error-focus-supporting-text-color, var(--md-sys-color-error, #b3261e));--_error-focus-trailing-content-color: var(--md-filled-field-error-focus-trailing-content-color, var(--md-sys-color-error, #b3261e));--_error-hover-active-indicator-color: var(--md-filled-field-error-hover-active-indicator-color, var(--md-sys-color-on-error-container, #410e0b));--_error-hover-content-color: var(--md-filled-field-error-hover-content-color, var(--md-sys-color-on-surface, #1d1b20));--_error-hover-label-text-color: var(--md-filled-field-error-hover-label-text-color, var(--md-sys-color-on-error-container, #410e0b));--_error-hover-leading-content-color: var(--md-filled-field-error-hover-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_error-hover-state-layer-color: var(--md-filled-field-error-hover-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--_error-hover-state-layer-opacity: var(--md-filled-field-error-hover-state-layer-opacity, 0.08);--_error-hover-supporting-text-color: var(--md-filled-field-error-hover-supporting-text-color, var(--md-sys-color-error, #b3261e));--_error-hover-trailing-content-color: var(--md-filled-field-error-hover-trailing-content-color, var(--md-sys-color-on-error-container, #410e0b));--_error-label-text-color: var(--md-filled-field-error-label-text-color, var(--md-sys-color-error, #b3261e));--_error-leading-content-color: var(--md-filled-field-error-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_error-supporting-text-color: var(--md-filled-field-error-supporting-text-color, var(--md-sys-color-error, #b3261e));--_error-trailing-content-color: var(--md-filled-field-error-trailing-content-color, var(--md-sys-color-error, #b3261e));--_focus-active-indicator-color: var(--md-filled-field-focus-active-indicator-color, var(--md-sys-color-primary, #6750a4));--_focus-active-indicator-height: var(--md-filled-field-focus-active-indicator-height, 3px);--_focus-content-color: var(--md-filled-field-focus-content-color, var(--md-sys-color-on-surface, #1d1b20));--_focus-label-text-color: var(--md-filled-field-focus-label-text-color, var(--md-sys-color-primary, #6750a4));--_focus-leading-content-color: var(--md-filled-field-focus-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_focus-supporting-text-color: var(--md-filled-field-focus-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_focus-trailing-content-color: var(--md-filled-field-focus-trailing-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_hover-active-indicator-color: var(--md-filled-field-hover-active-indicator-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-active-indicator-height: var(--md-filled-field-hover-active-indicator-height, 1px);--_hover-content-color: var(--md-filled-field-hover-content-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-label-text-color: var(--md-filled-field-hover-label-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_hover-leading-content-color: var(--md-filled-field-hover-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_hover-state-layer-color: var(--md-filled-field-hover-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-state-layer-opacity: var(--md-filled-field-hover-state-layer-opacity, 0.08);--_hover-supporting-text-color: var(--md-filled-field-hover-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_hover-trailing-content-color: var(--md-filled-field-hover-trailing-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_label-text-color: var(--md-filled-field-label-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_label-text-font: var(--md-filled-field-label-text-font, var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto)));--_label-text-line-height: var(--md-filled-field-label-text-line-height, var(--md-sys-typescale-body-large-line-height, 1.5rem));--_label-text-populated-line-height: var(--md-filled-field-label-text-populated-line-height, var(--md-sys-typescale-body-small-line-height, 1rem));--_label-text-populated-size: var(--md-filled-field-label-text-populated-size, var(--md-sys-typescale-body-small-size, 0.75rem));--_label-text-size: var(--md-filled-field-label-text-size, var(--md-sys-typescale-body-large-size, 1rem));--_label-text-weight: var(--md-filled-field-label-text-weight, var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400)));--_leading-content-color: var(--md-filled-field-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_leading-space: var(--md-filled-field-leading-space, 16px);--_supporting-text-color: var(--md-filled-field-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_supporting-text-font: var(--md-filled-field-supporting-text-font, var(--md-sys-typescale-body-small-font, var(--md-ref-typeface-plain, Roboto)));--_supporting-text-leading-space: var(--md-filled-field-supporting-text-leading-space, 16px);--_supporting-text-line-height: var(--md-filled-field-supporting-text-line-height, var(--md-sys-typescale-body-small-line-height, 1rem));--_supporting-text-size: var(--md-filled-field-supporting-text-size, var(--md-sys-typescale-body-small-size, 0.75rem));--_supporting-text-top-space: var(--md-filled-field-supporting-text-top-space, 4px);--_supporting-text-trailing-space: var(--md-filled-field-supporting-text-trailing-space, 16px);--_supporting-text-weight: var(--md-filled-field-supporting-text-weight, var(--md-sys-typescale-body-small-weight, var(--md-ref-typeface-weight-regular, 400)));--_top-space: var(--md-filled-field-top-space, 16px);--_trailing-content-color: var(--md-filled-field-trailing-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_trailing-space: var(--md-filled-field-trailing-space, 16px);--_with-label-bottom-space: var(--md-filled-field-with-label-bottom-space, 8px);--_with-label-top-space: var(--md-filled-field-with-label-top-space, 8px);--_with-leading-content-leading-space: var(--md-filled-field-with-leading-content-leading-space, 12px);--_with-trailing-content-trailing-space: var(--md-filled-field-with-trailing-content-trailing-space, 12px);--_container-shape-start-start: var(--md-filled-field-container-shape-start-start, var(--md-filled-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_container-shape-start-end: var(--md-filled-field-container-shape-start-end, var(--md-filled-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_container-shape-end-end: var(--md-filled-field-container-shape-end-end, var(--md-filled-field-container-shape, var(--md-sys-shape-corner-none, 0px)));--_container-shape-end-start: var(--md-filled-field-container-shape-end-start, var(--md-filled-field-container-shape, var(--md-sys-shape-corner-none, 0px)))}.background,.state-layer{border-radius:inherit;inset:0;pointer-events:none;position:absolute}.background{background:var(--_container-color)}.state-layer{visibility:hidden}.field:not(.disabled):hover .state-layer{visibility:visible}.label.floating{position:absolute;top:var(--_with-label-top-space)}.field:not(.with-start) .label-wrapper{margin-inline-start:var(--_leading-space)}.field:not(.with-end) .label-wrapper{margin-inline-end:var(--_trailing-space)}.active-indicator{inset:auto 0 0 0;pointer-events:none;position:absolute;width:100%;z-index:1}.active-indicator::before,.active-indicator::after{border-bottom:var(--_active-indicator-height) solid var(--_active-indicator-color);inset:auto 0 0 0;content:"";position:absolute;width:100%}.active-indicator::after{opacity:0;transition:opacity 150ms cubic-bezier(0.2, 0, 0, 1)}.focused .active-indicator::after{opacity:1}.field:not(.with-start) .content ::slotted(*){padding-inline-start:var(--_leading-space)}.field:not(.with-end) .content ::slotted(*){padding-inline-end:var(--_trailing-space)}.field:not(.no-label) .content ::slotted(:not(textarea)){padding-bottom:var(--_with-label-bottom-space);padding-top:calc(var(--_with-label-top-space) + var(--_label-text-populated-line-height))}.field:not(.no-label) .content ::slotted(textarea){margin-bottom:var(--_with-label-bottom-space);margin-top:calc(var(--_with-label-top-space) + var(--_label-text-populated-line-height))}:hover .active-indicator::before{border-bottom-color:var(--_hover-active-indicator-color);border-bottom-width:var(--_hover-active-indicator-height)}.active-indicator::after{border-bottom-color:var(--_focus-active-indicator-color);border-bottom-width:var(--_focus-active-indicator-height)}:hover .state-layer{background:var(--_hover-state-layer-color);opacity:var(--_hover-state-layer-opacity)}.disabled .active-indicator::before{border-bottom-color:var(--_disabled-active-indicator-color);border-bottom-width:var(--_disabled-active-indicator-height);opacity:var(--_disabled-active-indicator-opacity)}.disabled .background{background:var(--_disabled-container-color);opacity:var(--_disabled-container-opacity)}.error .active-indicator::before{border-bottom-color:var(--_error-active-indicator-color)}.error:hover .active-indicator::before{border-bottom-color:var(--_error-hover-active-indicator-color)}.error:hover .state-layer{background:var(--_error-hover-state-layer-color);opacity:var(--_error-hover-state-layer-opacity)}.error .active-indicator::after{border-bottom-color:var(--_error-focus-active-indicator-color)}.resizable .container{bottom:var(--_focus-active-indicator-height);clip-path:inset(var(--_focus-active-indicator-height) 0 0 0)}.resizable .container>*{top:var(--_focus-active-indicator-height)}}@layer hcm{@media(forced-colors: active){.disabled .active-indicator::before{border-color:GrayText;opacity:1}}}
`;
//# sourceMappingURL=filled-styles.js.map

/***/ }),

/***/ "./node_modules/@material/web/field/internal/outlined-field.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@material/web/field/internal/outlined-field.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OutlinedField: () => (/* binding */ OutlinedField)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/* harmony import */ var _field_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./field.js */ "./node_modules/@material/web/field/internal/field.js");
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */


/**
 * An outlined field component.
 */
class OutlinedField extends _field_js__WEBPACK_IMPORTED_MODULE_1__.Field {
    renderOutline(floatingLabel) {
        return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html) `
      <div class="outline">
        <div class="outline-start"></div>
        <div class="outline-notch">
          <div class="outline-panel-inactive"></div>
          <div class="outline-panel-active"></div>
          <div class="outline-label">${floatingLabel}</div>
        </div>
        <div class="outline-end"></div>
      </div>
    `;
    }
}
//# sourceMappingURL=outlined-field.js.map

/***/ }),

/***/ "./node_modules/@material/web/field/internal/outlined-styles.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@material/web/field/internal/outlined-styles.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   styles: () => (/* binding */ styles)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
// Generated stylesheet for ./field/internal/outlined-styles.css.

const styles = (0,lit__WEBPACK_IMPORTED_MODULE_0__.css) `@layer styles{:host{--_bottom-space: var(--md-outlined-field-bottom-space, 16px);--_content-color: var(--md-outlined-field-content-color, var(--md-sys-color-on-surface, #1d1b20));--_content-font: var(--md-outlined-field-content-font, var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto)));--_content-line-height: var(--md-outlined-field-content-line-height, var(--md-sys-typescale-body-large-line-height, 1.5rem));--_content-size: var(--md-outlined-field-content-size, var(--md-sys-typescale-body-large-size, 1rem));--_content-space: var(--md-outlined-field-content-space, 16px);--_content-weight: var(--md-outlined-field-content-weight, var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400)));--_disabled-content-color: var(--md-outlined-field-disabled-content-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-content-opacity: var(--md-outlined-field-disabled-content-opacity, 0.38);--_disabled-label-text-color: var(--md-outlined-field-disabled-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-label-text-opacity: var(--md-outlined-field-disabled-label-text-opacity, 0.38);--_disabled-leading-content-color: var(--md-outlined-field-disabled-leading-content-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-leading-content-opacity: var(--md-outlined-field-disabled-leading-content-opacity, 0.38);--_disabled-outline-color: var(--md-outlined-field-disabled-outline-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-outline-opacity: var(--md-outlined-field-disabled-outline-opacity, 0.12);--_disabled-outline-width: var(--md-outlined-field-disabled-outline-width, 1px);--_disabled-supporting-text-color: var(--md-outlined-field-disabled-supporting-text-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-supporting-text-opacity: var(--md-outlined-field-disabled-supporting-text-opacity, 0.38);--_disabled-trailing-content-color: var(--md-outlined-field-disabled-trailing-content-color, var(--md-sys-color-on-surface, #1d1b20));--_disabled-trailing-content-opacity: var(--md-outlined-field-disabled-trailing-content-opacity, 0.38);--_error-content-color: var(--md-outlined-field-error-content-color, var(--md-sys-color-on-surface, #1d1b20));--_error-focus-content-color: var(--md-outlined-field-error-focus-content-color, var(--md-sys-color-on-surface, #1d1b20));--_error-focus-label-text-color: var(--md-outlined-field-error-focus-label-text-color, var(--md-sys-color-error, #b3261e));--_error-focus-leading-content-color: var(--md-outlined-field-error-focus-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_error-focus-outline-color: var(--md-outlined-field-error-focus-outline-color, var(--md-sys-color-error, #b3261e));--_error-focus-supporting-text-color: var(--md-outlined-field-error-focus-supporting-text-color, var(--md-sys-color-error, #b3261e));--_error-focus-trailing-content-color: var(--md-outlined-field-error-focus-trailing-content-color, var(--md-sys-color-error, #b3261e));--_error-hover-content-color: var(--md-outlined-field-error-hover-content-color, var(--md-sys-color-on-surface, #1d1b20));--_error-hover-label-text-color: var(--md-outlined-field-error-hover-label-text-color, var(--md-sys-color-on-error-container, #410e0b));--_error-hover-leading-content-color: var(--md-outlined-field-error-hover-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_error-hover-outline-color: var(--md-outlined-field-error-hover-outline-color, var(--md-sys-color-on-error-container, #410e0b));--_error-hover-supporting-text-color: var(--md-outlined-field-error-hover-supporting-text-color, var(--md-sys-color-error, #b3261e));--_error-hover-trailing-content-color: var(--md-outlined-field-error-hover-trailing-content-color, var(--md-sys-color-on-error-container, #410e0b));--_error-label-text-color: var(--md-outlined-field-error-label-text-color, var(--md-sys-color-error, #b3261e));--_error-leading-content-color: var(--md-outlined-field-error-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_error-outline-color: var(--md-outlined-field-error-outline-color, var(--md-sys-color-error, #b3261e));--_error-supporting-text-color: var(--md-outlined-field-error-supporting-text-color, var(--md-sys-color-error, #b3261e));--_error-trailing-content-color: var(--md-outlined-field-error-trailing-content-color, var(--md-sys-color-error, #b3261e));--_focus-content-color: var(--md-outlined-field-focus-content-color, var(--md-sys-color-on-surface, #1d1b20));--_focus-label-text-color: var(--md-outlined-field-focus-label-text-color, var(--md-sys-color-primary, #6750a4));--_focus-leading-content-color: var(--md-outlined-field-focus-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_focus-outline-color: var(--md-outlined-field-focus-outline-color, var(--md-sys-color-primary, #6750a4));--_focus-outline-width: var(--md-outlined-field-focus-outline-width, 3px);--_focus-supporting-text-color: var(--md-outlined-field-focus-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_focus-trailing-content-color: var(--md-outlined-field-focus-trailing-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_hover-content-color: var(--md-outlined-field-hover-content-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-label-text-color: var(--md-outlined-field-hover-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-leading-content-color: var(--md-outlined-field-hover-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_hover-outline-color: var(--md-outlined-field-hover-outline-color, var(--md-sys-color-on-surface, #1d1b20));--_hover-outline-width: var(--md-outlined-field-hover-outline-width, 1px);--_hover-supporting-text-color: var(--md-outlined-field-hover-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_hover-trailing-content-color: var(--md-outlined-field-hover-trailing-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_label-text-color: var(--md-outlined-field-label-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_label-text-font: var(--md-outlined-field-label-text-font, var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto)));--_label-text-line-height: var(--md-outlined-field-label-text-line-height, var(--md-sys-typescale-body-large-line-height, 1.5rem));--_label-text-padding-bottom: var(--md-outlined-field-label-text-padding-bottom, 8px);--_label-text-populated-line-height: var(--md-outlined-field-label-text-populated-line-height, var(--md-sys-typescale-body-small-line-height, 1rem));--_label-text-populated-size: var(--md-outlined-field-label-text-populated-size, var(--md-sys-typescale-body-small-size, 0.75rem));--_label-text-size: var(--md-outlined-field-label-text-size, var(--md-sys-typescale-body-large-size, 1rem));--_label-text-weight: var(--md-outlined-field-label-text-weight, var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400)));--_leading-content-color: var(--md-outlined-field-leading-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_leading-space: var(--md-outlined-field-leading-space, 16px);--_outline-color: var(--md-outlined-field-outline-color, var(--md-sys-color-outline, #79747e));--_outline-label-padding: var(--md-outlined-field-outline-label-padding, 4px);--_outline-width: var(--md-outlined-field-outline-width, 1px);--_supporting-text-color: var(--md-outlined-field-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_supporting-text-font: var(--md-outlined-field-supporting-text-font, var(--md-sys-typescale-body-small-font, var(--md-ref-typeface-plain, Roboto)));--_supporting-text-leading-space: var(--md-outlined-field-supporting-text-leading-space, 16px);--_supporting-text-line-height: var(--md-outlined-field-supporting-text-line-height, var(--md-sys-typescale-body-small-line-height, 1rem));--_supporting-text-size: var(--md-outlined-field-supporting-text-size, var(--md-sys-typescale-body-small-size, 0.75rem));--_supporting-text-top-space: var(--md-outlined-field-supporting-text-top-space, 4px);--_supporting-text-trailing-space: var(--md-outlined-field-supporting-text-trailing-space, 16px);--_supporting-text-weight: var(--md-outlined-field-supporting-text-weight, var(--md-sys-typescale-body-small-weight, var(--md-ref-typeface-weight-regular, 400)));--_top-space: var(--md-outlined-field-top-space, 16px);--_trailing-content-color: var(--md-outlined-field-trailing-content-color, var(--md-sys-color-on-surface-variant, #49454f));--_trailing-space: var(--md-outlined-field-trailing-space, 16px);--_with-leading-content-leading-space: var(--md-outlined-field-with-leading-content-leading-space, 12px);--_with-trailing-content-trailing-space: var(--md-outlined-field-with-trailing-content-trailing-space, 12px);--_container-shape-start-start: var(--md-outlined-field-container-shape-start-start, var(--md-outlined-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_container-shape-start-end: var(--md-outlined-field-container-shape-start-end, var(--md-outlined-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_container-shape-end-end: var(--md-outlined-field-container-shape-end-end, var(--md-outlined-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_container-shape-end-start: var(--md-outlined-field-container-shape-end-start, var(--md-outlined-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)))}.outline{border-color:var(--_outline-color);border-radius:inherit;display:flex;pointer-events:none;height:100%;position:absolute;width:100%;z-index:1}.outline-start::before,.outline-start::after,.outline-panel-inactive::before,.outline-panel-inactive::after,.outline-panel-active::before,.outline-panel-active::after,.outline-end::before,.outline-end::after{border:inherit;content:"";inset:0;position:absolute}.outline-start,.outline-end{border:inherit;border-radius:inherit;box-sizing:border-box;position:relative}.outline-start::before,.outline-start::after,.outline-end::before,.outline-end::after{border-bottom-style:solid;border-top-style:solid}.outline-start::after,.outline-end::after{opacity:0;transition:opacity 150ms cubic-bezier(0.2, 0, 0, 1)}.focused .outline-start::after,.focused .outline-end::after{opacity:1}.outline-start::before,.outline-start::after{border-inline-start-style:solid;border-inline-end-style:none;border-start-start-radius:inherit;border-start-end-radius:0;border-end-start-radius:inherit;border-end-end-radius:0;margin-inline-end:var(--_outline-label-padding)}.outline-end{flex-grow:1;margin-inline-start:calc(-1*var(--_outline-label-padding))}.outline-end::before,.outline-end::after{border-inline-start-style:none;border-inline-end-style:solid;border-start-start-radius:0;border-start-end-radius:inherit;border-end-start-radius:0;border-end-end-radius:inherit}.outline-notch{align-items:flex-start;border:inherit;display:flex;margin-inline-start:calc(-1*var(--_outline-label-padding));margin-inline-end:var(--_outline-label-padding);max-width:calc(100% - var(--_leading-space) - var(--_trailing-space));padding:0 var(--_outline-label-padding);position:relative}.no-label .outline-notch{display:none}.outline-panel-inactive,.outline-panel-active{border:inherit;border-bottom-style:solid;inset:0;position:absolute}.outline-panel-inactive::before,.outline-panel-inactive::after,.outline-panel-active::before,.outline-panel-active::after{border-top-style:solid;border-bottom:none;bottom:auto;transform:scaleX(1);transition:transform 150ms cubic-bezier(0.2, 0, 0, 1)}.outline-panel-inactive::before,.outline-panel-active::before{right:50%;transform-origin:top left}.outline-panel-inactive::after,.outline-panel-active::after{left:50%;transform-origin:top right}.populated .outline-panel-inactive::before,.populated .outline-panel-inactive::after,.populated .outline-panel-active::before,.populated .outline-panel-active::after,.focused .outline-panel-inactive::before,.focused .outline-panel-inactive::after,.focused .outline-panel-active::before,.focused .outline-panel-active::after{transform:scaleX(0)}.outline-panel-active{opacity:0;transition:opacity 150ms cubic-bezier(0.2, 0, 0, 1)}.focused .outline-panel-active{opacity:1}.outline-label{display:flex;max-width:100%;transform:translateY(calc(-100% + var(--_label-text-padding-bottom)))}.outline-start,.field:not(.with-start) .content ::slotted(*){padding-inline-start:max(var(--_leading-space),max(var(--_container-shape-start-start),var(--_container-shape-end-start)) + var(--_outline-label-padding))}.field:not(.with-start) .label-wrapper{margin-inline-start:max(var(--_leading-space),max(var(--_container-shape-start-start),var(--_container-shape-end-start)) + var(--_outline-label-padding))}.field:not(.with-end) .content ::slotted(*){padding-inline-end:max(var(--_trailing-space),max(var(--_container-shape-start-end),var(--_container-shape-end-end)))}.field:not(.with-end) .label-wrapper{margin-inline-end:max(var(--_trailing-space),max(var(--_container-shape-start-end),var(--_container-shape-end-end)))}.outline-start::before,.outline-end::before,.outline-panel-inactive,.outline-panel-inactive::before,.outline-panel-inactive::after{border-width:var(--_outline-width)}:hover .outline{border-color:var(--_hover-outline-color);color:var(--_hover-outline-color)}:hover .outline-start::before,:hover .outline-end::before,:hover .outline-panel-inactive,:hover .outline-panel-inactive::before,:hover .outline-panel-inactive::after{border-width:var(--_hover-outline-width)}.focused .outline{border-color:var(--_focus-outline-color);color:var(--_focus-outline-color)}.outline-start::after,.outline-end::after,.outline-panel-active,.outline-panel-active::before,.outline-panel-active::after{border-width:var(--_focus-outline-width)}.disabled .outline{border-color:var(--_disabled-outline-color);color:var(--_disabled-outline-color)}.disabled .outline-start,.disabled .outline-end,.disabled .outline-panel-inactive{opacity:var(--_disabled-outline-opacity)}.disabled .outline-start::before,.disabled .outline-end::before,.disabled .outline-panel-inactive,.disabled .outline-panel-inactive::before,.disabled .outline-panel-inactive::after{border-width:var(--_disabled-outline-width)}.error .outline{border-color:var(--_error-outline-color);color:var(--_error-outline-color)}.error:hover .outline{border-color:var(--_error-hover-outline-color);color:var(--_error-hover-outline-color)}.error.focused .outline{border-color:var(--_error-focus-outline-color);color:var(--_error-focus-outline-color)}.resizable .container{bottom:var(--_focus-outline-width);inset-inline-end:var(--_focus-outline-width);clip-path:inset(var(--_focus-outline-width) 0 0 var(--_focus-outline-width))}.resizable .container>*{top:var(--_focus-outline-width);inset-inline-start:var(--_focus-outline-width)}.resizable .container:dir(rtl){clip-path:inset(var(--_focus-outline-width) var(--_focus-outline-width) 0 0)}}@layer hcm{@media(forced-colors: active){.disabled .outline{border-color:GrayText;color:GrayText}.disabled :is(.outline-start,.outline-end,.outline-panel-inactive){opacity:1}}}
`;
//# sourceMappingURL=outlined-styles.js.map

/***/ }),

/***/ "./node_modules/@material/web/field/internal/shared-styles.js":
/*!********************************************************************!*\
  !*** ./node_modules/@material/web/field/internal/shared-styles.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   styles: () => (/* binding */ styles)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
// Generated stylesheet for ./field/internal/shared-styles.css.

const styles = (0,lit__WEBPACK_IMPORTED_MODULE_0__.css) `:host{display:inline-flex;resize:both}.field{display:flex;flex:1;flex-direction:column;writing-mode:horizontal-tb;max-width:100%}.container-overflow{border-start-start-radius:var(--_container-shape-start-start);border-start-end-radius:var(--_container-shape-start-end);border-end-end-radius:var(--_container-shape-end-end);border-end-start-radius:var(--_container-shape-end-start);display:flex;height:100%;position:relative}.container{align-items:center;border-radius:inherit;display:flex;flex:1;max-height:100%;min-height:100%;min-width:min-content;position:relative}.field,.container-overflow{resize:inherit}.resizable:not(.disabled) .container{resize:inherit;overflow:hidden}.disabled{pointer-events:none}slot[name=container]{border-radius:inherit}slot[name=container]::slotted(*){border-radius:inherit;inset:0;pointer-events:none;position:absolute}@layer styles{.start,.middle,.end{display:flex;box-sizing:border-box;height:100%;position:relative}.start{color:var(--_leading-content-color)}.end{color:var(--_trailing-content-color)}.start,.end{align-items:center;justify-content:center}.with-start .start{margin-inline:var(--_with-leading-content-leading-space) var(--_content-space)}.with-end .end{margin-inline:var(--_content-space) var(--_with-trailing-content-trailing-space)}.middle{align-items:stretch;align-self:baseline;flex:1}.content{color:var(--_content-color);display:flex;flex:1;opacity:0;transition:opacity 83ms cubic-bezier(0.2, 0, 0, 1)}.no-label .content,.focused .content,.populated .content{opacity:1;transition-delay:67ms}:is(.disabled,.disable-transitions) .content{transition:none}.content ::slotted(*){all:unset;color:currentColor;font-family:var(--_content-font);font-size:var(--_content-size);line-height:var(--_content-line-height);font-weight:var(--_content-weight);width:100%;overflow-wrap:revert;white-space:revert}.content ::slotted(:not(textarea)){padding-top:var(--_top-space);padding-bottom:var(--_bottom-space)}.content ::slotted(textarea){margin-top:var(--_top-space);margin-bottom:var(--_bottom-space)}:hover .content{color:var(--_hover-content-color)}:hover .start{color:var(--_hover-leading-content-color)}:hover .end{color:var(--_hover-trailing-content-color)}.focused .content{color:var(--_focus-content-color)}.focused .start{color:var(--_focus-leading-content-color)}.focused .end{color:var(--_focus-trailing-content-color)}.disabled .content{color:var(--_disabled-content-color)}.disabled.no-label .content,.disabled.focused .content,.disabled.populated .content{opacity:var(--_disabled-content-opacity)}.disabled .start{color:var(--_disabled-leading-content-color);opacity:var(--_disabled-leading-content-opacity)}.disabled .end{color:var(--_disabled-trailing-content-color);opacity:var(--_disabled-trailing-content-opacity)}.error .content{color:var(--_error-content-color)}.error .start{color:var(--_error-leading-content-color)}.error .end{color:var(--_error-trailing-content-color)}.error:hover .content{color:var(--_error-hover-content-color)}.error:hover .start{color:var(--_error-hover-leading-content-color)}.error:hover .end{color:var(--_error-hover-trailing-content-color)}.error.focused .content{color:var(--_error-focus-content-color)}.error.focused .start{color:var(--_error-focus-leading-content-color)}.error.focused .end{color:var(--_error-focus-trailing-content-color)}}@layer hcm{@media(forced-colors: active){.disabled :is(.start,.content,.end){color:GrayText;opacity:1}}}@layer styles{.label{box-sizing:border-box;color:var(--_label-text-color);overflow:hidden;max-width:100%;text-overflow:ellipsis;white-space:nowrap;z-index:1;font-family:var(--_label-text-font);font-size:var(--_label-text-size);line-height:var(--_label-text-line-height);font-weight:var(--_label-text-weight);width:min-content}.label-wrapper{inset:0;pointer-events:none;position:absolute}.label.resting{position:absolute;top:var(--_top-space)}.label.floating{font-size:var(--_label-text-populated-size);line-height:var(--_label-text-populated-line-height);transform-origin:top left}.label.hidden{opacity:0}.no-label .label{display:none}.label-wrapper{inset:0;position:absolute;text-align:initial}:hover .label{color:var(--_hover-label-text-color)}.focused .label{color:var(--_focus-label-text-color)}.disabled .label{color:var(--_disabled-label-text-color)}.disabled .label:not(.hidden){opacity:var(--_disabled-label-text-opacity)}.error .label{color:var(--_error-label-text-color)}.error:hover .label{color:var(--_error-hover-label-text-color)}.error.focused .label{color:var(--_error-focus-label-text-color)}}@layer hcm{@media(forced-colors: active){.disabled .label:not(.hidden){color:GrayText;opacity:1}}}@layer styles{.supporting-text{color:var(--_supporting-text-color);display:flex;font-family:var(--_supporting-text-font);font-size:var(--_supporting-text-size);line-height:var(--_supporting-text-line-height);font-weight:var(--_supporting-text-weight);gap:16px;justify-content:space-between;padding-inline-start:var(--_supporting-text-leading-space);padding-inline-end:var(--_supporting-text-trailing-space);padding-top:var(--_supporting-text-top-space)}.supporting-text :nth-child(2){flex-shrink:0}:hover .supporting-text{color:var(--_hover-supporting-text-color)}.focus .supporting-text{color:var(--_focus-supporting-text-color)}.disabled .supporting-text{color:var(--_disabled-supporting-text-color);opacity:var(--_disabled-supporting-text-opacity)}.error .supporting-text{color:var(--_error-supporting-text-color)}.error:hover .supporting-text{color:var(--_error-hover-supporting-text-color)}.error.focus .supporting-text{color:var(--_error-focus-supporting-text-color)}}@layer hcm{@media(forced-colors: active){.disabled .supporting-text{color:GrayText;opacity:1}}}
`;
//# sourceMappingURL=shared-styles.js.map

/***/ }),

/***/ "./node_modules/@material/web/field/outlined-field.js":
/*!************************************************************!*\
  !*** ./node_modules/@material/web/field/outlined-field.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MdOutlinedField: () => (/* binding */ MdOutlinedField)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ "./node_modules/lit/decorators.js");
/* harmony import */ var _internal_outlined_field_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/outlined-field.js */ "./node_modules/@material/web/field/internal/outlined-field.js");
/* harmony import */ var _internal_outlined_styles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/outlined-styles.js */ "./node_modules/@material/web/field/internal/outlined-styles.js");
/* harmony import */ var _internal_shared_styles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/shared-styles.js */ "./node_modules/@material/web/field/internal/shared-styles.js");
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */





/**
 * TODO(b/228525797): add docs
 * @final
 * @suppress {visibility}
 */
let MdOutlinedField = class MdOutlinedField extends _internal_outlined_field_js__WEBPACK_IMPORTED_MODULE_1__.OutlinedField {
};
MdOutlinedField.styles = [_internal_shared_styles_js__WEBPACK_IMPORTED_MODULE_3__.styles, _internal_outlined_styles_js__WEBPACK_IMPORTED_MODULE_2__.styles];
MdOutlinedField = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.customElement)('md-outlined-field')
], MdOutlinedField);

//# sourceMappingURL=outlined-field.js.map

/***/ }),

/***/ "./node_modules/@material/web/focus/internal/focus-ring-styles.js":
/*!************************************************************************!*\
  !*** ./node_modules/@material/web/focus/internal/focus-ring-styles.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   styles: () => (/* binding */ styles)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
// Generated stylesheet for ./focus/internal/focus-ring-styles.css.

const styles = (0,lit__WEBPACK_IMPORTED_MODULE_0__.css) `:host{animation-delay:0s,calc(var(--md-focus-ring-duration, 600ms)*.25);animation-duration:calc(var(--md-focus-ring-duration, 600ms)*.25),calc(var(--md-focus-ring-duration, 600ms)*.75);animation-timing-function:cubic-bezier(0.2, 0, 0, 1);box-sizing:border-box;color:var(--md-focus-ring-color, var(--md-sys-color-secondary, #625b71));display:none;pointer-events:none;position:absolute}:host([visible]){display:flex}:host(:not([inward])){animation-name:outward-grow,outward-shrink;border-end-end-radius:calc(var(--md-focus-ring-shape-end-end, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) + var(--md-focus-ring-outward-offset, 2px));border-end-start-radius:calc(var(--md-focus-ring-shape-end-start, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) + var(--md-focus-ring-outward-offset, 2px));border-start-end-radius:calc(var(--md-focus-ring-shape-start-end, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) + var(--md-focus-ring-outward-offset, 2px));border-start-start-radius:calc(var(--md-focus-ring-shape-start-start, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) + var(--md-focus-ring-outward-offset, 2px));inset:calc(-1*var(--md-focus-ring-outward-offset, 2px));outline:var(--md-focus-ring-width, 3px) solid currentColor}:host([inward]){animation-name:inward-grow,inward-shrink;border-end-end-radius:calc(var(--md-focus-ring-shape-end-end, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) - var(--md-focus-ring-inward-offset, 0px));border-end-start-radius:calc(var(--md-focus-ring-shape-end-start, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) - var(--md-focus-ring-inward-offset, 0px));border-start-end-radius:calc(var(--md-focus-ring-shape-start-end, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) - var(--md-focus-ring-inward-offset, 0px));border-start-start-radius:calc(var(--md-focus-ring-shape-start-start, var(--md-focus-ring-shape, var(--md-sys-shape-corner-full, 9999px))) - var(--md-focus-ring-inward-offset, 0px));border:var(--md-focus-ring-width, 3px) solid currentColor;inset:var(--md-focus-ring-inward-offset, 0px)}@keyframes outward-grow{from{outline-width:0}to{outline-width:var(--md-focus-ring-active-width, 8px)}}@keyframes outward-shrink{from{outline-width:var(--md-focus-ring-active-width, 8px)}}@keyframes inward-grow{from{border-width:0}to{border-width:var(--md-focus-ring-active-width, 8px)}}@keyframes inward-shrink{from{border-width:var(--md-focus-ring-active-width, 8px)}}@media(prefers-reduced-motion){:host{animation:none}}
`;
//# sourceMappingURL=focus-ring-styles.js.map

/***/ }),

/***/ "./node_modules/@material/web/focus/internal/focus-ring.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@material/web/focus/internal/focus-ring.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FocusRing: () => (/* binding */ FocusRing)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit/decorators.js */ "./node_modules/lit/decorators.js");
/* harmony import */ var _internal_controller_attachable_controller_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../internal/controller/attachable-controller.js */ "./node_modules/@material/web/internal/controller/attachable-controller.js");
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */




/**
 * Events that the focus ring listens to.
 */
const EVENTS = ['focusin', 'focusout', 'pointerdown'];
/**
 * A focus ring component.
 *
 * @fires visibility-changed {Event} Fired whenever `visible` changes.
 */
class FocusRing extends lit__WEBPACK_IMPORTED_MODULE_0__.LitElement {
    constructor() {
        super(...arguments);
        /**
         * Makes the focus ring visible.
         */
        this.visible = false;
        /**
         * Makes the focus ring animate inwards instead of outwards.
         */
        this.inward = false;
        this.attachableController = new _internal_controller_attachable_controller_js__WEBPACK_IMPORTED_MODULE_2__.AttachableController(this, this.onControlChange.bind(this));
    }
    get htmlFor() {
        return this.attachableController.htmlFor;
    }
    set htmlFor(htmlFor) {
        this.attachableController.htmlFor = htmlFor;
    }
    get control() {
        return this.attachableController.control;
    }
    set control(control) {
        this.attachableController.control = control;
    }
    attach(control) {
        this.attachableController.attach(control);
    }
    detach() {
        this.attachableController.detach();
    }
    connectedCallback() {
        super.connectedCallback();
        // Needed for VoiceOver, which will create a "group" if the element is a
        // sibling to other content.
        this.setAttribute('aria-hidden', 'true');
    }
    /** @private */
    handleEvent(event) {
        if (event[HANDLED_BY_FOCUS_RING]) {
            // This ensures the focus ring does not activate when multiple focus rings
            // are used within a single component.
            return;
        }
        switch (event.type) {
            default:
                return;
            case 'focusin':
                this.visible = this.control?.matches(':focus-visible') ?? false;
                break;
            case 'focusout':
            case 'pointerdown':
                this.visible = false;
                break;
        }
        event[HANDLED_BY_FOCUS_RING] = true;
    }
    onControlChange(prev, next) {
        if (lit__WEBPACK_IMPORTED_MODULE_0__.isServer)
            return;
        for (const event of EVENTS) {
            prev?.removeEventListener(event, this);
            next?.addEventListener(event, this);
        }
    }
    update(changed) {
        if (changed.has('visible')) {
            // This logic can be removed once the `:has` selector has been introduced
            // to Firefox. This is necessary to allow correct submenu styles.
            this.dispatchEvent(new Event('visibility-changed'));
        }
        super.update(changed);
    }
}
(0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: Boolean, reflect: true })
], FocusRing.prototype, "visible", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: Boolean, reflect: true })
], FocusRing.prototype, "inward", void 0);
const HANDLED_BY_FOCUS_RING = Symbol('handledByFocusRing');
//# sourceMappingURL=focus-ring.js.map

/***/ }),

/***/ "./node_modules/@material/web/focus/md-focus-ring.js":
/*!***********************************************************!*\
  !*** ./node_modules/@material/web/focus/md-focus-ring.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MdFocusRing: () => (/* binding */ MdFocusRing)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ "./node_modules/lit/decorators.js");
/* harmony import */ var _internal_focus_ring_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/focus-ring.js */ "./node_modules/@material/web/focus/internal/focus-ring.js");
/* harmony import */ var _internal_focus_ring_styles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/focus-ring-styles.js */ "./node_modules/@material/web/focus/internal/focus-ring-styles.js");
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */




/**
 * TODO(b/267336424): add docs
 *
 * @final
 * @suppress {visibility}
 */
let MdFocusRing = class MdFocusRing extends _internal_focus_ring_js__WEBPACK_IMPORTED_MODULE_1__.FocusRing {
};
MdFocusRing.styles = [_internal_focus_ring_styles_js__WEBPACK_IMPORTED_MODULE_2__.styles];
MdFocusRing = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.customElement)('md-focus-ring')
], MdFocusRing);

//# sourceMappingURL=md-focus-ring.js.map

/***/ }),

/***/ "./node_modules/@material/web/internal/aria/aria.js":
/*!**********************************************************!*\
  !*** ./node_modules/@material/web/internal/aria/aria.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ARIA_ATTRIBUTES: () => (/* binding */ ARIA_ATTRIBUTES),
/* harmony export */   ARIA_PROPERTIES: () => (/* binding */ ARIA_PROPERTIES),
/* harmony export */   ariaPropertyToAttribute: () => (/* binding */ ariaPropertyToAttribute),
/* harmony export */   isAriaAttribute: () => (/* binding */ isAriaAttribute)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Accessibility Object Model reflective aria properties.
 */
const ARIA_PROPERTIES = [
    'role',
    'ariaAtomic',
    'ariaAutoComplete',
    'ariaBusy',
    'ariaChecked',
    'ariaColCount',
    'ariaColIndex',
    'ariaColSpan',
    'ariaCurrent',
    'ariaDisabled',
    'ariaExpanded',
    'ariaHasPopup',
    'ariaHidden',
    'ariaInvalid',
    'ariaKeyShortcuts',
    'ariaLabel',
    'ariaLevel',
    'ariaLive',
    'ariaModal',
    'ariaMultiLine',
    'ariaMultiSelectable',
    'ariaOrientation',
    'ariaPlaceholder',
    'ariaPosInSet',
    'ariaPressed',
    'ariaReadOnly',
    'ariaRequired',
    'ariaRoleDescription',
    'ariaRowCount',
    'ariaRowIndex',
    'ariaRowSpan',
    'ariaSelected',
    'ariaSetSize',
    'ariaSort',
    'ariaValueMax',
    'ariaValueMin',
    'ariaValueNow',
    'ariaValueText',
];
/**
 * Accessibility Object Model aria attributes.
 */
const ARIA_ATTRIBUTES = ARIA_PROPERTIES.map(ariaPropertyToAttribute);
/**
 * Checks if an attribute is one of the AOM aria attributes.
 *
 * @example
 * isAriaAttribute('aria-label'); // true
 *
 * @param attribute The attribute to check.
 * @return True if the attribute is an aria attribute, or false if not.
 */
function isAriaAttribute(attribute) {
    return ARIA_ATTRIBUTES.includes(attribute);
}
/**
 * Converts an AOM aria property into its corresponding attribute.
 *
 * @example
 * ariaPropertyToAttribute('ariaLabel'); // 'aria-label'
 *
 * @param property The aria property.
 * @return The aria attribute.
 */
function ariaPropertyToAttribute(property) {
    return property
        .replace('aria', 'aria-')
        // IDREF attributes also include an "Element" or "Elements" suffix
        .replace(/Elements?/g, '')
        .toLowerCase();
}
//# sourceMappingURL=aria.js.map

/***/ }),

/***/ "./node_modules/@material/web/internal/aria/delegate.js":
/*!**************************************************************!*\
  !*** ./node_modules/@material/web/internal/aria/delegate.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mixinDelegatesAria: () => (/* binding */ mixinDelegatesAria)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/* harmony import */ var _aria_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./aria.js */ "./node_modules/@material/web/internal/aria/aria.js");
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */


// Private symbols
const privateIgnoreAttributeChangesFor = Symbol('privateIgnoreAttributeChangesFor');
/**
 * Mixes in aria delegation for elements that delegate focus and aria to inner
 * shadow root elements.
 *
 * This mixin fixes invalid aria announcements with shadow roots, caused by
 * duplicate aria attributes on both the host and the inner shadow root element.
 *
 * Note: this mixin **does not yet support** ID reference attributes, such as
 * `aria-labelledby` or `aria-controls`.
 *
 * @example
 * ```ts
 * class MyButton extends mixinDelegatesAria(LitElement) {
 *   static shadowRootOptions = {mode: 'open', delegatesFocus: true};
 *
 *   render() {
 *     return html`
 *       <button aria-label=${this.ariaLabel || nothing}>
 *         <slot></slot>
 *       </button>
 *     `;
 *   }
 * }
 * ```
 * ```html
 * <my-button aria-label="Plus one">+1</my-button>
 * ```
 *
 * Use `ARIAMixinStrict` for lit analyzer strict types, such as the "role"
 * attribute.
 *
 * @example
 * ```ts
 * return html`
 *   <button role=${(this as ARIAMixinStrict).role || nothing}>
 *     <slot></slot>
 *   </button>
 * `;
 * ```
 *
 * In the future, updates to the Accessibility Object Model (AOM) will provide
 * built-in aria delegation features that will replace this mixin.
 *
 * @param base The class to mix functionality into.
 * @return The provided class with aria delegation mixed in.
 */
function mixinDelegatesAria(base) {
    var _a;
    if (lit__WEBPACK_IMPORTED_MODULE_0__.isServer) {
        // Don't shift attributes when running with lit-ssr. The SSR renderer
        // implements a subset of DOM APIs, including the methods this mixin
        // overrides, causing errors. We don't need to shift on the server anyway
        // since elements will shift attributes immediately once they hydrate.
        return base;
    }
    class WithDelegatesAriaElement extends base {
        constructor() {
            super(...arguments);
            this[_a] = new Set();
        }
        attributeChangedCallback(name, oldValue, newValue) {
            if (!(0,_aria_js__WEBPACK_IMPORTED_MODULE_1__.isAriaAttribute)(name)) {
                super.attributeChangedCallback(name, oldValue, newValue);
                return;
            }
            if (this[privateIgnoreAttributeChangesFor].has(name)) {
                return;
            }
            // Don't trigger another `attributeChangedCallback` once we remove the
            // aria attribute from the host. We check the explicit name of the
            // attribute to ignore since `attributeChangedCallback` can be called
            // multiple times out of an expected order when hydrating an element with
            // multiple attributes.
            this[privateIgnoreAttributeChangesFor].add(name);
            this.removeAttribute(name);
            this[privateIgnoreAttributeChangesFor].delete(name);
            const dataProperty = ariaAttributeToDataProperty(name);
            if (newValue === null) {
                delete this.dataset[dataProperty];
            }
            else {
                this.dataset[dataProperty] = newValue;
            }
            this.requestUpdate(ariaAttributeToDataProperty(name), oldValue);
        }
        getAttribute(name) {
            if ((0,_aria_js__WEBPACK_IMPORTED_MODULE_1__.isAriaAttribute)(name)) {
                return super.getAttribute(ariaAttributeToDataAttribute(name));
            }
            return super.getAttribute(name);
        }
        removeAttribute(name) {
            super.removeAttribute(name);
            if ((0,_aria_js__WEBPACK_IMPORTED_MODULE_1__.isAriaAttribute)(name)) {
                super.removeAttribute(ariaAttributeToDataAttribute(name));
                // Since `aria-*` attributes are already removed`, we need to request
                // an update because `attributeChangedCallback` will not be called.
                this.requestUpdate();
            }
        }
    }
    _a = privateIgnoreAttributeChangesFor;
    setupDelegatesAriaProperties(WithDelegatesAriaElement);
    return WithDelegatesAriaElement;
}
/**
 * Overrides the constructor's native `ARIAMixin` properties to ensure that
 * aria properties reflect the values that were shifted to a data attribute.
 *
 * @param ctor The `ReactiveElement` constructor to patch.
 */
function setupDelegatesAriaProperties(ctor) {
    for (const ariaProperty of _aria_js__WEBPACK_IMPORTED_MODULE_1__.ARIA_PROPERTIES) {
        // The casing between ariaProperty and the dataProperty may be different.
        // ex: aria-haspopup -> ariaHasPopup
        const ariaAttribute = (0,_aria_js__WEBPACK_IMPORTED_MODULE_1__.ariaPropertyToAttribute)(ariaProperty);
        // ex: aria-haspopup -> data-aria-haspopup
        const dataAttribute = ariaAttributeToDataAttribute(ariaAttribute);
        // ex: aria-haspopup -> dataset.ariaHaspopup
        const dataProperty = ariaAttributeToDataProperty(ariaAttribute);
        // Call `ReactiveElement.createProperty()` so that the `aria-*` and `data-*`
        // attributes are added to the `static observedAttributes` array. This
        // triggers `attributeChangedCallback` for the delegates aria mixin to
        // handle.
        ctor.createProperty(ariaProperty, {
            attribute: ariaAttribute,
            noAccessor: true,
        });
        ctor.createProperty(Symbol(dataAttribute), {
            attribute: dataAttribute,
            noAccessor: true,
        });
        // Re-define the `ARIAMixin` properties to handle data attribute shifting.
        // It is safe to use `Object.defineProperty` here because the properties
        // are native and not renamed.
        // tslint:disable-next-line:ban-unsafe-reflection
        Object.defineProperty(ctor.prototype, ariaProperty, {
            configurable: true,
            enumerable: true,
            get() {
                return this.dataset[dataProperty] ?? null;
            },
            set(value) {
                const prevValue = this.dataset[dataProperty] ?? null;
                if (value === prevValue) {
                    return;
                }
                if (value === null) {
                    delete this.dataset[dataProperty];
                }
                else {
                    this.dataset[dataProperty] = value;
                }
                this.requestUpdate(ariaProperty, prevValue);
            },
        });
    }
}
function ariaAttributeToDataAttribute(ariaAttribute) {
    // aria-haspopup -> data-aria-haspopup
    return `data-${ariaAttribute}`;
}
function ariaAttributeToDataProperty(ariaAttribute) {
    // aria-haspopup -> dataset.ariaHaspopup
    return ariaAttribute.replace(/-\w/, (dashLetter) => dashLetter[1].toUpperCase());
}
//# sourceMappingURL=delegate.js.map

/***/ }),

/***/ "./node_modules/@material/web/internal/controller/attachable-controller.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@material/web/internal/controller/attachable-controller.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AttachableController: () => (/* binding */ AttachableController)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * A key to retrieve an `Attachable` element's `AttachableController` from a
 * global `MutationObserver`.
 */
const ATTACHABLE_CONTROLLER = Symbol('attachableController');
let FOR_ATTRIBUTE_OBSERVER;
if (!lit__WEBPACK_IMPORTED_MODULE_0__.isServer) {
    /**
     * A global `MutationObserver` that reacts to `for` attribute changes on
     * `Attachable` elements. If the `for` attribute changes, the controller will
     * re-attach to the new referenced element.
     */
    FOR_ATTRIBUTE_OBSERVER = new MutationObserver((records) => {
        for (const record of records) {
            // When a control's `for` attribute changes, inform its
            // `AttachableController` to update to a new control.
            record.target[ATTACHABLE_CONTROLLER]?.hostConnected();
        }
    });
}
/**
 * A controller that provides an implementation for `Attachable` elements.
 *
 * @example
 * ```ts
 * class MyElement extends LitElement implements Attachable {
 *   get control() { return this.attachableController.control; }
 *
 *   private readonly attachableController = new AttachableController(
 *     this,
 *     (previousControl, newControl) => {
 *       previousControl?.removeEventListener('click', this.handleClick);
 *       newControl?.addEventListener('click', this.handleClick);
 *     }
 *   );
 *
 *   // Implement remaining `Attachable` properties/methods that call the
 *   // controller's properties/methods.
 * }
 * ```
 */
class AttachableController {
    get htmlFor() {
        return this.host.getAttribute('for');
    }
    set htmlFor(htmlFor) {
        if (htmlFor === null) {
            this.host.removeAttribute('for');
        }
        else {
            this.host.setAttribute('for', htmlFor);
        }
    }
    get control() {
        if (this.host.hasAttribute('for')) {
            if (!this.htmlFor || !this.host.isConnected) {
                return null;
            }
            return this.host.getRootNode().querySelector(`#${this.htmlFor}`);
        }
        return this.currentControl || this.host.parentElement;
    }
    set control(control) {
        if (control) {
            this.attach(control);
        }
        else {
            this.detach();
        }
    }
    /**
     * Creates a new controller for an `Attachable` element.
     *
     * @param host The `Attachable` element.
     * @param onControlChange A callback with two parameters for the previous and
     *     next control. An `Attachable` element may perform setup or teardown
     *     logic whenever the control changes.
     */
    constructor(host, onControlChange) {
        this.host = host;
        this.onControlChange = onControlChange;
        this.currentControl = null;
        host.addController(this);
        host[ATTACHABLE_CONTROLLER] = this;
        FOR_ATTRIBUTE_OBSERVER?.observe(host, { attributeFilter: ['for'] });
    }
    attach(control) {
        if (control === this.currentControl) {
            return;
        }
        this.setCurrentControl(control);
        // When imperatively attaching, remove the `for` attribute so
        // that the attached control is used instead of a referenced one.
        this.host.removeAttribute('for');
    }
    detach() {
        this.setCurrentControl(null);
        // When imperatively detaching, add an empty `for=""` attribute. This will
        // ensure the control is `null` rather than the `parentElement`.
        this.host.setAttribute('for', '');
    }
    /** @private */
    hostConnected() {
        this.setCurrentControl(this.control);
    }
    /** @private */
    hostDisconnected() {
        this.setCurrentControl(null);
    }
    setCurrentControl(control) {
        this.onControlChange(this.currentControl, control);
        this.currentControl = control;
    }
}
//# sourceMappingURL=attachable-controller.js.map

/***/ }),

/***/ "./node_modules/@material/web/internal/events/form-label-activation.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@material/web/internal/events/form-label-activation.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dispatchActivationClick: () => (/* binding */ dispatchActivationClick),
/* harmony export */   isActivationClick: () => (/* binding */ isActivationClick)
/* harmony export */ });
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Dispatches a click event to the given element that triggers a native action,
 * but is not composed and therefore is not seen outside the element.
 *
 * This is useful for responding to an external click event on the host element
 * that should trigger an internal action like a button click.
 *
 * Note, a helper is provided because setting this up correctly is a bit tricky.
 * In particular, calling `click` on an element creates a composed event, which
 * is not desirable, and a manually dispatched event must specifically be a
 * `MouseEvent` to trigger a native action.
 *
 * @example
 * hostClickListener = (event: MouseEvent) {
 *   if (isActivationClick(event)) {
 *     this.dispatchActivationClick(this.buttonElement);
 *   }
 * }
 *
 */
function dispatchActivationClick(element) {
    const event = new MouseEvent('click', { bubbles: true });
    element.dispatchEvent(event);
    return event;
}
/**
 * Returns true if the click event should trigger an activation behavior. The
 * behavior is defined by the element and is whatever it should do when
 * clicked.
 *
 * Typically when an element needs to handle a click, the click is generated
 * from within the element and an event listener within the element implements
 * the needed behavior; however, it's possible to fire a click directly
 * at the element that the element should handle. This method helps
 * distinguish these "external" clicks.
 *
 * An "external" click can be triggered in a number of ways: via a click
 * on an associated label for a form  associated element, calling
 * `element.click()`, or calling
 * `element.dispatchEvent(new MouseEvent('click', ...))`.
 *
 * Also works around Firefox issue
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1804576 by squelching
 * events for a microtask after called.
 *
 * @example
 * hostClickListener = (event: MouseEvent) {
 *   if (isActivationClick(event)) {
 *     this.dispatchActivationClick(this.buttonElement);
 *   }
 * }
 *
 */
function isActivationClick(event) {
    // Event must start at the event target.
    if (event.currentTarget !== event.target) {
        return false;
    }
    // Event must not be retargeted from shadowRoot.
    if (event.composedPath()[0] !== event.target) {
        return false;
    }
    // Target must not be disabled; this should only occur for a synthetically
    // dispatched click.
    if (event.target.disabled) {
        return false;
    }
    // This is an activation if the event should not be squelched.
    return !squelchEvent(event);
}
// TODO(https://bugzilla.mozilla.org/show_bug.cgi?id=1804576)
//  Remove when Firefox bug is addressed.
function squelchEvent(event) {
    const squelched = isSquelchingEvents;
    if (squelched) {
        event.preventDefault();
        event.stopImmediatePropagation();
    }
    squelchEventsForMicrotask();
    return squelched;
}
// Ignore events for one microtask only.
let isSquelchingEvents = false;
async function squelchEventsForMicrotask() {
    isSquelchingEvents = true;
    // Need to pause for just one microtask.
    // tslint:disable-next-line
    await null;
    isSquelchingEvents = false;
}
//# sourceMappingURL=form-label-activation.js.map

/***/ }),

/***/ "./node_modules/@material/web/internal/events/redispatch-event.js":
/*!************************************************************************!*\
  !*** ./node_modules/@material/web/internal/events/redispatch-event.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   redispatchEvent: () => (/* binding */ redispatchEvent)
/* harmony export */ });
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Re-dispatches an event from the provided element.
 *
 * This function is useful for forwarding non-composed events, such as `change`
 * events.
 *
 * @example
 * class MyInput extends LitElement {
 *   render() {
 *     return html`<input @change=${this.redispatchEvent}>`;
 *   }
 *
 *   protected redispatchEvent(event: Event) {
 *     redispatchEvent(this, event);
 *   }
 * }
 *
 * @param element The element to dispatch the event from.
 * @param event The event to re-dispatch.
 * @return Whether or not the event was dispatched (if cancelable).
 */
function redispatchEvent(element, event) {
    // For bubbling events in SSR light DOM (or composed), stop their propagation
    // and dispatch the copy.
    if (event.bubbles && (!element.shadowRoot || event.composed)) {
        event.stopPropagation();
    }
    const copy = Reflect.construct(event.constructor, [event.type, event]);
    const dispatched = element.dispatchEvent(copy);
    if (!dispatched) {
        event.preventDefault();
    }
    return dispatched;
}
//# sourceMappingURL=redispatch-event.js.map

/***/ }),

/***/ "./node_modules/@material/web/internal/motion/animation.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@material/web/internal/motion/animation.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EASING: () => (/* binding */ EASING),
/* harmony export */   createAnimationSignal: () => (/* binding */ createAnimationSignal),
/* harmony export */   createThrottle: () => (/* binding */ createThrottle),
/* harmony export */   msFromTimeCSSValue: () => (/* binding */ msFromTimeCSSValue)
/* harmony export */ });
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Easing functions to use for web animations.
 *
 * **NOTE:** `EASING.EMPHASIZED` is approximated with unknown accuracy.
 *
 * TODO(b/241113345): replace with tokens
 */
const EASING = {
    STANDARD: 'cubic-bezier(0.2, 0, 0, 1)',
    STANDARD_ACCELERATE: 'cubic-bezier(.3,0,1,1)',
    STANDARD_DECELERATE: 'cubic-bezier(0,0,0,1)',
    EMPHASIZED: 'cubic-bezier(.3,0,0,1)',
    EMPHASIZED_ACCELERATE: 'cubic-bezier(.3,0,.8,.15)',
    EMPHASIZED_DECELERATE: 'cubic-bezier(.05,.7,.1,1)',
};
/**
 * Creates an `AnimationSignal` that can be used to cancel a previous task.
 *
 * @example
 * class MyClass {
 *   private labelAnimationSignal = createAnimationSignal();
 *
 *   private async animateLabel() {
 *     // Start of the task. Previous tasks will be canceled.
 *     const signal = this.labelAnimationSignal.start();
 *
 *     // Do async work...
 *     if (signal.aborted) {
 *       // Use AbortSignal to check if a request was made to abort after some
 *       // asynchronous work.
 *       return;
 *     }
 *
 *     const animation = this.animate(...);
 *     // Add event listeners to be notified when the task should be canceled.
 *     signal.addEventListener('abort', () => {
 *       animation.cancel();
 *     });
 *
 *     animation.addEventListener('finish', () => {
 *       // Tell the signal that the current task is finished.
 *       this.labelAnimationSignal.finish();
 *     });
 *   }
 * }
 *
 * @return An `AnimationSignal`.
 */
function createAnimationSignal() {
    // The current animation's AbortController
    let animationAbortController = null;
    return {
        start() {
            // Tell the previous animation to cancel.
            animationAbortController?.abort();
            // Set up a new AbortController for the current animation.
            animationAbortController = new AbortController();
            // Provide the AbortSignal so that the caller can check aborted status
            // and add listeners.
            return animationAbortController.signal;
        },
        finish() {
            animationAbortController = null;
        },
    };
}
/**
 * Returns a function which can be used to throttle function calls
 * mapped to a key via a given function that should produce a promise that
 * determines the throttle amount (defaults to requestAnimationFrame).
 */
function createThrottle() {
    const stack = new Set();
    return async (key = '', cb, timeout = async () => {
        await new Promise(requestAnimationFrame);
    }) => {
        if (!stack.has(key)) {
            stack.add(key);
            await timeout();
            if (stack.has(key)) {
                stack.delete(key);
                cb();
            }
        }
    };
}
/**
 * Parses an number in milliseconds from a css time value
 */
function msFromTimeCSSValue(value) {
    const match = value.trim().match(/([\d.]+)(\s*s$)?/);
    const time = match?.[1];
    const seconds = match?.[2];
    return Number(time ?? 0) * (seconds ? 1000 : 1);
}
//# sourceMappingURL=animation.js.map

/***/ }),

/***/ "./node_modules/@material/web/labs/behaviors/constraint-validation.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@material/web/labs/behaviors/constraint-validation.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createValidator: () => (/* binding */ createValidator),
/* harmony export */   getValidityAnchor: () => (/* binding */ getValidityAnchor),
/* harmony export */   mixinConstraintValidation: () => (/* binding */ mixinConstraintValidation)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/* harmony import */ var _element_internals_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element-internals.js */ "./node_modules/@material/web/labs/behaviors/element-internals.js");
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */


/**
 * A symbol property used to create a constraint validation `Validator`.
 * Required for all `mixinConstraintValidation()` elements.
 */
const createValidator = Symbol('createValidator');
/**
 * A symbol property used to return an anchor for constraint validation popups.
 * Required for all `mixinConstraintValidation()` elements.
 */
const getValidityAnchor = Symbol('getValidityAnchor');
// Private symbol members, used to avoid name clashing.
const privateValidator = Symbol('privateValidator');
const privateSyncValidity = Symbol('privateSyncValidity');
const privateCustomValidationMessage = Symbol('privateCustomValidationMessage');
/**
 * Mixes in constraint validation APIs for an element.
 *
 * See https://developer.mozilla.org/en-US/docs/Web/HTML/Constraint_validation
 * for more details.
 *
 * Implementations must provide a validator to cache and compute its validity,
 * along with a shadow root element to anchor validation popups to.
 *
 * @example
 * ```ts
 * const baseClass = mixinConstraintValidation(
 *   mixinFormAssociated(mixinElementInternals(LitElement))
 * );
 *
 * class MyCheckbox extends baseClass {
 *   \@property({type: Boolean}) checked = false;
 *   \@property({type: Boolean}) required = false;
 *
 *   [createValidator]() {
 *     return new CheckboxValidator(() => this);
 *   }
 *
 *   [getValidityAnchor]() {
 *     return this.renderRoot.querySelector('.root');
 *   }
 * }
 * ```
 *
 * @param base The class to mix functionality into.
 * @return The provided class with `ConstraintValidation` mixed in.
 */
function mixinConstraintValidation(base) {
    var _a;
    class ConstraintValidationElement extends base {
        constructor() {
            super(...arguments);
            /**
             * Needed for Safari, see https://bugs.webkit.org/show_bug.cgi?id=261432
             * Replace with this[internals].validity.customError when resolved.
             */
            this[_a] = '';
        }
        get validity() {
            this[privateSyncValidity]();
            return this[_element_internals_js__WEBPACK_IMPORTED_MODULE_1__.internals].validity;
        }
        get validationMessage() {
            this[privateSyncValidity]();
            return this[_element_internals_js__WEBPACK_IMPORTED_MODULE_1__.internals].validationMessage;
        }
        get willValidate() {
            this[privateSyncValidity]();
            return this[_element_internals_js__WEBPACK_IMPORTED_MODULE_1__.internals].willValidate;
        }
        checkValidity() {
            this[privateSyncValidity]();
            return this[_element_internals_js__WEBPACK_IMPORTED_MODULE_1__.internals].checkValidity();
        }
        reportValidity() {
            this[privateSyncValidity]();
            return this[_element_internals_js__WEBPACK_IMPORTED_MODULE_1__.internals].reportValidity();
        }
        setCustomValidity(error) {
            this[privateCustomValidationMessage] = error;
            this[privateSyncValidity]();
        }
        requestUpdate(name, oldValue, options) {
            super.requestUpdate(name, oldValue, options);
            this[privateSyncValidity]();
        }
        firstUpdated(changed) {
            super.firstUpdated(changed);
            // Sync the validity again when the element first renders, since the
            // validity anchor is now available.
            //
            // Elements that `delegatesFocus: true` to an `<input>` will throw an
            // error in Chrome and Safari when a form tries to submit or call
            // `form.reportValidity()`:
            // "An invalid form control with name='' is not focusable"
            //
            // The validity anchor MUST be provided in `internals.setValidity()` and
            // MUST be the `<input>` element rendered.
            //
            // See https://lit.dev/playground/#gist=6c26e418e0010f7a5aac15005cde8bde
            // for a reproduction.
            this[privateSyncValidity]();
        }
        [(_a = privateCustomValidationMessage, privateSyncValidity)]() {
            if (lit__WEBPACK_IMPORTED_MODULE_0__.isServer) {
                return;
            }
            if (!this[privateValidator]) {
                this[privateValidator] = this[createValidator]();
            }
            const { validity, validationMessage: nonCustomValidationMessage } = this[privateValidator].getValidity();
            const customError = !!this[privateCustomValidationMessage];
            const validationMessage = this[privateCustomValidationMessage] || nonCustomValidationMessage;
            this[_element_internals_js__WEBPACK_IMPORTED_MODULE_1__.internals].setValidity({ ...validity, customError }, validationMessage, this[getValidityAnchor]() ?? undefined);
        }
        [createValidator]() {
            throw new Error('Implement [createValidator]');
        }
        [getValidityAnchor]() {
            throw new Error('Implement [getValidityAnchor]');
        }
    }
    return ConstraintValidationElement;
}
//# sourceMappingURL=constraint-validation.js.map

/***/ }),

/***/ "./node_modules/@material/web/labs/behaviors/element-internals.js":
/*!************************************************************************!*\
  !*** ./node_modules/@material/web/labs/behaviors/element-internals.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   internals: () => (/* binding */ internals),
/* harmony export */   mixinElementInternals: () => (/* binding */ mixinElementInternals)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * A unique symbol used for protected access to an instance's
 * `ElementInternals`.
 *
 * @example
 * ```ts
 * class MyElement extends mixinElementInternals(LitElement) {
 *   constructor() {
 *     super();
 *     this[internals].role = 'button';
 *   }
 * }
 * ```
 */
const internals = Symbol('internals');
// Private symbols
const privateInternals = Symbol('privateInternals');
/**
 * Mixes in an attached `ElementInternals` instance.
 *
 * This mixin is only needed when other shared code needs access to a
 * component's `ElementInternals`, such as form-associated mixins.
 *
 * @param base The class to mix functionality into.
 * @return The provided class with `WithElementInternals` mixed in.
 */
function mixinElementInternals(base) {
    class WithElementInternalsElement extends base {
        get [internals]() {
            // Create internals in getter so that it can be used in methods called on
            // construction in `ReactiveElement`, such as `requestUpdate()`.
            if (!this[privateInternals]) {
                // Cast needed for closure
                this[privateInternals] = this.attachInternals();
            }
            return this[privateInternals];
        }
    }
    return WithElementInternalsElement;
}
//# sourceMappingURL=element-internals.js.map

/***/ }),

/***/ "./node_modules/@material/web/labs/behaviors/focusable.js":
/*!****************************************************************!*\
  !*** ./node_modules/@material/web/labs/behaviors/focusable.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isFocusable: () => (/* binding */ isFocusable),
/* harmony export */   mixinFocusable: () => (/* binding */ mixinFocusable)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ "./node_modules/lit/decorators.js");
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */


/**
 * A property symbol that indicates whether or not a `Focusable` element can be
 * focused.
 */
const isFocusable = Symbol('isFocusable');
const privateIsFocusable = Symbol('privateIsFocusable');
const externalTabIndex = Symbol('externalTabIndex');
const isUpdatingTabIndex = Symbol('isUpdatingTabIndex');
const updateTabIndex = Symbol('updateTabIndex');
/**
 * Mixes in focusable functionality for a class.
 *
 * Elements can enable and disable their focusability with the `isFocusable`
 * symbol property. Changing `tabIndex` will trigger a lit render, meaning
 * `this.tabIndex` can be used in template expressions.
 *
 * This mixin will preserve externally-set tabindices. If an element turns off
 * focusability, but a user sets `tabindex="0"`, it will still be focusable.
 *
 * To remove user overrides and restore focusability control to the element,
 * remove the `tabindex` attribute.
 *
 * @param base The class to mix functionality into.
 * @return The provided class with `Focusable` mixed in.
 */
function mixinFocusable(base) {
    var _a, _b, _c;
    class FocusableElement extends base {
        constructor() {
            super(...arguments);
            this[_a] = true;
            this[_b] = null;
            this[_c] = false;
        }
        get [isFocusable]() {
            return this[privateIsFocusable];
        }
        set [isFocusable](value) {
            if (this[isFocusable] === value) {
                return;
            }
            this[privateIsFocusable] = value;
            this[updateTabIndex]();
        }
        connectedCallback() {
            super.connectedCallback();
            this[updateTabIndex]();
        }
        attributeChangedCallback(name, old, value) {
            if (name !== 'tabindex') {
                super.attributeChangedCallback(name, old, value);
                return;
            }
            this.requestUpdate('tabIndex', Number(old ?? -1));
            if (this[isUpdatingTabIndex]) {
                // Not an externally-initiated update.
                return;
            }
            if (!this.hasAttribute('tabindex')) {
                // User removed the attribute, can now use internal tabIndex
                this[externalTabIndex] = null;
                this[updateTabIndex]();
                return;
            }
            this[externalTabIndex] = this.tabIndex;
        }
        [(_a = privateIsFocusable, _b = externalTabIndex, _c = isUpdatingTabIndex, updateTabIndex)]() {
            const internalTabIndex = this[isFocusable] ? 0 : -1;
            const computedTabIndex = this[externalTabIndex] ?? internalTabIndex;
            this[isUpdatingTabIndex] = true;
            this.tabIndex = computedTabIndex;
            this[isUpdatingTabIndex] = false;
        }
    }
    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ noAccessor: true })
    ], FocusableElement.prototype, "tabIndex", void 0);
    return FocusableElement;
}
//# sourceMappingURL=focusable.js.map

/***/ }),

/***/ "./node_modules/@material/web/labs/behaviors/form-associated.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@material/web/labs/behaviors/form-associated.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getFormState: () => (/* binding */ getFormState),
/* harmony export */   getFormValue: () => (/* binding */ getFormValue),
/* harmony export */   mixinFormAssociated: () => (/* binding */ mixinFormAssociated)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ "./node_modules/lit/decorators.js");
/* harmony import */ var _element_internals_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element-internals.js */ "./node_modules/@material/web/labs/behaviors/element-internals.js");
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */



/**
 * A symbol property to retrieve the form value for an element.
 */
const getFormValue = Symbol('getFormValue');
/**
 * A symbol property to retrieve the form state for an element.
 */
const getFormState = Symbol('getFormState');
/**
 * Mixes in form-associated behavior for a class. This allows an element to add
 * values to `<form>` elements.
 *
 * Implementing classes should provide a `[formValue]` to return the current
 * value of the element, as well as reset and restore callbacks.
 *
 * @example
 * ```ts
 * const base = mixinFormAssociated(mixinElementInternals(LitElement));
 *
 * class MyControl extends base {
 *   \@property()
 *   value = '';
 *
 *   override [getFormValue]() {
 *     return this.value;
 *   }
 *
 *   override formResetCallback() {
 *     const defaultValue = this.getAttribute('value');
 *     this.value = defaultValue;
 *   }
 *
 *   override formStateRestoreCallback(state: string) {
 *     this.value = state;
 *   }
 * }
 * ```
 *
 * Elements may optionally provide a `[formState]` if their values do not
 * represent the state of the component.
 *
 * @example
 * ```ts
 * const base = mixinFormAssociated(mixinElementInternals(LitElement));
 *
 * class MyCheckbox extends base {
 *   \@property()
 *   value = 'on';
 *
 *   \@property({type: Boolean})
 *   checked = false;
 *
 *   override [getFormValue]() {
 *     return this.checked ? this.value : null;
 *   }
 *
 *   override [getFormState]() {
 *     return String(this.checked);
 *   }
 *
 *   override formResetCallback() {
 *     const defaultValue = this.hasAttribute('checked');
 *     this.checked = defaultValue;
 *   }
 *
 *   override formStateRestoreCallback(state: string) {
 *     this.checked = Boolean(state);
 *   }
 * }
 * ```
 *
 * IMPORTANT: Requires declares for lit-analyzer
 * @example
 * ```ts
 * const base = mixinFormAssociated(mixinElementInternals(LitElement));
 * class MyControl extends base {
 *   // Writable mixin properties for lit-html binding, needed for lit-analyzer
 *   declare disabled: boolean;
 *   declare name: string;
 * }
 * ```
 *
 * @param base The class to mix functionality into. The base class must use
 *     `mixinElementInternals()`.
 * @return The provided class with `FormAssociated` mixed in.
 */
function mixinFormAssociated(base) {
    class FormAssociatedElement extends base {
        get form() {
            return this[_element_internals_js__WEBPACK_IMPORTED_MODULE_1__.internals].form;
        }
        get labels() {
            return this[_element_internals_js__WEBPACK_IMPORTED_MODULE_1__.internals].labels;
        }
        // Use @property for the `name` and `disabled` properties to add them to the
        // `observedAttributes` array and trigger `attributeChangedCallback()`.
        //
        // We don't use Lit's default getter/setter (`noAccessor: true`) because
        // the attributes need to be updated synchronously to work with synchronous
        // form APIs, and Lit updates attributes async by default.
        get name() {
            return this.getAttribute('name') ?? '';
        }
        set name(name) {
            // Note: setting name to null or empty does not remove the attribute.
            this.setAttribute('name', name);
            // We don't need to call `requestUpdate()` since it's called synchronously
            // in `attributeChangedCallback()`.
        }
        get disabled() {
            return this.hasAttribute('disabled');
        }
        set disabled(disabled) {
            this.toggleAttribute('disabled', disabled);
            // We don't need to call `requestUpdate()` since it's called synchronously
            // in `attributeChangedCallback()`.
        }
        attributeChangedCallback(name, old, value) {
            // Manually `requestUpdate()` for `name` and `disabled` when their
            // attribute or property changes.
            // The properties update their attributes, so this callback is invoked
            // immediately when the properties are set. We call `requestUpdate()` here
            // instead of letting Lit set the properties from the attribute change.
            // That would cause the properties to re-set the attribute and invoke this
            // callback again in a loop. This leads to stale state when Lit tries to
            // determine if a property changed or not.
            if (name === 'name' || name === 'disabled') {
                // Disabled's value is only false if the attribute is missing and null.
                const oldValue = name === 'disabled' ? old !== null : old;
                // Trigger a lit update when the attribute changes.
                this.requestUpdate(name, oldValue);
                return;
            }
            super.attributeChangedCallback(name, old, value);
        }
        requestUpdate(name, oldValue, options) {
            super.requestUpdate(name, oldValue, options);
            // If any properties change, update the form value, which may have changed
            // as well.
            // Update the form value synchronously in `requestUpdate()` rather than
            // `update()` or `updated()`, which are async. This is necessary to ensure
            // that form data is updated in time for synchronous event listeners.
            this[_element_internals_js__WEBPACK_IMPORTED_MODULE_1__.internals].setFormValue(this[getFormValue](), this[getFormState]());
        }
        [getFormValue]() {
            // Closure does not allow abstract symbol members, so a default
            // implementation is needed.
            throw new Error('Implement [getFormValue]');
        }
        [getFormState]() {
            return this[getFormValue]();
        }
        formDisabledCallback(disabled) {
            this.disabled = disabled;
        }
    }
    /** @nocollapse */
    FormAssociatedElement.formAssociated = true;
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ noAccessor: true })
    ], FormAssociatedElement.prototype, "name", null);
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
        (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.property)({ type: Boolean, noAccessor: true })
    ], FormAssociatedElement.prototype, "disabled", null);
    return FormAssociatedElement;
}
//# sourceMappingURL=form-associated.js.map

/***/ }),

/***/ "./node_modules/@material/web/labs/behaviors/on-report-validity.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@material/web/labs/behaviors/on-report-validity.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mixinOnReportValidity: () => (/* binding */ mixinOnReportValidity),
/* harmony export */   onReportValidity: () => (/* binding */ onReportValidity)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/* harmony import */ var _element_internals_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element-internals.js */ "./node_modules/@material/web/labs/behaviors/element-internals.js");
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */


/**
 * A symbol property used for a callback when validity has been reported.
 */
const onReportValidity = Symbol('onReportValidity');
// Private symbol members, used to avoid name clashing.
const privateCleanupFormListeners = Symbol('privateCleanupFormListeners');
const privateDoNotReportInvalid = Symbol('privateDoNotReportInvalid');
const privateIsSelfReportingValidity = Symbol('privateIsSelfReportingValidity');
const privateCallOnReportValidity = Symbol('privateCallOnReportValidity');
/**
 * Mixes in a callback for constraint validation when validity should be
 * styled and reported to the user.
 *
 * This is commonly used in text-field-like controls that display error styles
 * and error messages.
 *
 * @example
 * ```ts
 * const baseClass = mixinOnReportValidity(
 *   mixinConstraintValidation(
 *     mixinFormAssociated(mixinElementInternals(LitElement)),
 *   ),
 * );
 *
 * class MyField extends baseClass {
 *   \@property({type: Boolean}) error = false;
 *   \@property() errorMessage = '';
 *
 *   [onReportValidity](invalidEvent: Event | null) {
 *     this.error = !!invalidEvent;
 *     this.errorMessage = this.validationMessage;
 *
 *     // Optionally prevent platform popup from displaying
 *     invalidEvent?.preventDefault();
 *   }
 * }
 * ```
 *
 * @param base The class to mix functionality into.
 * @return The provided class with `OnReportValidity` mixed in.
 */
function mixinOnReportValidity(base) {
    var _a, _b, _c;
    class OnReportValidityElement extends base {
        // Mixins must have a constructor with `...args: any[]`
        // tslint:disable-next-line:no-any
        constructor(...args) {
            super(...args);
            /**
             * Used to clean up event listeners when a new form is associated.
             */
            this[_a] = new AbortController();
            /**
             * Used to determine if an invalid event should report validity. Invalid
             * events from `checkValidity()` do not trigger reporting.
             */
            this[_b] = false;
            /**
             * Used to determine if the control is reporting validity from itself, or
             * if a `<form>` is causing the validity report. Forms have different
             * control focusing behavior.
             */
            this[_c] = false;
            if (lit__WEBPACK_IMPORTED_MODULE_0__.isServer) {
                return;
            }
            this.addEventListener('invalid', (invalidEvent) => {
                // Listen for invalid events dispatched by a `<form>` when it tries to
                // submit and the element is invalid. We ignore events dispatched when
                // calling `checkValidity()` as well as untrusted events, since the
                // `reportValidity()` and `<form>`-dispatched events are always
                // trusted.
                if (this[privateDoNotReportInvalid] || !invalidEvent.isTrusted) {
                    return;
                }
                this.addEventListener('invalid', () => {
                    // A normal bubbling phase event listener. By adding it here, we
                    // ensure it's the last event listener that is called during the
                    // bubbling phase.
                    this[privateCallOnReportValidity](invalidEvent);
                }, { once: true });
            }, {
                // Listen during the capture phase, which will happen before the
                // bubbling phase. That way, we can add a final event listener that
                // will run after other event listeners, and we can check if it was
                // default prevented. This works because invalid does not bubble.
                capture: true,
            });
        }
        checkValidity() {
            this[privateDoNotReportInvalid] = true;
            const valid = super.checkValidity();
            this[privateDoNotReportInvalid] = false;
            return valid;
        }
        reportValidity() {
            this[privateIsSelfReportingValidity] = true;
            const valid = super.reportValidity();
            // Constructor's invalid listener will handle reporting invalid events.
            if (valid) {
                this[privateCallOnReportValidity](null);
            }
            this[privateIsSelfReportingValidity] = false;
            return valid;
        }
        [(_a = privateCleanupFormListeners, _b = privateDoNotReportInvalid, _c = privateIsSelfReportingValidity, privateCallOnReportValidity)](invalidEvent) {
            // Since invalid events do not bubble to parent listeners, and because
            // our invalid listeners are added lazily after other listeners, we can
            // reliably read `defaultPrevented` synchronously without worrying
            // about waiting for another listener that could cancel it.
            const wasCanceled = invalidEvent?.defaultPrevented;
            if (wasCanceled) {
                return;
            }
            this[onReportValidity](invalidEvent);
            // If an implementation calls invalidEvent.preventDefault() to stop the
            // platform popup from displaying, focusing is also prevented, so we need
            // to manually focus.
            const implementationCanceledFocus = !wasCanceled && invalidEvent?.defaultPrevented;
            if (!implementationCanceledFocus) {
                return;
            }
            // The control should be focused when:
            // - `control.reportValidity()` is called (self-reporting).
            // - a form is reporting validity for its controls and this is the first
            //   invalid control.
            if (this[privateIsSelfReportingValidity] ||
                isFirstInvalidControlInForm(this[_element_internals_js__WEBPACK_IMPORTED_MODULE_1__.internals].form, this)) {
                this.focus();
            }
        }
        [onReportValidity](invalidEvent) {
            throw new Error('Implement [onReportValidity]');
        }
        formAssociatedCallback(form) {
            // can't use super.formAssociatedCallback?.() due to closure
            if (super.formAssociatedCallback) {
                super.formAssociatedCallback(form);
            }
            // Clean up previous form listeners.
            this[privateCleanupFormListeners].abort();
            if (!form) {
                return;
            }
            this[privateCleanupFormListeners] = new AbortController();
            // Add a listener that fires when the form runs constraint validation and
            // the control is valid, so that it may remove its error styles.
            //
            // This happens on `form.reportValidity()` and `form.requestSubmit()`
            // (both when the submit fails and passes).
            addFormReportValidListener(this, form, () => {
                this[privateCallOnReportValidity](null);
            }, this[privateCleanupFormListeners].signal);
        }
    }
    return OnReportValidityElement;
}
/**
 * Add a listener that fires when a form runs constraint validation on a control
 * and it is valid. This is needed to clear previously invalid styles.
 *
 * @param control The control of the form to listen for valid events.
 * @param form The control's form that can run constraint validation.
 * @param onControlValid A listener that is called when the form runs constraint
 *     validation and the control is valid.
 * @param cleanup A cleanup signal to remove the listener.
 */
function addFormReportValidListener(control, form, onControlValid, cleanup) {
    const validateHooks = getFormValidateHooks(form);
    // When a form validates its controls, check if an invalid event is dispatched
    // on the control. If it is not, then inform the control to report its valid
    // state.
    let controlFiredInvalid = false;
    let cleanupInvalidListener;
    let isNextSubmitFromHook = false;
    validateHooks.addEventListener('before', () => {
        isNextSubmitFromHook = true;
        cleanupInvalidListener = new AbortController();
        controlFiredInvalid = false;
        control.addEventListener('invalid', () => {
            controlFiredInvalid = true;
        }, {
            signal: cleanupInvalidListener.signal,
        });
    }, { signal: cleanup });
    validateHooks.addEventListener('after', () => {
        isNextSubmitFromHook = false;
        cleanupInvalidListener?.abort();
        if (controlFiredInvalid) {
            return;
        }
        onControlValid();
    }, { signal: cleanup });
    // The above hooks handle imperatively submitting the form, but not
    // declaratively submitting the form. This happens when:
    // 1. A non-custom element `<button type="submit">` is clicked.
    // 2. Enter is pressed on a non-custom element text editable `<input>`.
    form.addEventListener('submit', () => {
        // This submit was from `form.requestSubmit()`, which already calls the
        // listener.
        if (isNextSubmitFromHook) {
            return;
        }
        onControlValid();
    }, {
        signal: cleanup,
    });
    // Note: it is a known limitation that we cannot detect if a form tries to
    // submit declaratively, but fails to do so because an unrelated sibling
    // control failed its constraint validation.
    //
    // Since we cannot detect when that happens, a previously invalid control may
    // not clear its error styling when it becomes valid again.
    //
    // To work around this, call `form.reportValidity()` when submitting a form
    // declaratively. This can be down on the `<button type="submit">`'s click or
    // the text editable `<input>`'s 'Enter' keydown.
}
const FORM_VALIDATE_HOOKS = new WeakMap();
/**
 * Get a hooks `EventTarget` that dispatches 'before' and 'after' events that
 * fire before a form runs constraint validation and immediately after it
 * finishes running constraint validation on its controls.
 *
 * This happens during `form.reportValidity()` and `form.requestSubmit()`.
 *
 * @param form The form to get or set up hooks for.
 * @return A hooks `EventTarget` to add listeners to.
 */
function getFormValidateHooks(form) {
    if (!FORM_VALIDATE_HOOKS.has(form)) {
        // Patch form methods to add event listener hooks. These are needed to react
        // to form behaviors that do not dispatch events, such as a form asking its
        // controls to report their validity.
        //
        // We should only patch the methods once, since multiple controls and other
        // forces may want to patch this method. We cannot reliably clean it up if
        // there are multiple patched and re-patched methods referring holding
        // references to each other.
        //
        // Instead, we never clean up the patch but add and clean up event listeners
        // added to the hooks after the patch.
        const hooks = new EventTarget();
        FORM_VALIDATE_HOOKS.set(form, hooks);
        // Add hooks to support notifying before and after a form has run constraint
        // validation on its controls.
        // Note: `form.submit()` does not run constraint validation per spec.
        for (const methodName of ['reportValidity', 'requestSubmit']) {
            const superMethod = form[methodName];
            form[methodName] = function () {
                hooks.dispatchEvent(new Event('before'));
                const result = Reflect.apply(superMethod, this, arguments);
                hooks.dispatchEvent(new Event('after'));
                return result;
            };
        }
    }
    return FORM_VALIDATE_HOOKS.get(form);
}
/**
 * Checks if a control is the first invalid control in a form.
 *
 * @param form The control's form. When `null`, the control doesn't have a form
 *     and the method returns true.
 * @param control The control to check.
 * @return True if there is no form or if the control is the form's first
 *     invalid control.
 */
function isFirstInvalidControlInForm(form, control) {
    if (!form) {
        return true;
    }
    let firstInvalidControl;
    for (const element of form.elements) {
        if (element.matches(':invalid')) {
            firstInvalidControl = element;
            break;
        }
    }
    return firstInvalidControl === control;
}
//# sourceMappingURL=on-report-validity.js.map

/***/ }),

/***/ "./node_modules/@material/web/labs/behaviors/validators/checkbox-validator.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@material/web/labs/behaviors/validators/checkbox-validator.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CheckboxValidator: () => (/* binding */ CheckboxValidator)
/* harmony export */ });
/* harmony import */ var _validator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validator.js */ "./node_modules/@material/web/labs/behaviors/validators/validator.js");
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * A validator that provides constraint validation that emulates
 * `<input type="checkbox">` validation.
 */
class CheckboxValidator extends _validator_js__WEBPACK_IMPORTED_MODULE_0__.Validator {
    computeValidity(state) {
        if (!this.checkboxControl) {
            // Lazily create the platform input
            this.checkboxControl = document.createElement('input');
            this.checkboxControl.type = 'checkbox';
        }
        this.checkboxControl.checked = state.checked;
        this.checkboxControl.required = state.required;
        return {
            validity: this.checkboxControl.validity,
            validationMessage: this.checkboxControl.validationMessage,
        };
    }
    equals(prev, next) {
        return prev.checked === next.checked && prev.required === next.required;
    }
    copy({ checked, required }) {
        return { checked, required };
    }
}
//# sourceMappingURL=checkbox-validator.js.map

/***/ }),

/***/ "./node_modules/@material/web/labs/behaviors/validators/radio-validator.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@material/web/labs/behaviors/validators/radio-validator.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RadioValidator: () => (/* binding */ RadioValidator)
/* harmony export */ });
/* harmony import */ var _validator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validator.js */ "./node_modules/@material/web/labs/behaviors/validators/validator.js");
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * A validator that provides constraint validation that emulates
 * `<input type="radio">` validation.
 */
class RadioValidator extends _validator_js__WEBPACK_IMPORTED_MODULE_0__.Validator {
    computeValidity(states) {
        if (!this.radioElement) {
            // Lazily create the radio element
            this.radioElement = document.createElement('input');
            this.radioElement.type = 'radio';
            // A name is required for validation to run
            this.radioElement.name = 'group';
        }
        let isRequired = false;
        let isChecked = false;
        for (const { checked, required } of states) {
            if (required) {
                isRequired = true;
            }
            if (checked) {
                isChecked = true;
            }
        }
        // Firefox v119 doesn't compute grouped radio validation correctly while
        // they are detached from the DOM, which is why we don't render multiple
        // virtual <input>s. Instead, we can check the required/checked states and
        // grab the i18n'd validation message if the value is missing.
        this.radioElement.checked = isChecked;
        this.radioElement.required = isRequired;
        return {
            validity: {
                valueMissing: isRequired && !isChecked,
            },
            validationMessage: this.radioElement.validationMessage,
        };
    }
    equals(prevGroup, nextGroup) {
        if (prevGroup.length !== nextGroup.length) {
            return false;
        }
        for (let i = 0; i < prevGroup.length; i++) {
            const prev = prevGroup[i];
            const next = nextGroup[i];
            if (prev.checked !== next.checked || prev.required !== next.required) {
                return false;
            }
        }
        return true;
    }
    copy(states) {
        // Cast as unknown since typescript does not have enough information to
        // infer that the array always has at least one element.
        return states.map(({ checked, required }) => ({
            checked,
            required,
        }));
    }
}
//# sourceMappingURL=radio-validator.js.map

/***/ }),

/***/ "./node_modules/@material/web/labs/behaviors/validators/select-validator.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@material/web/labs/behaviors/validators/select-validator.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SelectValidator: () => (/* binding */ SelectValidator)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/* harmony import */ var _validator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./validator.js */ "./node_modules/@material/web/labs/behaviors/validators/validator.js");
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */


/**
 * A validator that provides constraint validation that emulates `<select>`
 * validation.
 */
class SelectValidator extends _validator_js__WEBPACK_IMPORTED_MODULE_1__.Validator {
    computeValidity(state) {
        if (!this.selectControl) {
            // Lazily create the platform select
            this.selectControl = document.createElement('select');
        }
        (0,lit__WEBPACK_IMPORTED_MODULE_0__.render)((0,lit__WEBPACK_IMPORTED_MODULE_0__.html) `<option value=${state.value}></option>`, this.selectControl);
        this.selectControl.value = state.value;
        this.selectControl.required = state.required;
        return {
            validity: this.selectControl.validity,
            validationMessage: this.selectControl.validationMessage,
        };
    }
    equals(prev, next) {
        return prev.value === next.value && prev.required === next.required;
    }
    copy({ value, required }) {
        return { value, required };
    }
}
//# sourceMappingURL=select-validator.js.map

/***/ }),

/***/ "./node_modules/@material/web/labs/behaviors/validators/validator.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@material/web/labs/behaviors/validators/validator.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Validator: () => (/* binding */ Validator)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * A class that computes and caches `ValidityStateFlags` for a component with
 * a given `State` interface.
 *
 * Cached performance before computing validity is important since constraint
 * validation must be checked frequently and synchronously when properties
 * change.
 *
 * @template State The expected interface of properties relevant to constraint
 *     validation.
 */
class Validator {
    /**
     * Creates a new validator.
     *
     * @param getCurrentState A callback that returns the current state of
     *     constraint validation-related properties.
     */
    constructor(getCurrentState) {
        this.getCurrentState = getCurrentState;
        /**
         * The current validity state and message. This is cached and returns if
         * constraint validation state does not change.
         */
        this.currentValidity = {
            validity: {},
            validationMessage: '',
        };
    }
    /**
     * Returns the current `ValidityStateFlags` and validation message for the
     * validator.
     *
     * If the constraint validation state has not changed, this will return a
     * cached result. This is important since `getValidity()` can be called
     * frequently in response to synchronous property changes.
     *
     * @return The current validity and validation message.
     */
    getValidity() {
        const state = this.getCurrentState();
        const hasStateChanged = !this.prevState || !this.equals(this.prevState, state);
        if (!hasStateChanged) {
            return this.currentValidity;
        }
        const { validity, validationMessage } = this.computeValidity(state);
        this.prevState = this.copy(state);
        this.currentValidity = {
            validationMessage,
            validity: {
                // Change any `ValidityState` instances into `ValidityStateFlags` since
                // `ValidityState` cannot be easily `{...spread}`.
                badInput: validity.badInput,
                customError: validity.customError,
                patternMismatch: validity.patternMismatch,
                rangeOverflow: validity.rangeOverflow,
                rangeUnderflow: validity.rangeUnderflow,
                stepMismatch: validity.stepMismatch,
                tooLong: validity.tooLong,
                tooShort: validity.tooShort,
                typeMismatch: validity.typeMismatch,
                valueMissing: validity.valueMissing,
            },
        };
        return this.currentValidity;
    }
}
//# sourceMappingURL=validator.js.map

/***/ }),

/***/ "./node_modules/@material/web/list/internal/list-controller.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@material/web/list/internal/list-controller.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ListController: () => (/* binding */ ListController),
/* harmony export */   NavigableKeys: () => (/* binding */ NavigableKeys)
/* harmony export */ });
/* harmony import */ var _list_navigation_helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./list-navigation-helpers.js */ "./node_modules/@material/web/list/internal/list-navigation-helpers.js");
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

// TODO: move this file to List and make List use this
/**
 * Default keys that trigger navigation.
 */
// tslint:disable:enforce-name-casing Following Enum style
const NavigableKeys = {
    ArrowDown: 'ArrowDown',
    ArrowLeft: 'ArrowLeft',
    ArrowUp: 'ArrowUp',
    ArrowRight: 'ArrowRight',
    Home: 'Home',
    End: 'End',
};
/**
 * A controller that handles list keyboard navigation and item management.
 */
class ListController {
    constructor(config) {
        /**
         * Handles keyboard navigation. Should be bound to the node that will act as
         * the List.
         */
        this.handleKeydown = (event) => {
            const key = event.key;
            if (event.defaultPrevented || !this.isNavigableKey(key)) {
                return;
            }
            // do not use this.items directly in upcoming calculations so we don't
            // re-query the DOM unnecessarily
            const items = this.items;
            if (!items.length) {
                return;
            }
            const activeItemRecord = (0,_list_navigation_helpers_js__WEBPACK_IMPORTED_MODULE_0__.getActiveItem)(items, this.isActivatable);
            event.preventDefault();
            const isRtl = this.isRtl();
            const inlinePrevious = isRtl
                ? NavigableKeys.ArrowRight
                : NavigableKeys.ArrowLeft;
            const inlineNext = isRtl
                ? NavigableKeys.ArrowLeft
                : NavigableKeys.ArrowRight;
            let nextActiveItem = null;
            switch (key) {
                // Activate the next item
                case NavigableKeys.ArrowDown:
                case inlineNext:
                    nextActiveItem = (0,_list_navigation_helpers_js__WEBPACK_IMPORTED_MODULE_0__.activateNextItem)(items, activeItemRecord, this.isActivatable, this.wrapNavigation());
                    break;
                // Activate the previous item
                case NavigableKeys.ArrowUp:
                case inlinePrevious:
                    nextActiveItem = (0,_list_navigation_helpers_js__WEBPACK_IMPORTED_MODULE_0__.activatePreviousItem)(items, activeItemRecord, this.isActivatable, this.wrapNavigation());
                    break;
                // Activate the first item
                case NavigableKeys.Home:
                    nextActiveItem = (0,_list_navigation_helpers_js__WEBPACK_IMPORTED_MODULE_0__.activateFirstItem)(items, this.isActivatable);
                    break;
                // Activate the last item
                case NavigableKeys.End:
                    nextActiveItem = (0,_list_navigation_helpers_js__WEBPACK_IMPORTED_MODULE_0__.activateLastItem)(items, this.isActivatable);
                    break;
                default:
                    break;
            }
            if (nextActiveItem &&
                activeItemRecord &&
                activeItemRecord.item !== nextActiveItem) {
                // If a new item was activated, remove the tabindex of the previous
                // activated item.
                activeItemRecord.item.tabIndex = -1;
            }
        };
        /**
         * Listener to be bound to the `deactivate-items` item event.
         */
        this.onDeactivateItems = () => {
            const items = this.items;
            for (const item of items) {
                this.deactivateItem(item);
            }
        };
        /**
         * Listener to be bound to the `request-activation` item event..
         */
        this.onRequestActivation = (event) => {
            this.onDeactivateItems();
            const target = event.target;
            this.activateItem(target);
            target.focus();
        };
        /**
         * Listener to be bound to the `slotchange` event for the slot that renders
         * the items.
         */
        this.onSlotchange = () => {
            const items = this.items;
            // Whether we have encountered an item that has been activated
            let encounteredActivated = false;
            for (const item of items) {
                const isActivated = !item.disabled && item.tabIndex > -1;
                if (isActivated && !encounteredActivated) {
                    encounteredActivated = true;
                    item.tabIndex = 0;
                    continue;
                }
                // Deactivate the rest including disabled
                item.tabIndex = -1;
            }
            if (encounteredActivated) {
                return;
            }
            const firstActivatableItem = (0,_list_navigation_helpers_js__WEBPACK_IMPORTED_MODULE_0__.getFirstActivatableItem)(items, this.isActivatable);
            if (!firstActivatableItem) {
                return;
            }
            firstActivatableItem.tabIndex = 0;
        };
        const { isItem, getPossibleItems, isRtl, deactivateItem, activateItem, isNavigableKey, isActivatable, wrapNavigation, } = config;
        this.isItem = isItem;
        this.getPossibleItems = getPossibleItems;
        this.isRtl = isRtl;
        this.deactivateItem = deactivateItem;
        this.activateItem = activateItem;
        this.isNavigableKey = isNavigableKey;
        this.isActivatable = isActivatable;
        this.wrapNavigation = wrapNavigation ?? (() => true);
    }
    /**
     * The items being managed by the list. Additionally, attempts to see if the
     * object has a sub-item in the `.item` property.
     */
    get items() {
        const maybeItems = this.getPossibleItems();
        const items = [];
        for (const itemOrParent of maybeItems) {
            const isItem = this.isItem(itemOrParent);
            // if the item is a list item, add it to the list of items
            if (isItem) {
                items.push(itemOrParent);
                continue;
            }
            // If the item exposes an `item` property check if it is a list item.
            const subItem = itemOrParent.item;
            if (subItem && this.isItem(subItem)) {
                items.push(subItem);
            }
        }
        return items;
    }
    /**
     * Activates the next item in the list. If at the end of the list, the first
     * item will be activated.
     *
     * @return The activated list item or `null` if there are no items.
     */
    activateNextItem() {
        const items = this.items;
        const activeItemRecord = (0,_list_navigation_helpers_js__WEBPACK_IMPORTED_MODULE_0__.getActiveItem)(items, this.isActivatable);
        if (activeItemRecord) {
            activeItemRecord.item.tabIndex = -1;
        }
        return (0,_list_navigation_helpers_js__WEBPACK_IMPORTED_MODULE_0__.activateNextItem)(items, activeItemRecord, this.isActivatable, this.wrapNavigation());
    }
    /**
     * Activates the previous item in the list. If at the start of the list, the
     * last item will be activated.
     *
     * @return The activated list item or `null` if there are no items.
     */
    activatePreviousItem() {
        const items = this.items;
        const activeItemRecord = (0,_list_navigation_helpers_js__WEBPACK_IMPORTED_MODULE_0__.getActiveItem)(items, this.isActivatable);
        if (activeItemRecord) {
            activeItemRecord.item.tabIndex = -1;
        }
        return (0,_list_navigation_helpers_js__WEBPACK_IMPORTED_MODULE_0__.activatePreviousItem)(items, activeItemRecord, this.isActivatable, this.wrapNavigation());
    }
}
//# sourceMappingURL=list-controller.js.map

/***/ }),

/***/ "./node_modules/@material/web/list/internal/list-navigation-helpers.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@material/web/list/internal/list-navigation-helpers.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   activateFirstItem: () => (/* binding */ activateFirstItem),
/* harmony export */   activateLastItem: () => (/* binding */ activateLastItem),
/* harmony export */   activateNextItem: () => (/* binding */ activateNextItem),
/* harmony export */   activatePreviousItem: () => (/* binding */ activatePreviousItem),
/* harmony export */   createDeactivateItemsEvent: () => (/* binding */ createDeactivateItemsEvent),
/* harmony export */   createRequestActivationEvent: () => (/* binding */ createRequestActivationEvent),
/* harmony export */   deactivateActiveItem: () => (/* binding */ deactivateActiveItem),
/* harmony export */   getActiveItem: () => (/* binding */ getActiveItem),
/* harmony export */   getFirstActivatableItem: () => (/* binding */ getFirstActivatableItem),
/* harmony export */   getLastActivatableItem: () => (/* binding */ getLastActivatableItem),
/* harmony export */   getNextItem: () => (/* binding */ getNextItem),
/* harmony export */   getPrevItem: () => (/* binding */ getPrevItem)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Activates the first non-disabled item of a given array of items.
 *
 * @param items {Array<ListItem>} The items from which to activate the
 *     first item.
 * @param isActivatable Function to determine if an item can be  activated.
 *     Defaults to non-disabled items.
 */
function activateFirstItem(items, isActivatable = (isItemNotDisabled)) {
    // NOTE: These selector functions are static and not on the instance such
    // that multiple operations can be chained and we do not have to re-query
    // the DOM
    const firstItem = getFirstActivatableItem(items, isActivatable);
    if (firstItem) {
        firstItem.tabIndex = 0;
        firstItem.focus();
    }
    return firstItem;
}
/**
 * Activates the last non-disabled item of a given array of items.
 *
 * @param items {Array<ListItem>} The items from which to activate the
 *     last item.
 * @param isActivatable Function to determine if an item can be  activated.
 *     Defaults to non-disabled items.
 * @nocollapse
 */
function activateLastItem(items, isActivatable = (isItemNotDisabled)) {
    const lastItem = getLastActivatableItem(items, isActivatable);
    if (lastItem) {
        lastItem.tabIndex = 0;
        lastItem.focus();
    }
    return lastItem;
}
/**
 * Deactivates the currently active item of a given array of items.
 *
 * @param items {Array<ListItem>} The items from which to deactivate the
 *     active item.
 * @param isActivatable Function to determine if an item can be  activated.
 *     Defaults to non-disabled items.
 * @return A record of the deleselcted activated item including the item and
 *     the index of the item or `null` if none are deactivated.
 * @nocollapse
 */
function deactivateActiveItem(items, isActivatable = (isItemNotDisabled)) {
    const activeItem = getActiveItem(items, isActivatable);
    if (activeItem) {
        activeItem.item.tabIndex = -1;
    }
    return activeItem;
}
/**
 * Retrieves the first activated item of a given array of items.
 *
 * @param items {Array<ListItem>} The items to search.
 * @param isActivatable Function to determine if an item can be  activated.
 *     Defaults to non-disabled items.
 * @return A record of the first activated item including the item and the
 *     index of the item or `null` if none are activated.
 * @nocollapse
 */
function getActiveItem(items, isActivatable = (isItemNotDisabled)) {
    for (let i = 0; i < items.length; i++) {
        const item = items[i];
        if (item.tabIndex === 0 && isActivatable(item)) {
            return {
                item,
                index: i,
            };
        }
    }
    return null;
}
/**
 * Retrieves the first non-disabled item of a given array of items. This
 * the first item that is not disabled.
 *
 * @param items {Array<ListItem>} The items to search.
 * @param isActivatable Function to determine if an item can be  activated.
 *     Defaults to non-disabled items.
 * @return The first activatable item or `null` if none are activatable.
 * @nocollapse
 */
function getFirstActivatableItem(items, isActivatable = (isItemNotDisabled)) {
    for (const item of items) {
        if (isActivatable(item)) {
            return item;
        }
    }
    return null;
}
/**
 * Retrieves the last non-disabled item of a given array of items.
 *
 * @param items {Array<ListItem>} The items to search.
 * @param isActivatable Function to determine if an item can be  activated.
 *     Defaults to non-disabled items.
 * @return The last activatable item or `null` if none are activatable.
 * @nocollapse
 */
function getLastActivatableItem(items, isActivatable = (isItemNotDisabled)) {
    for (let i = items.length - 1; i >= 0; i--) {
        const item = items[i];
        if (isActivatable(item)) {
            return item;
        }
    }
    return null;
}
/**
 * Retrieves the next non-disabled item of a given array of items.
 *
 * @param items {Array<ListItem>} The items to search.
 * @param index {{index: number}} The index to search from.
 * @param isActivatable Function to determine if an item can be  activated.
 *     Defaults to non-disabled items.
 * @param wrap If true, then the next item at the end of the list is the first
 *     item. Defaults to true.
 * @return The next activatable item or `null` if none are activatable.
 */
function getNextItem(items, index, isActivatable = (isItemNotDisabled), wrap = true) {
    for (let i = 1; i < items.length; i++) {
        const nextIndex = (i + index) % items.length;
        if (nextIndex < index && !wrap) {
            // Return if the index loops back to the beginning and not wrapping.
            return null;
        }
        const item = items[nextIndex];
        if (isActivatable(item)) {
            return item;
        }
    }
    return items[index] ? items[index] : null;
}
/**
 * Retrieves the previous non-disabled item of a given array of items.
 *
 * @param items {Array<ListItem>} The items to search.
 * @param index {{index: number}} The index to search from.
 * @param isActivatable Function to determine if an item can be  activated.
 *     Defaults to non-disabled items.
 * @param wrap If true, then the previous item at the beginning of the list is
 *     the last item. Defaults to true.
 * @return The previous activatable item or `null` if none are activatable.
 */
function getPrevItem(items, index, isActivatable = (isItemNotDisabled), wrap = true) {
    for (let i = 1; i < items.length; i++) {
        const prevIndex = (index - i + items.length) % items.length;
        if (prevIndex > index && !wrap) {
            // Return if the index loops back to the end and not wrapping.
            return null;
        }
        const item = items[prevIndex];
        if (isActivatable(item)) {
            return item;
        }
    }
    return items[index] ? items[index] : null;
}
/**
 * Activates the next item and focuses it. If nothing is currently activated,
 * activates the first item.
 */
function activateNextItem(items, activeItemRecord, isActivatable = (isItemNotDisabled), wrap = true) {
    if (activeItemRecord) {
        const next = getNextItem(items, activeItemRecord.index, isActivatable, wrap);
        if (next) {
            next.tabIndex = 0;
            next.focus();
        }
        return next;
    }
    else {
        return activateFirstItem(items, isActivatable);
    }
}
/**
 * Activates the previous item and focuses it. If nothing is currently
 * activated, activates the last item.
 */
function activatePreviousItem(items, activeItemRecord, isActivatable = (isItemNotDisabled), wrap = true) {
    if (activeItemRecord) {
        const prev = getPrevItem(items, activeItemRecord.index, isActivatable, wrap);
        if (prev) {
            prev.tabIndex = 0;
            prev.focus();
        }
        return prev;
    }
    else {
        return activateLastItem(items, isActivatable);
    }
}
/**
 * Creates an event that requests the parent md-list to deactivate all other
 * items.
 */
function createDeactivateItemsEvent() {
    return new Event('deactivate-items', { bubbles: true, composed: true });
}
/**
 * Creates an event that requests the menu to set `tabindex=0` on the item and
 * focus it. We use this pattern because List keeps track of what element is
 * active in the List by maintaining tabindex. We do not want list items
 * to set tabindex on themselves or focus themselves so that we can organize all
 * that logic in the parent List and Menus, and list item stays as dumb as
 * possible.
 */
function createRequestActivationEvent() {
    return new Event('request-activation', { bubbles: true, composed: true });
}
/**
 * The default `isActivatable` function, which checks if an item is not
 * disabled.
 *
 * @param item The item to check.
 * @return true if `item.disabled` is `false.
 */
function isItemNotDisabled(item) {
    return !item.disabled;
}
//# sourceMappingURL=list-navigation-helpers.js.map

/***/ }),

/***/ "./node_modules/@material/web/menu/internal/controllers/shared.js":
/*!************************************************************************!*\
  !*** ./node_modules/@material/web/menu/internal/controllers/shared.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CloseReason: () => (/* binding */ CloseReason),
/* harmony export */   FocusState: () => (/* binding */ FocusState),
/* harmony export */   KeydownCloseKey: () => (/* binding */ KeydownCloseKey),
/* harmony export */   NavigableKey: () => (/* binding */ NavigableKey),
/* harmony export */   SelectionKey: () => (/* binding */ SelectionKey),
/* harmony export */   createActivateTypeaheadEvent: () => (/* binding */ createActivateTypeaheadEvent),
/* harmony export */   createCloseMenuEvent: () => (/* binding */ createCloseMenuEvent),
/* harmony export */   createCloseOnFocusoutEvent: () => (/* binding */ createCloseOnFocusoutEvent),
/* harmony export */   createDeactivateTypeaheadEvent: () => (/* binding */ createDeactivateTypeaheadEvent),
/* harmony export */   createDefaultCloseMenuEvent: () => (/* binding */ createDefaultCloseMenuEvent),
/* harmony export */   createStayOpenOnFocusoutEvent: () => (/* binding */ createStayOpenOnFocusoutEvent),
/* harmony export */   isClosableKey: () => (/* binding */ isClosableKey),
/* harmony export */   isElementInSubtree: () => (/* binding */ isElementInSubtree),
/* harmony export */   isSelectableKey: () => (/* binding */ isSelectableKey)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Creates an event that closes any parent menus.
 */
function createCloseMenuEvent(initiator, reason) {
    return new CustomEvent('close-menu', {
        bubbles: true,
        composed: true,
        detail: { initiator, reason, itemPath: [initiator] },
    });
}
/**
 * Creates an event that signals to the menu that it should stay open on the
 * focusout event.
 */
function createStayOpenOnFocusoutEvent() {
    return new Event('stay-open-on-focusout', { bubbles: true, composed: true });
}
/**
 * Creates an event that signals to the menu that it should close open on the
 * focusout event.
 */
function createCloseOnFocusoutEvent() {
    return new Event('close-on-focusout', { bubbles: true, composed: true });
}
/**
 * Creates a default close menu event used by md-menu.
 */
const createDefaultCloseMenuEvent = (createCloseMenuEvent);
/**
 * Creates an event that requests the given item be selected.
 */
function createDeactivateTypeaheadEvent() {
    return new Event('deactivate-typeahead', { bubbles: true, composed: true });
}
/**
 * Creates an event that requests the typeahead functionality of containing menu
 * be activated.
 */
function createActivateTypeaheadEvent() {
    return new Event('activate-typeahead', { bubbles: true, composed: true });
}
/**
 * Keys that are used to navigate menus.
 */
// tslint:disable-next-line:enforce-name-casing We are mimicking enum style
const NavigableKey = {
    UP: 'ArrowUp',
    DOWN: 'ArrowDown',
    RIGHT: 'ArrowRight',
    LEFT: 'ArrowLeft',
};
/**
 * Keys that are used for selection in menus.
 */
// tslint:disable-next-line:enforce-name-casing We are mimicking enum style
const SelectionKey = {
    SPACE: 'Space',
    ENTER: 'Enter',
};
/**
 * Default close `Reason` kind values.
 */
// tslint:disable-next-line:enforce-name-casing We are mimicking enum style
const CloseReason = {
    CLICK_SELECTION: 'click-selection',
    KEYDOWN: 'keydown',
};
/**
 * Keys that can close menus.
 */
// tslint:disable-next-line:enforce-name-casing We are mimicking enum style
const KeydownCloseKey = {
    ESCAPE: 'Escape',
    SPACE: SelectionKey.SPACE,
    ENTER: SelectionKey.ENTER,
};
/**
 * Determines whether the given key code is a key code that should close the
 * menu.
 *
 * @param code The KeyboardEvent code to check.
 * @return Whether or not the key code is in the predetermined list to close the
 * menu.
 */
function isClosableKey(code) {
    return Object.values(KeydownCloseKey).some((value) => value === code);
}
/**
 * Determines whether the given key code is a key code that should select a menu
 * item.
 *
 * @param code They KeyboardEvent code to check.
 * @return Whether or not the key code is in the predetermined list to select a
 * menu item.
 */
function isSelectableKey(code) {
    return Object.values(SelectionKey).some((value) => value === code);
}
/**
 * Determines whether a target element is contained inside another element's
 * composed tree.
 *
 * @param target The potential contained element.
 * @param container The potential containing element of the target.
 * @returns Whether the target element is contained inside the container's
 * composed subtree
 */
function isElementInSubtree(target, container) {
    // Dispatch a composed, bubbling event to check its path to see if the
    // newly-focused element is contained in container's subtree
    const focusEv = new Event('md-contains', { bubbles: true, composed: true });
    let composedPath = [];
    const listener = (ev) => {
        composedPath = ev.composedPath();
    };
    container.addEventListener('md-contains', listener);
    target.dispatchEvent(focusEv);
    container.removeEventListener('md-contains', listener);
    const isContained = composedPath.length > 0;
    return isContained;
}
/**
 * Element to focus on when menu is first opened.
 */
// tslint:disable-next-line:enforce-name-casing We are mimicking enum style
const FocusState = {
    NONE: 'none',
    LIST_ROOT: 'list-root',
    FIRST_ITEM: 'first-item',
    LAST_ITEM: 'last-item',
};
//# sourceMappingURL=shared.js.map

/***/ }),

/***/ "./node_modules/@material/web/menu/internal/controllers/surfacePositionController.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@material/web/menu/internal/controllers/surfacePositionController.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Corner: () => (/* binding */ Corner),
/* harmony export */   SurfacePositionController: () => (/* binding */ SurfacePositionController)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * An enum of supported Menu corners
 */
// tslint:disable-next-line:enforce-name-casing We are mimicking enum style
const Corner = {
    END_START: 'end-start',
    END_END: 'end-end',
    START_START: 'start-start',
    START_END: 'start-end',
};
/**
 * Given a surface, an anchor, corners, and some options, this surface will
 * calculate the position of a surface to align the two given corners and keep
 * the surface inside the window viewport. It also provides a StyleInfo map that
 * can be applied to the surface to handle visiblility and position.
 */
class SurfacePositionController {
    /**
     * @param host The host to connect the controller to.
     * @param getProperties A function that returns the properties for the
     * controller.
     */
    constructor(host, getProperties) {
        this.host = host;
        this.getProperties = getProperties;
        // The current styles to apply to the surface.
        this.surfaceStylesInternal = {
            'display': 'none',
        };
        // Previous values stored for change detection. Open change detection is
        // calculated separately so initialize it here.
        this.lastValues = {
            isOpen: false,
        };
        this.host.addController(this);
    }
    /**
     * The StyleInfo map to apply to the surface via Lit's stylemap
     */
    get surfaceStyles() {
        return this.surfaceStylesInternal;
    }
    /**
     * Calculates the surface's new position required so that the surface's
     * `surfaceCorner` aligns to the anchor's `anchorCorner` while keeping the
     * surface inside the window viewport. This positioning also respects RTL by
     * checking `getComputedStyle()` on the surface element.
     */
    async position() {
        const { surfaceEl, anchorEl, anchorCorner: anchorCornerRaw, surfaceCorner: surfaceCornerRaw, positioning, xOffset, yOffset, disableBlockFlip, disableInlineFlip, repositionStrategy, } = this.getProperties();
        const anchorCorner = anchorCornerRaw.toLowerCase().trim();
        const surfaceCorner = surfaceCornerRaw.toLowerCase().trim();
        if (!surfaceEl || !anchorEl) {
            return;
        }
        // Store these before we potentially resize the window with the next set of
        // lines
        const windowInnerWidth = window.innerWidth;
        const windowInnerHeight = window.innerHeight;
        const div = document.createElement('div');
        div.style.opacity = '0';
        div.style.position = 'fixed';
        div.style.display = 'block';
        div.style.inset = '0';
        document.body.appendChild(div);
        const scrollbarTestRect = div.getBoundingClientRect();
        div.remove();
        // Calculate the widths of the scrollbars in the inline and block directions
        // to account for window-relative calculations.
        const blockScrollbarHeight = window.innerHeight - scrollbarTestRect.bottom;
        const inlineScrollbarWidth = window.innerWidth - scrollbarTestRect.right;
        // Paint the surface transparently so that we can get the position and the
        // rect info of the surface.
        this.surfaceStylesInternal = {
            'display': 'block',
            'opacity': '0',
        };
        // Wait for it to be visible.
        this.host.requestUpdate();
        await this.host.updateComplete;
        // Safari has a bug that makes popovers render incorrectly if the node is
        // made visible + Animation Frame before calling showPopover().
        // https://bugs.webkit.org/show_bug.cgi?id=264069
        // also the cast is required due to differing TS types in Google and OSS.
        if (surfaceEl.popover &&
            surfaceEl.isConnected) {
            surfaceEl.showPopover();
        }
        const surfaceRect = surfaceEl.getSurfacePositionClientRect
            ? surfaceEl.getSurfacePositionClientRect()
            : surfaceEl.getBoundingClientRect();
        const anchorRect = anchorEl.getSurfacePositionClientRect
            ? anchorEl.getSurfacePositionClientRect()
            : anchorEl.getBoundingClientRect();
        const [surfaceBlock, surfaceInline] = surfaceCorner.split('-');
        const [anchorBlock, anchorInline] = anchorCorner.split('-');
        // LTR depends on the direction of the SURFACE not the anchor.
        const isLTR = getComputedStyle(surfaceEl).direction === 'ltr';
        /*
         * For more on inline and block dimensions, see MDN article:
         * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_logical_properties_and_values
         *
         * ┌───── inline/blockDocumentOffset  inlineScrollbarWidth
         * │       │                                    │
         * │     ┌─▼─────┐                              │Document
         * │    ┌┼───────┴──────────────────────────────┼────────┐
         * │    ││                                      │        │
         * └──► ││ ┌───── inline/blockWindowOffset      │        │
         *      ││ │       │                            ▼        │
         *      ││ │     ┌─▼───┐                 Window┌┐        │
         *      └┤ │    ┌┼─────┴───────────────────────┼│        │
         *       │ │    ││                             ││        │
         *       │ └──► ││  ┌──inline/blockAnchorOffset││        │
         *       │      ││  │     │                    ││        │
         *       │      └┤  │  ┌──▼───┐                ││        │
         *       │       │  │ ┌┼──────┤                ││        │
         *       │       │  └─►│Anchor│                ││        │
         *       │       │    └┴──────┘                ││        │
         *       │       │                             ││        │
         *       │       │     ┌───────────────────────┼┼────┐   │
         *       │       │     │ Surface               ││    │   │
         *       │       │     │                       ││    │   │
         *       │       │     │                       ││    │   │
         *       │       │     │                       ││    │   │
         *       │       │     │                       ││    │   │
         *       │      ┌┼─────┼───────────────────────┼│    │   │
         *       │   ┌─►┴──────┼────────────────────────┘    ├┐  │
         *       │   │         │ inline/blockOOBCorrection   ││  │
         *       │   │         │                         │   ││  │
         *       │   │         │                         ├──►├│  │
         *       │   │         │                         │   ││  │
         *       │   │         └────────────────────────┐▼───┼┘  │
         *       │  blockScrollbarHeight                └────┘   │
         *       │                                               │
         *       └───────────────────────────────────────────────┘
         */
        // Calculate the block positioning properties
        let { blockInset, blockOutOfBoundsCorrection, surfaceBlockProperty } = this.calculateBlock({
            surfaceRect,
            anchorRect,
            anchorBlock,
            surfaceBlock,
            yOffset,
            positioning,
            windowInnerHeight,
            blockScrollbarHeight,
        });
        // If the surface should be out of bounds in the block direction, flip the
        // surface and anchor corner block values and recalculate
        if (blockOutOfBoundsCorrection && !disableBlockFlip) {
            const flippedSurfaceBlock = surfaceBlock === 'start' ? 'end' : 'start';
            const flippedAnchorBlock = anchorBlock === 'start' ? 'end' : 'start';
            const flippedBlock = this.calculateBlock({
                surfaceRect,
                anchorRect,
                anchorBlock: flippedAnchorBlock,
                surfaceBlock: flippedSurfaceBlock,
                yOffset,
                positioning,
                windowInnerHeight,
                blockScrollbarHeight,
            });
            // In the case that the flipped verion would require less out of bounds
            // correcting, use the flipped corner block values
            if (blockOutOfBoundsCorrection > flippedBlock.blockOutOfBoundsCorrection) {
                blockInset = flippedBlock.blockInset;
                blockOutOfBoundsCorrection = flippedBlock.blockOutOfBoundsCorrection;
                surfaceBlockProperty = flippedBlock.surfaceBlockProperty;
            }
        }
        // Calculate the inline positioning properties
        let { inlineInset, inlineOutOfBoundsCorrection, surfaceInlineProperty } = this.calculateInline({
            surfaceRect,
            anchorRect,
            anchorInline,
            surfaceInline,
            xOffset,
            positioning,
            isLTR,
            windowInnerWidth,
            inlineScrollbarWidth,
        });
        // If the surface should be out of bounds in the inline direction, flip the
        // surface and anchor corner inline values and recalculate
        if (inlineOutOfBoundsCorrection && !disableInlineFlip) {
            const flippedSurfaceInline = surfaceInline === 'start' ? 'end' : 'start';
            const flippedAnchorInline = anchorInline === 'start' ? 'end' : 'start';
            const flippedInline = this.calculateInline({
                surfaceRect,
                anchorRect,
                anchorInline: flippedAnchorInline,
                surfaceInline: flippedSurfaceInline,
                xOffset,
                positioning,
                isLTR,
                windowInnerWidth,
                inlineScrollbarWidth,
            });
            // In the case that the flipped verion would require less out of bounds
            // correcting, use the flipped corner inline values
            if (Math.abs(inlineOutOfBoundsCorrection) >
                Math.abs(flippedInline.inlineOutOfBoundsCorrection)) {
                inlineInset = flippedInline.inlineInset;
                inlineOutOfBoundsCorrection = flippedInline.inlineOutOfBoundsCorrection;
                surfaceInlineProperty = flippedInline.surfaceInlineProperty;
            }
        }
        // If we are simply repositioning the surface back inside the viewport,
        // subtract the out of bounds correction values from the positioning.
        if (repositionStrategy === 'move') {
            blockInset = blockInset - blockOutOfBoundsCorrection;
            inlineInset = inlineInset - inlineOutOfBoundsCorrection;
        }
        this.surfaceStylesInternal = {
            'display': 'block',
            'opacity': '1',
            [surfaceBlockProperty]: `${blockInset}px`,
            [surfaceInlineProperty]: `${inlineInset}px`,
        };
        // In the case that we are resizing the surface to stay inside the viewport
        // we need to set height and width on the surface.
        if (repositionStrategy === 'resize') {
            // Add a height property to the styles if there is block height correction
            if (blockOutOfBoundsCorrection) {
                this.surfaceStylesInternal['height'] = `${surfaceRect.height - blockOutOfBoundsCorrection}px`;
            }
            // Add a width property to the styles if there is block height correction
            if (inlineOutOfBoundsCorrection) {
                this.surfaceStylesInternal['width'] = `${surfaceRect.width - inlineOutOfBoundsCorrection}px`;
            }
        }
        this.host.requestUpdate();
    }
    /**
     * Calculates the css property, the inset, and the out of bounds correction
     * for the surface in the block direction.
     */
    calculateBlock(config) {
        const { surfaceRect, anchorRect, anchorBlock, surfaceBlock, yOffset, positioning, windowInnerHeight, blockScrollbarHeight, } = config;
        // We use number booleans to multiply values rather than `if` / ternary
        // statements because it _heavily_ cuts down on nesting and readability
        const relativeToWindow = positioning === 'fixed' || positioning === 'document' ? 1 : 0;
        const relativeToDocument = positioning === 'document' ? 1 : 0;
        const isSurfaceBlockStart = surfaceBlock === 'start' ? 1 : 0;
        const isSurfaceBlockEnd = surfaceBlock === 'end' ? 1 : 0;
        const isOneBlockEnd = anchorBlock !== surfaceBlock ? 1 : 0;
        // Whether or not to apply the height of the anchor
        const blockAnchorOffset = isOneBlockEnd * anchorRect.height + yOffset;
        // The absolute block position of the anchor relative to window
        const blockTopLayerOffset = isSurfaceBlockStart * anchorRect.top +
            isSurfaceBlockEnd *
                (windowInnerHeight - anchorRect.bottom - blockScrollbarHeight);
        const blockDocumentOffset = isSurfaceBlockStart * window.scrollY - isSurfaceBlockEnd * window.scrollY;
        // If the surface's block would be out of bounds of the window, move it back
        // in
        const blockOutOfBoundsCorrection = Math.abs(Math.min(0, windowInnerHeight -
            blockTopLayerOffset -
            blockAnchorOffset -
            surfaceRect.height));
        // The block logical value of the surface
        const blockInset = relativeToWindow * blockTopLayerOffset +
            relativeToDocument * blockDocumentOffset +
            blockAnchorOffset;
        const surfaceBlockProperty = surfaceBlock === 'start' ? 'inset-block-start' : 'inset-block-end';
        return { blockInset, blockOutOfBoundsCorrection, surfaceBlockProperty };
    }
    /**
     * Calculates the css property, the inset, and the out of bounds correction
     * for the surface in the inline direction.
     */
    calculateInline(config) {
        const { isLTR: isLTRBool, surfaceInline, anchorInline, anchorRect, surfaceRect, xOffset, positioning, windowInnerWidth, inlineScrollbarWidth, } = config;
        // We use number booleans to multiply values rather than `if` / ternary
        // statements because it _heavily_ cuts down on nesting and readability
        const relativeToWindow = positioning === 'fixed' || positioning === 'document' ? 1 : 0;
        const relativeToDocument = positioning === 'document' ? 1 : 0;
        const isLTR = isLTRBool ? 1 : 0;
        const isRTL = isLTRBool ? 0 : 1;
        const isSurfaceInlineStart = surfaceInline === 'start' ? 1 : 0;
        const isSurfaceInlineEnd = surfaceInline === 'end' ? 1 : 0;
        const isOneInlineEnd = anchorInline !== surfaceInline ? 1 : 0;
        // Whether or not to apply the width of the anchor
        const inlineAnchorOffset = isOneInlineEnd * anchorRect.width + xOffset;
        // The inline position of the anchor relative to window in LTR
        const inlineTopLayerOffsetLTR = isSurfaceInlineStart * anchorRect.left +
            isSurfaceInlineEnd *
                (windowInnerWidth - anchorRect.right - inlineScrollbarWidth);
        // The inline position of the anchor relative to window in RTL
        const inlineTopLayerOffsetRTL = isSurfaceInlineStart *
            (windowInnerWidth - anchorRect.right - inlineScrollbarWidth) +
            isSurfaceInlineEnd * anchorRect.left;
        // The inline position of the anchor relative to window
        const inlineTopLayerOffset = isLTR * inlineTopLayerOffsetLTR + isRTL * inlineTopLayerOffsetRTL;
        // The inline position of the anchor relative to window in LTR
        const inlineDocumentOffsetLTR = isSurfaceInlineStart * window.scrollX -
            isSurfaceInlineEnd * window.scrollX;
        // The inline position of the anchor relative to window in RTL
        const inlineDocumentOffsetRTL = isSurfaceInlineEnd * window.scrollX -
            isSurfaceInlineStart * window.scrollX;
        // The inline position of the anchor relative to window
        const inlineDocumentOffset = isLTR * inlineDocumentOffsetLTR + isRTL * inlineDocumentOffsetRTL;
        // If the surface's inline would be out of bounds of the window, move it
        // back in
        const inlineOutOfBoundsCorrection = Math.abs(Math.min(0, windowInnerWidth -
            inlineTopLayerOffset -
            inlineAnchorOffset -
            surfaceRect.width));
        // The inline logical value of the surface
        const inlineInset = relativeToWindow * inlineTopLayerOffset +
            inlineAnchorOffset +
            relativeToDocument * inlineDocumentOffset;
        let surfaceInlineProperty = surfaceInline === 'start' ? 'inset-inline-start' : 'inset-inline-end';
        // There are cases where the element is RTL but the root of the page is not.
        // In these cases we want to not use logical properties.
        if (positioning === 'document' || positioning === 'fixed') {
            if ((surfaceInline === 'start' && isLTRBool) ||
                (surfaceInline === 'end' && !isLTRBool)) {
                surfaceInlineProperty = 'left';
            }
            else {
                surfaceInlineProperty = 'right';
            }
        }
        return {
            inlineInset,
            inlineOutOfBoundsCorrection,
            surfaceInlineProperty,
        };
    }
    hostUpdate() {
        this.onUpdate();
    }
    hostUpdated() {
        this.onUpdate();
    }
    /**
     * Checks whether the properties passed into the controller have changed since
     * the last positioning. If so, it will reposition if the surface is open or
     * close it if the surface should close.
     */
    async onUpdate() {
        const props = this.getProperties();
        let hasChanged = false;
        for (const [key, value] of Object.entries(props)) {
            // tslint:disable-next-line
            hasChanged = hasChanged || value !== this.lastValues[key];
            if (hasChanged)
                break;
        }
        const openChanged = this.lastValues.isOpen !== props.isOpen;
        const hasAnchor = !!props.anchorEl;
        const hasSurface = !!props.surfaceEl;
        if (hasChanged && hasAnchor && hasSurface) {
            // Only update isOpen, because if it's closed, we do not want to waste
            // time on a useless reposition calculation. So save the other "dirty"
            // values until next time it opens.
            this.lastValues.isOpen = props.isOpen;
            if (props.isOpen) {
                // We are going to do a reposition, so save the prop values for future
                // dirty checking.
                this.lastValues = props;
                await this.position();
                props.onOpen();
            }
            else if (openChanged) {
                await props.beforeClose();
                this.close();
                props.onClose();
            }
        }
    }
    /**
     * Hides the surface.
     */
    close() {
        this.surfaceStylesInternal = {
            'display': 'none',
        };
        this.host.requestUpdate();
        const surfaceEl = this.getProperties().surfaceEl;
        // The following type casts are required due to differing TS types in Google
        // and open source.
        if (surfaceEl?.popover &&
            surfaceEl?.isConnected) {
            surfaceEl.hidePopover();
        }
    }
}
//# sourceMappingURL=surfacePositionController.js.map

/***/ }),

/***/ "./node_modules/@material/web/menu/internal/controllers/typeaheadController.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@material/web/menu/internal/controllers/typeaheadController.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TYPEAHEAD_RECORD: () => (/* binding */ TYPEAHEAD_RECORD),
/* harmony export */   TypeaheadController: () => (/* binding */ TypeaheadController)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Indicies to access the TypeaheadRecord tuple type.
 */
const TYPEAHEAD_RECORD = {
    INDEX: 0,
    ITEM: 1,
    TEXT: 2,
};
/**
 * This controller listens to `keydown` events and searches the header text of
 * an array of `MenuItem`s with the corresponding entered keys within the buffer
 * time and activates the item.
 *
 * @example
 * ```ts
 * const typeaheadController = new TypeaheadController(() => ({
 *   typeaheadBufferTime: 50,
 *   getItems: () => Array.from(document.querySelectorAll('md-menu-item'))
 * }));
 * html`
 *   <div
 *       @keydown=${typeaheadController.onKeydown}
 *       tabindex="0"
 *       class="activeItemText">
 *     <!-- focusable element that will receive keydown events -->
 *     Apple
 *   </div>
 *   <div>
 *     <md-menu-item active header="Apple"></md-menu-item>
 *     <md-menu-item header="Apricot"></md-menu-item>
 *     <md-menu-item header="Banana"></md-menu-item>
 *     <md-menu-item header="Olive"></md-menu-item>
 *     <md-menu-item header="Orange"></md-menu-item>
 *   </div>
 * `;
 * ```
 */
class TypeaheadController {
    /**
     * @param getProperties A function that returns the options of the typeahead
     * controller:
     *
     * {
     *   getItems: A function that returns an array of menu items to be searched.
     *   typeaheadBufferTime: The maximum time between each keystroke to keep the
     *       current type buffer alive.
     * }
     */
    constructor(getProperties) {
        this.getProperties = getProperties;
        /**
         * Array of tuples that helps with indexing.
         */
        this.typeaheadRecords = [];
        /**
         * Currently-typed text since last buffer timeout
         */
        this.typaheadBuffer = '';
        /**
         * The timeout id from the current buffer's setTimeout
         */
        this.cancelTypeaheadTimeout = 0;
        /**
         * If we are currently "typing"
         */
        this.isTypingAhead = false;
        /**
         * The record of the last active item.
         */
        this.lastActiveRecord = null;
        /**
         * Apply this listener to the element that will receive `keydown` events that
         * should trigger this controller.
         *
         * @param event The native browser `KeyboardEvent` from the `keydown` event.
         */
        this.onKeydown = (event) => {
            if (this.isTypingAhead) {
                this.typeahead(event);
            }
            else {
                this.beginTypeahead(event);
            }
        };
        /**
         * Ends the current typeahead and clears the buffer.
         */
        this.endTypeahead = () => {
            this.isTypingAhead = false;
            this.typaheadBuffer = '';
            this.typeaheadRecords = [];
        };
    }
    get items() {
        return this.getProperties().getItems();
    }
    get active() {
        return this.getProperties().active;
    }
    /**
     * Sets up typingahead
     */
    beginTypeahead(event) {
        if (!this.active) {
            return;
        }
        // We don't want to typeahead if the _beginning_ of the typeahead is a menu
        // navigation, or a selection. We will handle "Space" only if it's in the
        // middle of a typeahead
        if (event.code === 'Space' ||
            event.code === 'Enter' ||
            event.code.startsWith('Arrow') ||
            event.code === 'Escape') {
            return;
        }
        this.isTypingAhead = true;
        // Generates the record array data structure which is the index, the element
        // and a normalized header.
        this.typeaheadRecords = this.items.map((el, index) => [
            index,
            el,
            el.typeaheadText.trim().toLowerCase(),
        ]);
        this.lastActiveRecord =
            this.typeaheadRecords.find((record) => record[TYPEAHEAD_RECORD.ITEM].tabIndex === 0) ?? null;
        if (this.lastActiveRecord) {
            this.lastActiveRecord[TYPEAHEAD_RECORD.ITEM].tabIndex = -1;
        }
        this.typeahead(event);
    }
    /**
     * Performs the typeahead. Based on the normalized items and the current text
     * buffer, finds the _next_ item with matching text and activates it.
     *
     * @example
     *
     * items: Apple, Banana, Olive, Orange, Cucumber
     * buffer: ''
     * user types: o
     *
     * activates Olive
     *
     * @example
     *
     * items: Apple, Banana, Olive (active), Orange, Cucumber
     * buffer: 'o'
     * user types: l
     *
     * activates Olive
     *
     * @example
     *
     * items: Apple, Banana, Olive (active), Orange, Cucumber
     * buffer: ''
     * user types: o
     *
     * activates Orange
     *
     * @example
     *
     * items: Apple, Banana, Olive, Orange (active), Cucumber
     * buffer: ''
     * user types: o
     *
     * activates Olive
     */
    typeahead(event) {
        if (event.defaultPrevented)
            return;
        clearTimeout(this.cancelTypeaheadTimeout);
        // Stop typingahead if one of the navigation or selection keys (except for
        // Space) are pressed
        if (event.code === 'Enter' ||
            event.code.startsWith('Arrow') ||
            event.code === 'Escape') {
            this.endTypeahead();
            if (this.lastActiveRecord) {
                this.lastActiveRecord[TYPEAHEAD_RECORD.ITEM].tabIndex = -1;
            }
            return;
        }
        // If Space is pressed, prevent it from selecting and closing the menu
        if (event.code === 'Space') {
            event.preventDefault();
        }
        // Start up a new keystroke buffer timeout
        this.cancelTypeaheadTimeout = setTimeout(this.endTypeahead, this.getProperties().typeaheadBufferTime);
        this.typaheadBuffer += event.key.toLowerCase();
        const lastActiveIndex = this.lastActiveRecord
            ? this.lastActiveRecord[TYPEAHEAD_RECORD.INDEX]
            : -1;
        const numRecords = this.typeaheadRecords.length;
        /**
         * Sorting function that will resort the items starting with the given index
         *
         * @example
         *
         * this.typeaheadRecords =
         * 0: [0, <reference>, 'apple']
         * 1: [1, <reference>, 'apricot']
         * 2: [2, <reference>, 'banana']
         * 3: [3, <reference>, 'olive'] <-- lastActiveIndex
         * 4: [4, <reference>, 'orange']
         * 5: [5, <reference>, 'strawberry']
         *
         * this.typeaheadRecords.sort((a,b) => rebaseIndexOnActive(a)
         *                                       - rebaseIndexOnActive(b)) ===
         * 0: [3, <reference>, 'olive'] <-- lastActiveIndex
         * 1: [4, <reference>, 'orange']
         * 2: [5, <reference>, 'strawberry']
         * 3: [0, <reference>, 'apple']
         * 4: [1, <reference>, 'apricot']
         * 5: [2, <reference>, 'banana']
         */
        const rebaseIndexOnActive = (record) => {
            return ((record[TYPEAHEAD_RECORD.INDEX] + numRecords - lastActiveIndex) %
                numRecords);
        };
        // records filtered and sorted / rebased around the last active index
        const matchingRecords = this.typeaheadRecords
            .filter((record) => !record[TYPEAHEAD_RECORD.ITEM].disabled &&
            record[TYPEAHEAD_RECORD.TEXT].startsWith(this.typaheadBuffer))
            .sort((a, b) => rebaseIndexOnActive(a) - rebaseIndexOnActive(b));
        // Just leave if there's nothing that matches. Native select will just
        // choose the first thing that starts with the next letter in the alphabet
        // but that's out of scope and hard to localize
        if (matchingRecords.length === 0) {
            clearTimeout(this.cancelTypeaheadTimeout);
            if (this.lastActiveRecord) {
                this.lastActiveRecord[TYPEAHEAD_RECORD.ITEM].tabIndex = -1;
            }
            this.endTypeahead();
            return;
        }
        const isNewQuery = this.typaheadBuffer.length === 1;
        let nextRecord;
        // This is likely the case that someone is trying to "tab" through different
        // entries that start with the same letter
        if (this.lastActiveRecord === matchingRecords[0] && isNewQuery) {
            nextRecord = matchingRecords[1] ?? matchingRecords[0];
        }
        else {
            nextRecord = matchingRecords[0];
        }
        if (this.lastActiveRecord) {
            this.lastActiveRecord[TYPEAHEAD_RECORD.ITEM].tabIndex = -1;
        }
        this.lastActiveRecord = nextRecord;
        nextRecord[TYPEAHEAD_RECORD.ITEM].tabIndex = 0;
        nextRecord[TYPEAHEAD_RECORD.ITEM].focus();
        return;
    }
}
//# sourceMappingURL=typeaheadController.js.map

/***/ }),

/***/ "./node_modules/@material/web/menu/internal/menu-styles.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@material/web/menu/internal/menu-styles.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   styles: () => (/* binding */ styles)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
// Generated stylesheet for ./menu/internal/menu-styles.css.

const styles = (0,lit__WEBPACK_IMPORTED_MODULE_0__.css) `:host{--md-elevation-level: var(--md-menu-container-elevation, 2);--md-elevation-shadow-color: var(--md-menu-container-shadow-color, var(--md-sys-color-shadow, #000));min-width:112px;color:unset;display:contents}md-focus-ring{--md-focus-ring-shape: var(--md-menu-container-shape, var(--md-sys-shape-corner-extra-small, 4px))}.menu{border-radius:var(--md-menu-container-shape, var(--md-sys-shape-corner-extra-small, 4px));display:none;inset:auto;border:none;padding:0px;overflow:visible;background-color:rgba(0,0,0,0);color:inherit;opacity:0;z-index:20;position:absolute;user-select:none;max-height:inherit;height:inherit;min-width:inherit;max-width:inherit;scrollbar-width:inherit}.menu::backdrop{display:none}.fixed{position:fixed}.items{display:block;list-style-type:none;margin:0;outline:none;box-sizing:border-box;background-color:var(--md-menu-container-color, var(--md-sys-color-surface-container, #f3edf7));height:inherit;max-height:inherit;overflow:auto;min-width:inherit;max-width:inherit;border-radius:inherit;scrollbar-width:inherit}.item-padding{padding-block:var(--md-menu-top-space, 8px) var(--md-menu-bottom-space, 8px)}.has-overflow:not([popover]) .items{overflow:visible}.has-overflow.animating .items,.animating .items{overflow:hidden}.has-overflow.animating .items{pointer-events:none}.animating ::slotted(.md-menu-hidden){opacity:0}slot{display:block;height:inherit;max-height:inherit}::slotted(:is(md-divider,[role=separator])){margin:8px 0}@media(forced-colors: active){.menu{border-style:solid;border-color:CanvasText;border-width:1px}}
`;
//# sourceMappingURL=menu-styles.js.map

/***/ }),

/***/ "./node_modules/@material/web/menu/internal/menu.js":
/*!**********************************************************!*\
  !*** ./node_modules/@material/web/menu/internal/menu.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Corner: () => (/* reexport safe */ _controllers_surfacePositionController_js__WEBPACK_IMPORTED_MODULE_10__.Corner),
/* harmony export */   DEFAULT_TYPEAHEAD_BUFFER_TIME: () => (/* binding */ DEFAULT_TYPEAHEAD_BUFFER_TIME),
/* harmony export */   Menu: () => (/* binding */ Menu)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _elevation_elevation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../elevation/elevation.js */ "./node_modules/@material/web/elevation/elevation.js");
/* harmony import */ var _focus_md_focus_ring_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../focus/md-focus-ring.js */ "./node_modules/@material/web/focus/md-focus-ring.js");
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lit/decorators.js */ "./node_modules/lit/decorators.js");
/* harmony import */ var lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lit/directives/class-map.js */ "./node_modules/lit/directives/class-map.js");
/* harmony import */ var lit_directives_style_map_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lit/directives/style-map.js */ "./node_modules/lit/directives/style-map.js");
/* harmony import */ var _internal_motion_animation_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../internal/motion/animation.js */ "./node_modules/@material/web/internal/motion/animation.js");
/* harmony import */ var _list_internal_list_controller_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../list/internal/list-controller.js */ "./node_modules/@material/web/list/internal/list-controller.js");
/* harmony import */ var _list_internal_list_navigation_helpers_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../list/internal/list-navigation-helpers.js */ "./node_modules/@material/web/list/internal/list-navigation-helpers.js");
/* harmony import */ var _controllers_shared_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./controllers/shared.js */ "./node_modules/@material/web/menu/internal/controllers/shared.js");
/* harmony import */ var _controllers_surfacePositionController_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./controllers/surfacePositionController.js */ "./node_modules/@material/web/menu/internal/controllers/surfacePositionController.js");
/* harmony import */ var _controllers_typeaheadController_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./controllers/typeaheadController.js */ "./node_modules/@material/web/menu/internal/controllers/typeaheadController.js");
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */














/**
 * The default value for the typeahead buffer time in Milliseconds.
 */
const DEFAULT_TYPEAHEAD_BUFFER_TIME = 200;
const submenuNavKeys = new Set([
    _list_internal_list_controller_js__WEBPACK_IMPORTED_MODULE_7__.NavigableKeys.ArrowDown,
    _list_internal_list_controller_js__WEBPACK_IMPORTED_MODULE_7__.NavigableKeys.ArrowUp,
    _list_internal_list_controller_js__WEBPACK_IMPORTED_MODULE_7__.NavigableKeys.Home,
    _list_internal_list_controller_js__WEBPACK_IMPORTED_MODULE_7__.NavigableKeys.End,
]);
const menuNavKeys = new Set([
    _list_internal_list_controller_js__WEBPACK_IMPORTED_MODULE_7__.NavigableKeys.ArrowLeft,
    _list_internal_list_controller_js__WEBPACK_IMPORTED_MODULE_7__.NavigableKeys.ArrowRight,
    ...submenuNavKeys,
]);
/**
 * Gets the currently focused element on the page.
 *
 * @param activeDoc The document or shadowroot from which to start the search.
 *    Defaults to `window.document`
 * @return Returns the currently deeply focused element or `null` if none.
 */
function getFocusedElement(activeDoc = document) {
    let activeEl = activeDoc.activeElement;
    // Check for activeElement in the case that an element with a shadow root host
    // is currently focused.
    while (activeEl && activeEl?.shadowRoot?.activeElement) {
        activeEl = activeEl.shadowRoot.activeElement;
    }
    return activeEl;
}
/**
 * @fires opening {Event} Fired before the opening animation begins
 * @fires opened {Event} Fired once the menu is open, after any animations
 * @fires closing {Event} Fired before the closing animation begins
 * @fires closed {Event} Fired once the menu is closed, after any animations
 */
class Menu extends lit__WEBPACK_IMPORTED_MODULE_2__.LitElement {
    /**
     * Whether the menu is animating upwards or downwards when opening. This is
     * helpful for calculating some animation calculations.
     */
    get openDirection() {
        const menuCornerBlock = this.menuCorner.split('-')[0];
        return menuCornerBlock === 'start' ? 'DOWN' : 'UP';
    }
    /**
     * The element which the menu should align to. If `anchor` is set to a
     * non-empty idref string, then `anchorEl` will resolve to the element with
     * the given id in the same root node. Otherwise, `null`.
     */
    get anchorElement() {
        if (this.anchor) {
            return this.getRootNode().querySelector(`#${this.anchor}`);
        }
        return this.currentAnchorElement;
    }
    set anchorElement(element) {
        this.currentAnchorElement = element;
        this.requestUpdate('anchorElement');
    }
    constructor() {
        super();
        /**
         * The ID of the element in the same root node in which the menu should align
         * to. Overrides setting `anchorElement = elementReference`.
         *
         * __NOTE__: anchor or anchorElement must either be an HTMLElement or resolve
         * to an HTMLElement in order for menu to open.
         */
        this.anchor = '';
        /**
         * Whether the positioning algorithm should calculate relative to the parent
         * of the anchor element (`absolute`), relative to the window (`fixed`), or
         * relative to the document (`document`). `popover` will use the popover API
         * to render the menu in the top-layer. If your browser does not support the
         * popover API, it will fall back to `fixed`.
         *
         * __Examples for `position = 'fixed'`:__
         *
         * - If there is no `position:relative` in the given parent tree and the
         *   surface is `position:absolute`
         * - If the surface is `position:fixed`
         * - If the surface is in the "top layer"
         * - The anchor and the surface do not share a common `position:relative`
         *   ancestor
         *
         * When using `positioning=fixed`, in most cases, the menu should position
         * itself above most other `position:absolute` or `position:fixed` elements
         * when placed inside of them. e.g. using a menu inside of an `md-dialog`.
         *
         * __NOTE__: Fixed menus will not scroll with the page and will be fixed to
         * the window instead.
         *
         * __Examples for `position = 'document'`:__
         *
         * - There is no parent that creates a relative positioning context e.g.
         *   `position: relative`, `position: absolute`, `transform: translate(x, y)`,
         *   etc.
         * - You put the effort into hoisting the menu to the top of the DOM like the
         *   end of the `<body>` to render over everything or in a top-layer.
         * - You are reusing a single `md-menu` element that dynamically renders
         *   content.
         *
         * __Examples for `position = 'popover'`:__
         *
         * - Your browser supports `popover`.
         * - Most cases. Once popover is in browsers, this will become the default.
         */
        this.positioning = 'absolute';
        /**
         * Skips the opening and closing animations.
         */
        this.quick = false;
        /**
         * Displays overflow content like a submenu. Not required in most cases when
         * using `positioning="popover"`.
         *
         * __NOTE__: This may cause adverse effects if you set
         * `md-menu {max-height:...}`
         * and have items overflowing items in the "y" direction.
         */
        this.hasOverflow = false;
        /**
         * Opens the menu and makes it visible. Alternative to the `.show()` and
         * `.close()` methods
         */
        this.open = false;
        /**
         * Offsets the menu's inline alignment from the anchor by the given number in
         * pixels. This value is direction aware and will follow the LTR / RTL
         * direction.
         *
         * e.g. LTR: positive -> right, negative -> left
         *      RTL: positive -> left, negative -> right
         */
        this.xOffset = 0;
        /**
         * Offsets the menu's block alignment from the anchor by the given number in
         * pixels.
         *
         * e.g. positive -> down, negative -> up
         */
        this.yOffset = 0;
        /**
         * Disable the `flip` behavior that usually happens on the horizontal axis
         * when the surface would render outside the viewport.
         */
        this.noHorizontalFlip = false;
        /**
         * Disable the `flip` behavior that usually happens on the vertical axis when
         * the surface would render outside the viewport.
         */
        this.noVerticalFlip = false;
        /**
         * The max time between the keystrokes of the typeahead menu behavior before
         * it clears the typeahead buffer.
         */
        this.typeaheadDelay = DEFAULT_TYPEAHEAD_BUFFER_TIME;
        /**
         * The corner of the anchor which to align the menu in the standard logical
         * property style of <block>-<inline> e.g. `'end-start'`.
         *
         * NOTE: This value may not be respected by the menu positioning algorithm
         * if the menu would render outisde the viewport.
         * Use `no-horizontal-flip` or `no-vertical-flip` to force the usage of the value
         */
        this.anchorCorner = _controllers_surfacePositionController_js__WEBPACK_IMPORTED_MODULE_10__.Corner.END_START;
        /**
         * The corner of the menu which to align the anchor in the standard logical
         * property style of <block>-<inline> e.g. `'start-start'`.
         *
         * NOTE: This value may not be respected by the menu positioning algorithm
         * if the menu would render outisde the viewport.
         * Use `no-horizontal-flip` or `no-vertical-flip` to force the usage of the value
         */
        this.menuCorner = _controllers_surfacePositionController_js__WEBPACK_IMPORTED_MODULE_10__.Corner.START_START;
        /**
         * Keeps the user clicks outside the menu.
         *
         * NOTE: clicking outside may still cause focusout to close the menu so see
         * `stayOpenOnFocusout`.
         */
        this.stayOpenOnOutsideClick = false;
        /**
         * Keeps the menu open when focus leaves the menu's composed subtree.
         *
         * NOTE: Focusout behavior will stop propagation of the focusout event. Set
         * this property to true to opt-out of menu's focusout handling altogether.
         */
        this.stayOpenOnFocusout = false;
        /**
         * After closing, does not restore focus to the last focused element before
         * the menu was opened.
         */
        this.skipRestoreFocus = false;
        /**
         * The element that should be focused by default once opened.
         *
         * NOTE: When setting default focus to 'LIST_ROOT', remember to change
         * `tabindex` to `0` and change md-menu's display to something other than
         * `display: contents` when necessary.
         */
        this.defaultFocus = _controllers_shared_js__WEBPACK_IMPORTED_MODULE_9__.FocusState.FIRST_ITEM;
        /**
         * Turns off navigation wrapping. By default, navigating past the end of the
         * menu items will wrap focus back to the beginning and vice versa. Use this
         * for ARIA patterns that do not wrap focus, like combobox.
         */
        this.noNavigationWrap = false;
        this.typeaheadActive = true;
        /**
         * Whether or not the current menu is a submenu and should not handle specific
         * navigation keys.
         *
         * @export
         */
        this.isSubmenu = false;
        /**
         * The event path of the last window pointerdown event.
         */
        this.pointerPath = [];
        /**
         * Whether or not the menu is repositoining due to window / document resize
         */
        this.isRepositioning = false;
        this.openCloseAnimationSignal = (0,_internal_motion_animation_js__WEBPACK_IMPORTED_MODULE_6__.createAnimationSignal)();
        this.listController = new _list_internal_list_controller_js__WEBPACK_IMPORTED_MODULE_7__.ListController({
            isItem: (maybeItem) => {
                return maybeItem.hasAttribute('md-menu-item');
            },
            getPossibleItems: () => this.slotItems,
            isRtl: () => getComputedStyle(this).direction === 'rtl',
            deactivateItem: (item) => {
                item.selected = false;
                item.tabIndex = -1;
            },
            activateItem: (item) => {
                item.selected = true;
                item.tabIndex = 0;
            },
            isNavigableKey: (key) => {
                if (!this.isSubmenu) {
                    return menuNavKeys.has(key);
                }
                const isRtl = getComputedStyle(this).direction === 'rtl';
                // we want md-submenu to handle the submenu's left/right arrow exit
                // key so it can close the menu instead of navigate the list.
                // Therefore we need to include all keys but left/right arrow close
                // key
                const arrowOpen = isRtl
                    ? _list_internal_list_controller_js__WEBPACK_IMPORTED_MODULE_7__.NavigableKeys.ArrowLeft
                    : _list_internal_list_controller_js__WEBPACK_IMPORTED_MODULE_7__.NavigableKeys.ArrowRight;
                if (key === arrowOpen) {
                    return true;
                }
                return submenuNavKeys.has(key);
            },
            wrapNavigation: () => !this.noNavigationWrap,
        });
        /**
         * The element that was focused before the menu opened.
         */
        this.lastFocusedElement = null;
        /**
         * Handles typeahead navigation through the menu.
         */
        this.typeaheadController = new _controllers_typeaheadController_js__WEBPACK_IMPORTED_MODULE_11__.TypeaheadController(() => {
            return {
                getItems: () => this.items,
                typeaheadBufferTime: this.typeaheadDelay,
                active: this.typeaheadActive,
            };
        });
        this.currentAnchorElement = null;
        this.internals = 
        // Cast needed for closure
        this.attachInternals();
        /**
         * Handles positioning the surface and aligning it to the anchor as well as
         * keeping it in the viewport.
         */
        this.menuPositionController = new _controllers_surfacePositionController_js__WEBPACK_IMPORTED_MODULE_10__.SurfacePositionController(this, () => {
            return {
                anchorCorner: this.anchorCorner,
                surfaceCorner: this.menuCorner,
                surfaceEl: this.surfaceEl,
                anchorEl: this.anchorElement,
                positioning: this.positioning === 'popover' ? 'document' : this.positioning,
                isOpen: this.open,
                xOffset: this.xOffset,
                yOffset: this.yOffset,
                disableBlockFlip: this.noVerticalFlip,
                disableInlineFlip: this.noHorizontalFlip,
                onOpen: this.onOpened,
                beforeClose: this.beforeClose,
                onClose: this.onClosed,
                // We can't resize components that have overflow like menus with
                // submenus because the overflow-y will show menu items / content
                // outside the bounds of the menu. Popover API fixes this because each
                // submenu is hoisted to the top-layer and are not considered overflow
                // content.
                repositionStrategy: this.hasOverflow && this.positioning !== 'popover'
                    ? 'move'
                    : 'resize',
            };
        });
        this.onWindowResize = () => {
            if (this.isRepositioning ||
                (this.positioning !== 'document' &&
                    this.positioning !== 'fixed' &&
                    this.positioning !== 'popover')) {
                return;
            }
            this.isRepositioning = true;
            this.reposition();
            this.isRepositioning = false;
        };
        this.handleFocusout = async (event) => {
            const anchorEl = this.anchorElement;
            // Do not close if we focused out by clicking on the anchor element. We
            // can't assume anchor buttons can be the related target because of iOS does
            // not focus buttons.
            if (this.stayOpenOnFocusout ||
                !this.open ||
                this.pointerPath.includes(anchorEl)) {
                return;
            }
            if (event.relatedTarget) {
                // Don't close the menu if we are switching focus between menu,
                // md-menu-item, and md-list or if the anchor was click focused, but check
                // if length of pointerPath is 0 because that means something was at least
                // clicked (shift+tab case).
                if ((0,_controllers_shared_js__WEBPACK_IMPORTED_MODULE_9__.isElementInSubtree)(event.relatedTarget, this) ||
                    (this.pointerPath.length !== 0 &&
                        (0,_controllers_shared_js__WEBPACK_IMPORTED_MODULE_9__.isElementInSubtree)(event.relatedTarget, anchorEl))) {
                    return;
                }
            }
            else if (this.pointerPath.includes(this)) {
                // If menu tabindex == -1 and the user clicks on the menu or a divider, we
                // want to keep the menu open.
                return;
            }
            const oldRestoreFocus = this.skipRestoreFocus;
            // allow focus to continue to the next focused object rather than returning
            this.skipRestoreFocus = true;
            this.close();
            // await for close
            await this.updateComplete;
            // return to previous behavior
            this.skipRestoreFocus = oldRestoreFocus;
        };
        /**
         * Saves the last focused element focuses the new element based on
         * `defaultFocus`, and animates open.
         */
        this.onOpened = async () => {
            this.lastFocusedElement = getFocusedElement();
            const items = this.items;
            const activeItemRecord = (0,_list_internal_list_navigation_helpers_js__WEBPACK_IMPORTED_MODULE_8__.getActiveItem)(items);
            if (activeItemRecord && this.defaultFocus !== _controllers_shared_js__WEBPACK_IMPORTED_MODULE_9__.FocusState.NONE) {
                activeItemRecord.item.tabIndex = -1;
            }
            let animationAborted = !this.quick;
            if (this.quick) {
                this.dispatchEvent(new Event('opening'));
            }
            else {
                animationAborted = !!(await this.animateOpen());
            }
            // This must come after the opening animation or else it may focus one of
            // the items before the animation has begun and causes the list to slide
            // (block-padding-of-the-menu)px at the end of the animation
            switch (this.defaultFocus) {
                case _controllers_shared_js__WEBPACK_IMPORTED_MODULE_9__.FocusState.FIRST_ITEM:
                    const first = (0,_list_internal_list_navigation_helpers_js__WEBPACK_IMPORTED_MODULE_8__.getFirstActivatableItem)(items);
                    if (first) {
                        first.tabIndex = 0;
                        first.focus();
                        await first.updateComplete;
                    }
                    break;
                case _controllers_shared_js__WEBPACK_IMPORTED_MODULE_9__.FocusState.LAST_ITEM:
                    const last = (0,_list_internal_list_navigation_helpers_js__WEBPACK_IMPORTED_MODULE_8__.getLastActivatableItem)(items);
                    if (last) {
                        last.tabIndex = 0;
                        last.focus();
                        await last.updateComplete;
                    }
                    break;
                case _controllers_shared_js__WEBPACK_IMPORTED_MODULE_9__.FocusState.LIST_ROOT:
                    this.focus();
                    break;
                default:
                case _controllers_shared_js__WEBPACK_IMPORTED_MODULE_9__.FocusState.NONE:
                    // Do nothing.
                    break;
            }
            if (!animationAborted) {
                this.dispatchEvent(new Event('opened'));
            }
        };
        /**
         * Animates closed.
         */
        this.beforeClose = async () => {
            this.open = false;
            if (!this.skipRestoreFocus) {
                this.lastFocusedElement?.focus?.();
            }
            if (!this.quick) {
                await this.animateClose();
            }
        };
        /**
         * Focuses the last focused element.
         */
        this.onClosed = () => {
            if (this.quick) {
                this.dispatchEvent(new Event('closing'));
                this.dispatchEvent(new Event('closed'));
            }
        };
        this.onWindowPointerdown = (event) => {
            this.pointerPath = event.composedPath();
        };
        /**
         * We cannot listen to window click because Safari on iOS will not bubble a
         * click event on window if the item clicked is not a "clickable" item such as
         * <body>
         */
        this.onDocumentClick = (event) => {
            if (!this.open) {
                return;
            }
            const path = event.composedPath();
            if (!this.stayOpenOnOutsideClick &&
                !path.includes(this) &&
                !path.includes(this.anchorElement)) {
                this.open = false;
            }
        };
        if (!lit__WEBPACK_IMPORTED_MODULE_2__.isServer) {
            this.internals.role = 'menu';
            this.addEventListener('keydown', this.handleKeydown);
            // Capture so that we can grab the event before it reaches the menu item
            // istelf. Specifically useful for the case where typeahead encounters a
            // space and we don't want the menu item to close the menu.
            this.addEventListener('keydown', this.captureKeydown, { capture: true });
            this.addEventListener('focusout', this.handleFocusout);
        }
    }
    /**
     * The menu items associated with this menu. The items must be `MenuItem`s and
     * have both the `md-menu-item` and `md-list-item` attributes.
     */
    get items() {
        return this.listController.items;
    }
    willUpdate(changed) {
        if (!changed.has('open')) {
            return;
        }
        if (this.open) {
            this.removeAttribute('aria-hidden');
            return;
        }
        this.setAttribute('aria-hidden', 'true');
    }
    update(changed) {
        if (changed.has('open')) {
            if (this.open) {
                this.setUpGlobalEventListeners();
            }
            else {
                this.cleanUpGlobalEventListeners();
            }
        }
        // Firefox does not support popover. Fall-back to using fixed.
        if (changed.has('positioning') &&
            this.positioning === 'popover' &&
            // type required for Google JS conformance
            !this.showPopover) {
            this.positioning = 'fixed';
        }
        super.update(changed);
    }
    connectedCallback() {
        super.connectedCallback();
        if (this.open) {
            this.setUpGlobalEventListeners();
        }
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.cleanUpGlobalEventListeners();
    }
    getBoundingClientRect() {
        if (!this.surfaceEl) {
            return super.getBoundingClientRect();
        }
        return this.surfaceEl.getBoundingClientRect();
    }
    getClientRects() {
        if (!this.surfaceEl) {
            return super.getClientRects();
        }
        return this.surfaceEl.getClientRects();
    }
    render() {
        return this.renderSurface();
    }
    /**
     * Renders the positionable surface element and its contents.
     */
    renderSurface() {
        return (0,lit__WEBPACK_IMPORTED_MODULE_2__.html) `
      <div
        class="menu ${(0,lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_4__.classMap)(this.getSurfaceClasses())}"
        style=${(0,lit_directives_style_map_js__WEBPACK_IMPORTED_MODULE_5__.styleMap)(this.menuPositionController.surfaceStyles)}
        popover=${this.positioning === 'popover' ? 'manual' : lit__WEBPACK_IMPORTED_MODULE_2__.nothing}>
        ${this.renderElevation()}
        <div class="items">
          <div class="item-padding"> ${this.renderMenuItems()} </div>
        </div>
      </div>
    `;
    }
    /**
     * Renders the menu items' slot
     */
    renderMenuItems() {
        return (0,lit__WEBPACK_IMPORTED_MODULE_2__.html) `<slot
      @close-menu=${this.onCloseMenu}
      @deactivate-items=${this.onDeactivateItems}
      @request-activation=${this.onRequestActivation}
      @deactivate-typeahead=${this.handleDeactivateTypeahead}
      @activate-typeahead=${this.handleActivateTypeahead}
      @stay-open-on-focusout=${this.handleStayOpenOnFocusout}
      @close-on-focusout=${this.handleCloseOnFocusout}
      @slotchange=${this.listController.onSlotchange}></slot>`;
    }
    /**
     * Renders the elevation component.
     */
    renderElevation() {
        return (0,lit__WEBPACK_IMPORTED_MODULE_2__.html) `<md-elevation part="elevation"></md-elevation>`;
    }
    getSurfaceClasses() {
        return {
            open: this.open,
            fixed: this.positioning === 'fixed',
            'has-overflow': this.hasOverflow,
        };
    }
    captureKeydown(event) {
        if (event.target === this &&
            !event.defaultPrevented &&
            (0,_controllers_shared_js__WEBPACK_IMPORTED_MODULE_9__.isClosableKey)(event.code)) {
            event.preventDefault();
            this.close();
        }
        this.typeaheadController.onKeydown(event);
    }
    /**
     * Performs the opening animation:
     *
     * https://direct.googleplex.com/#/spec/295000003+271060003
     *
     * @return A promise that resolve to `true` if the animation was aborted,
     *     `false` if it was not aborted.
     */
    async animateOpen() {
        const surfaceEl = this.surfaceEl;
        const slotEl = this.slotEl;
        if (!surfaceEl || !slotEl)
            return true;
        const openDirection = this.openDirection;
        this.dispatchEvent(new Event('opening'));
        // needs to be imperative because we don't want to mix animation and Lit
        // render timing
        surfaceEl.classList.toggle('animating', true);
        const signal = this.openCloseAnimationSignal.start();
        const height = surfaceEl.offsetHeight;
        const openingUpwards = openDirection === 'UP';
        const children = this.items;
        const FULL_DURATION = 500;
        const SURFACE_OPACITY_DURATION = 50;
        const ITEM_OPACITY_DURATION = 250;
        // We want to fit every child fade-in animation within the full duration of
        // the animation.
        const DELAY_BETWEEN_ITEMS = (FULL_DURATION - ITEM_OPACITY_DURATION) / children.length;
        const surfaceHeightAnimation = surfaceEl.animate([{ height: '0px' }, { height: `${height}px` }], {
            duration: FULL_DURATION,
            easing: _internal_motion_animation_js__WEBPACK_IMPORTED_MODULE_6__.EASING.EMPHASIZED,
        });
        // When we are opening upwards, we want to make sure the last item is always
        // in view, so we need to translate it upwards the opposite direction of the
        // height animation
        const upPositionCorrectionAnimation = slotEl.animate([
            { transform: openingUpwards ? `translateY(-${height}px)` : '' },
            { transform: '' },
        ], { duration: FULL_DURATION, easing: _internal_motion_animation_js__WEBPACK_IMPORTED_MODULE_6__.EASING.EMPHASIZED });
        const surfaceOpacityAnimation = surfaceEl.animate([{ opacity: 0 }, { opacity: 1 }], SURFACE_OPACITY_DURATION);
        const childrenAnimations = [];
        for (let i = 0; i < children.length; i++) {
            // If we are animating upwards, then reverse the children list.
            const directionalIndex = openingUpwards ? children.length - 1 - i : i;
            const child = children[directionalIndex];
            const animation = child.animate([{ opacity: 0 }, { opacity: 1 }], {
                duration: ITEM_OPACITY_DURATION,
                delay: DELAY_BETWEEN_ITEMS * i,
            });
            // Make them all initially hidden and then clean up at the end of each
            // animation.
            child.classList.toggle('md-menu-hidden', true);
            animation.addEventListener('finish', () => {
                child.classList.toggle('md-menu-hidden', false);
            });
            childrenAnimations.push([child, animation]);
        }
        let resolveAnimation = (value) => { };
        const animationFinished = new Promise((resolve) => {
            resolveAnimation = resolve;
        });
        signal.addEventListener('abort', () => {
            surfaceHeightAnimation.cancel();
            upPositionCorrectionAnimation.cancel();
            surfaceOpacityAnimation.cancel();
            childrenAnimations.forEach(([child, animation]) => {
                child.classList.toggle('md-menu-hidden', false);
                animation.cancel();
            });
            resolveAnimation(true);
        });
        surfaceHeightAnimation.addEventListener('finish', () => {
            surfaceEl.classList.toggle('animating', false);
            this.openCloseAnimationSignal.finish();
            resolveAnimation(false);
        });
        return await animationFinished;
    }
    /**
     * Performs the closing animation:
     *
     * https://direct.googleplex.com/#/spec/295000003+271060003
     */
    animateClose() {
        let resolve;
        // This promise blocks the surface position controller from setting
        // display: none on the surface which will interfere with this animation.
        const animationEnded = new Promise((res) => {
            resolve = res;
        });
        const surfaceEl = this.surfaceEl;
        const slotEl = this.slotEl;
        if (!surfaceEl || !slotEl) {
            resolve(false);
            return animationEnded;
        }
        const openDirection = this.openDirection;
        const closingDownwards = openDirection === 'UP';
        this.dispatchEvent(new Event('closing'));
        // needs to be imperative because we don't want to mix animation and Lit
        // render timing
        surfaceEl.classList.toggle('animating', true);
        const signal = this.openCloseAnimationSignal.start();
        const height = surfaceEl.offsetHeight;
        const children = this.items;
        const FULL_DURATION = 150;
        const SURFACE_OPACITY_DURATION = 50;
        // The surface fades away at the very end
        const SURFACE_OPACITY_DELAY = FULL_DURATION - SURFACE_OPACITY_DURATION;
        const ITEM_OPACITY_DURATION = 50;
        const ITEM_OPACITY_INITIAL_DELAY = 50;
        const END_HEIGHT_PERCENTAGE = 0.35;
        // We want to fit every child fade-out animation within the full duration of
        // the animation.
        const DELAY_BETWEEN_ITEMS = (FULL_DURATION - ITEM_OPACITY_INITIAL_DELAY - ITEM_OPACITY_DURATION) /
            children.length;
        // The mock has the animation shrink to 35%
        const surfaceHeightAnimation = surfaceEl.animate([
            { height: `${height}px` },
            { height: `${height * END_HEIGHT_PERCENTAGE}px` },
        ], {
            duration: FULL_DURATION,
            easing: _internal_motion_animation_js__WEBPACK_IMPORTED_MODULE_6__.EASING.EMPHASIZED_ACCELERATE,
        });
        // When we are closing downwards, we want to make sure the last item is
        // always in view, so we need to translate it upwards the opposite direction
        // of the height animation
        const downPositionCorrectionAnimation = slotEl.animate([
            { transform: '' },
            {
                transform: closingDownwards
                    ? `translateY(-${height * (1 - END_HEIGHT_PERCENTAGE)}px)`
                    : '',
            },
        ], { duration: FULL_DURATION, easing: _internal_motion_animation_js__WEBPACK_IMPORTED_MODULE_6__.EASING.EMPHASIZED_ACCELERATE });
        const surfaceOpacityAnimation = surfaceEl.animate([{ opacity: 1 }, { opacity: 0 }], { duration: SURFACE_OPACITY_DURATION, delay: SURFACE_OPACITY_DELAY });
        const childrenAnimations = [];
        for (let i = 0; i < children.length; i++) {
            // If the animation is closing upwards, then reverse the list of
            // children so that we animate in the opposite direction.
            const directionalIndex = closingDownwards ? i : children.length - 1 - i;
            const child = children[directionalIndex];
            const animation = child.animate([{ opacity: 1 }, { opacity: 0 }], {
                duration: ITEM_OPACITY_DURATION,
                delay: ITEM_OPACITY_INITIAL_DELAY + DELAY_BETWEEN_ITEMS * i,
            });
            // Make sure the items stay hidden at the end of each child animation.
            // We clean this up at the end of the overall animation.
            animation.addEventListener('finish', () => {
                child.classList.toggle('md-menu-hidden', true);
            });
            childrenAnimations.push([child, animation]);
        }
        signal.addEventListener('abort', () => {
            surfaceHeightAnimation.cancel();
            downPositionCorrectionAnimation.cancel();
            surfaceOpacityAnimation.cancel();
            childrenAnimations.forEach(([child, animation]) => {
                animation.cancel();
                child.classList.toggle('md-menu-hidden', false);
            });
            resolve(false);
        });
        surfaceHeightAnimation.addEventListener('finish', () => {
            surfaceEl.classList.toggle('animating', false);
            childrenAnimations.forEach(([child]) => {
                child.classList.toggle('md-menu-hidden', false);
            });
            this.openCloseAnimationSignal.finish();
            this.dispatchEvent(new Event('closed'));
            resolve(true);
        });
        return animationEnded;
    }
    handleKeydown(event) {
        // At any key event, the pointer interaction is done so we need to clear our
        // cached pointerpath. This handles the case where the user clicks on the
        // anchor, and then hits shift+tab
        this.pointerPath = [];
        this.listController.handleKeydown(event);
    }
    setUpGlobalEventListeners() {
        document.addEventListener('click', this.onDocumentClick, { capture: true });
        window.addEventListener('pointerdown', this.onWindowPointerdown);
        document.addEventListener('resize', this.onWindowResize, { passive: true });
        window.addEventListener('resize', this.onWindowResize, { passive: true });
    }
    cleanUpGlobalEventListeners() {
        document.removeEventListener('click', this.onDocumentClick, {
            capture: true,
        });
        window.removeEventListener('pointerdown', this.onWindowPointerdown);
        document.removeEventListener('resize', this.onWindowResize);
        window.removeEventListener('resize', this.onWindowResize);
    }
    onCloseMenu() {
        this.close();
    }
    onDeactivateItems(event) {
        event.stopPropagation();
        this.listController.onDeactivateItems();
    }
    onRequestActivation(event) {
        event.stopPropagation();
        this.listController.onRequestActivation(event);
    }
    handleDeactivateTypeahead(event) {
        // stopPropagation so that this does not deactivate any typeaheads in menus
        // nested above it e.g. md-sub-menu
        event.stopPropagation();
        this.typeaheadActive = false;
    }
    handleActivateTypeahead(event) {
        // stopPropagation so that this does not activate any typeaheads in menus
        // nested above it e.g. md-sub-menu
        event.stopPropagation();
        this.typeaheadActive = true;
    }
    handleStayOpenOnFocusout(event) {
        event.stopPropagation();
        this.stayOpenOnFocusout = true;
    }
    handleCloseOnFocusout(event) {
        event.stopPropagation();
        this.stayOpenOnFocusout = false;
    }
    close() {
        this.open = false;
        const maybeSubmenu = this.slotItems;
        maybeSubmenu.forEach((item) => {
            item.close?.();
        });
    }
    show() {
        this.open = true;
    }
    /**
     * Activates the next item in the menu. If at the end of the menu, the first
     * item will be activated.
     *
     * @return The activated menu item or `null` if there are no items.
     */
    activateNextItem() {
        return this.listController.activateNextItem() ?? null;
    }
    /**
     * Activates the previous item in the menu. If at the start of the menu, the
     * last item will be activated.
     *
     * @return The activated menu item or `null` if there are no items.
     */
    activatePreviousItem() {
        return this.listController.activatePreviousItem() ?? null;
    }
    /**
     * Repositions the menu if it is open.
     *
     * Useful for the case where document or window-positioned menus have their
     * anchors moved while open.
     */
    reposition() {
        if (this.open) {
            this.menuPositionController.position();
        }
    }
}
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.query)('.menu')
], Menu.prototype, "surfaceEl", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.query)('slot')
], Menu.prototype, "slotEl", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)()
], Menu.prototype, "anchor", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)()
], Menu.prototype, "positioning", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)({ type: Boolean })
], Menu.prototype, "quick", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)({ type: Boolean, attribute: 'has-overflow' })
], Menu.prototype, "hasOverflow", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)({ type: Boolean, reflect: true })
], Menu.prototype, "open", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)({ type: Number, attribute: 'x-offset' })
], Menu.prototype, "xOffset", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)({ type: Number, attribute: 'y-offset' })
], Menu.prototype, "yOffset", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)({ type: Boolean, attribute: 'no-horizontal-flip' })
], Menu.prototype, "noHorizontalFlip", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)({ type: Boolean, attribute: 'no-vertical-flip' })
], Menu.prototype, "noVerticalFlip", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)({ type: Number, attribute: 'typeahead-delay' })
], Menu.prototype, "typeaheadDelay", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)({ attribute: 'anchor-corner' })
], Menu.prototype, "anchorCorner", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)({ attribute: 'menu-corner' })
], Menu.prototype, "menuCorner", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)({ type: Boolean, attribute: 'stay-open-on-outside-click' })
], Menu.prototype, "stayOpenOnOutsideClick", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)({ type: Boolean, attribute: 'stay-open-on-focusout' })
], Menu.prototype, "stayOpenOnFocusout", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)({ type: Boolean, attribute: 'skip-restore-focus' })
], Menu.prototype, "skipRestoreFocus", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)({ attribute: 'default-focus' })
], Menu.prototype, "defaultFocus", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)({ type: Boolean, attribute: 'no-navigation-wrap' })
], Menu.prototype, "noNavigationWrap", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.queryAssignedElements)({ flatten: true })
], Menu.prototype, "slotItems", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.state)()
], Menu.prototype, "typeaheadActive", void 0);
//# sourceMappingURL=menu.js.map

/***/ }),

/***/ "./node_modules/@material/web/menu/menu.js":
/*!*************************************************!*\
  !*** ./node_modules/@material/web/menu/menu.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CloseReason: () => (/* reexport safe */ _internal_controllers_shared_js__WEBPACK_IMPORTED_MODULE_3__.CloseReason),
/* harmony export */   Corner: () => (/* reexport safe */ _internal_menu_js__WEBPACK_IMPORTED_MODULE_1__.Corner),
/* harmony export */   FocusState: () => (/* reexport safe */ _internal_controllers_shared_js__WEBPACK_IMPORTED_MODULE_3__.FocusState),
/* harmony export */   MdMenu: () => (/* binding */ MdMenu)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ "./node_modules/lit/decorators.js");
/* harmony import */ var _internal_menu_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/menu.js */ "./node_modules/@material/web/menu/internal/menu.js");
/* harmony import */ var _internal_menu_styles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/menu-styles.js */ "./node_modules/@material/web/menu/internal/menu-styles.js");
/* harmony import */ var _internal_controllers_shared_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/controllers/shared.js */ "./node_modules/@material/web/menu/internal/controllers/shared.js");
/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */






/**
 * @summary Menus display a list of choices on a temporary surface.
 *
 * @description
 * Menus appear when users interact with a button, action, or other control.
 *
 * They can be opened from a variety of elements, most commonly icon buttons,
 * buttons, and text fields.
 *
 * md-menu listens for the `close-menu` and `deselect-items` events.
 *
 * - `close-menu` closes the menu when dispatched from a child element.
 * - `deselect-items` deselects all of its immediate menu-item children.
 *
 * @example
 * ```html
 * <div style="position:relative;">
 *   <button
 *       id="anchor"
 *       @click=${() => this.menuRef.value.show()}>
 *     Click to open menu
 *   </button>
 *   <!--
 *     `has-overflow` is required when using a submenu which overflows the
 *     menu's contents.
 *
 *     Additionally, `anchor` ingests an idref which do not pass through shadow
 *     roots. You can also set `.anchorElement` to an element reference if
 *     necessary.
 *   -->
 *   <md-menu anchor="anchor" has-overflow ${ref(menuRef)}>
 *     <md-menu-item headline="This is a headline"></md-menu-item>
 *     <md-sub-menu>
 *       <md-menu-item
 *           slot="item"
 *           headline="this is a submenu item">
 *       </md-menu-item>
 *       <md-menu slot="menu">
 *         <md-menu-item headline="This is an item inside a submenu">
 *         </md-menu-item>
 *       </md-menu>
 *     </md-sub-menu>
 *   </md-menu>
 * </div>
 * ```
 *
 * @final
 * @suppress {visibility}
 */
let MdMenu = class MdMenu extends _internal_menu_js__WEBPACK_IMPORTED_MODULE_1__.Menu {
};
MdMenu.styles = [_internal_menu_styles_js__WEBPACK_IMPORTED_MODULE_2__.styles];
MdMenu = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.customElement)('md-menu')
], MdMenu);

//# sourceMappingURL=menu.js.map

/***/ }),

/***/ "./node_modules/@material/web/radio/internal/radio-styles.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@material/web/radio/internal/radio-styles.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   styles: () => (/* binding */ styles)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
// Generated stylesheet for ./radio/internal/radio-styles.css.

const styles = (0,lit__WEBPACK_IMPORTED_MODULE_0__.css) `@layer{:host{display:inline-flex;height:var(--md-radio-icon-size, 20px);outline:none;position:relative;vertical-align:top;width:var(--md-radio-icon-size, 20px);-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;--md-ripple-hover-color: var(--md-radio-hover-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--md-ripple-hover-opacity: var(--md-radio-hover-state-layer-opacity, 0.08);--md-ripple-pressed-color: var(--md-radio-pressed-state-layer-color, var(--md-sys-color-primary, #6750a4));--md-ripple-pressed-opacity: var(--md-radio-pressed-state-layer-opacity, 0.12)}:host([disabled]){cursor:default}:host([touch-target=wrapper]){margin:max(0px,(48px - var(--md-radio-icon-size, 20px))/2)}.container{display:flex;height:100%;place-content:center;place-items:center;width:100%}md-focus-ring{height:44px;inset:unset;width:44px}.checked{--md-ripple-hover-color: var(--md-radio-selected-hover-state-layer-color, var(--md-sys-color-primary, #6750a4));--md-ripple-hover-opacity: var(--md-radio-selected-hover-state-layer-opacity, 0.08);--md-ripple-pressed-color: var(--md-radio-selected-pressed-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--md-ripple-pressed-opacity: var(--md-radio-selected-pressed-state-layer-opacity, 0.12)}.touch-target{height:48px;position:absolute;width:48px}:host([touch-target=none]) .touch-target{display:none}md-ripple{border-radius:50%;height:var(--md-radio-state-layer-size, 40px);inset:unset;width:var(--md-radio-state-layer-size, 40px)}.icon{fill:var(--md-radio-icon-color, var(--md-sys-color-on-surface-variant, #49454f));inset:0;position:absolute}.outer.circle{transition:fill 50ms linear}.inner.circle{opacity:0;transform-origin:center;transition:opacity 50ms linear}.checked .icon{fill:var(--md-radio-selected-icon-color, var(--md-sys-color-primary, #6750a4))}.checked .inner.circle{animation:inner-circle-grow 300ms cubic-bezier(0.05, 0.7, 0.1, 1);opacity:1}@keyframes inner-circle-grow{from{transform:scale(0)}to{transform:scale(1)}}:host([disabled]) .circle{animation-duration:0s;transition-duration:0s}:host(:hover) .icon{fill:var(--md-radio-hover-icon-color, var(--md-sys-color-on-surface, #1d1b20))}:host(:focus-within) .icon{fill:var(--md-radio-focus-icon-color, var(--md-sys-color-on-surface, #1d1b20))}:host(:active) .icon{fill:var(--md-radio-pressed-icon-color, var(--md-sys-color-on-surface, #1d1b20))}:host([disabled]) .icon{fill:var(--md-radio-disabled-unselected-icon-color, var(--md-sys-color-on-surface, #1d1b20));opacity:var(--md-radio-disabled-unselected-icon-opacity, 0.38)}:host(:hover) .checked .icon{fill:var(--md-radio-selected-hover-icon-color, var(--md-sys-color-primary, #6750a4))}:host(:focus-within) .checked .icon{fill:var(--md-radio-selected-focus-icon-color, var(--md-sys-color-primary, #6750a4))}:host(:active) .checked .icon{fill:var(--md-radio-selected-pressed-icon-color, var(--md-sys-color-primary, #6750a4))}:host([disabled]) .checked .icon{fill:var(--md-radio-disabled-selected-icon-color, var(--md-sys-color-on-surface, #1d1b20));opacity:var(--md-radio-disabled-selected-icon-opacity, 0.38)}}@layer hcm{@media(forced-colors: active){.icon{fill:CanvasText}:host([disabled]) .icon{fill:GrayText;opacity:1}}}
`;
//# sourceMappingURL=radio-styles.js.map

/***/ }),

/***/ "./node_modules/@material/web/radio/internal/radio.js":
/*!************************************************************!*\
  !*** ./node_modules/@material/web/radio/internal/radio.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Radio: () => (/* binding */ Radio)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _focus_md_focus_ring_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../focus/md-focus-ring.js */ "./node_modules/@material/web/focus/md-focus-ring.js");
/* harmony import */ var _ripple_ripple_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ripple/ripple.js */ "./node_modules/@material/web/ripple/ripple.js");
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lit/decorators.js */ "./node_modules/lit/decorators.js");
/* harmony import */ var lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lit/directives/class-map.js */ "./node_modules/lit/directives/class-map.js");
/* harmony import */ var _internal_events_form_label_activation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../internal/events/form-label-activation.js */ "./node_modules/@material/web/internal/events/form-label-activation.js");
/* harmony import */ var _labs_behaviors_constraint_validation_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../labs/behaviors/constraint-validation.js */ "./node_modules/@material/web/labs/behaviors/constraint-validation.js");
/* harmony import */ var _labs_behaviors_element_internals_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../labs/behaviors/element-internals.js */ "./node_modules/@material/web/labs/behaviors/element-internals.js");
/* harmony import */ var _labs_behaviors_focusable_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../labs/behaviors/focusable.js */ "./node_modules/@material/web/labs/behaviors/focusable.js");
/* harmony import */ var _labs_behaviors_form_associated_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../labs/behaviors/form-associated.js */ "./node_modules/@material/web/labs/behaviors/form-associated.js");
/* harmony import */ var _labs_behaviors_validators_radio_validator_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../labs/behaviors/validators/radio-validator.js */ "./node_modules/@material/web/labs/behaviors/validators/radio-validator.js");
/* harmony import */ var _single_selection_controller_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./single-selection-controller.js */ "./node_modules/@material/web/radio/internal/single-selection-controller.js");
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
var _a;













const CHECKED = Symbol('checked');
let maskId = 0;
// Separate variable needed for closure.
const radioBaseClass = (0,_labs_behaviors_constraint_validation_js__WEBPACK_IMPORTED_MODULE_6__.mixinConstraintValidation)((0,_labs_behaviors_form_associated_js__WEBPACK_IMPORTED_MODULE_9__.mixinFormAssociated)((0,_labs_behaviors_element_internals_js__WEBPACK_IMPORTED_MODULE_7__.mixinElementInternals)((0,_labs_behaviors_focusable_js__WEBPACK_IMPORTED_MODULE_8__.mixinFocusable)(lit__WEBPACK_IMPORTED_MODULE_2__.LitElement))));
/**
 * A radio component.
 *
 * @fires input {InputEvent} Dispatched when the value changes from user
 * interaction. --bubbles
 * @fires change {Event} Dispatched when the value changes from user
 * interaction. --bubbles --composed
 */
class Radio extends radioBaseClass {
    /**
     * Whether or not the radio is selected.
     */
    get checked() {
        return this[CHECKED];
    }
    set checked(checked) {
        const wasChecked = this.checked;
        if (wasChecked === checked) {
            return;
        }
        this[CHECKED] = checked;
        this.requestUpdate('checked', wasChecked);
        this.selectionController.handleCheckedChange();
    }
    constructor() {
        super();
        // Unique maskId is required because of a Safari bug that fail to persist
        // reference to the mask. This should be removed once the bug is fixed.
        this.maskId = `cutout${++maskId}`;
        this[_a] = false;
        /**
         * Whether or not the radio is required. If any radio is required in a group,
         * all radios are implicitly required.
         */
        this.required = false;
        /**
         * The element value to use in form submission when checked.
         */
        this.value = 'on';
        this.selectionController = new _single_selection_controller_js__WEBPACK_IMPORTED_MODULE_11__.SingleSelectionController(this);
        this.addController(this.selectionController);
        if (!lit__WEBPACK_IMPORTED_MODULE_2__.isServer) {
            this[_labs_behaviors_element_internals_js__WEBPACK_IMPORTED_MODULE_7__.internals].role = 'radio';
            this.addEventListener('click', this.handleClick.bind(this));
            this.addEventListener('keydown', this.handleKeydown.bind(this));
        }
    }
    render() {
        const classes = { 'checked': this.checked };
        return (0,lit__WEBPACK_IMPORTED_MODULE_2__.html) `
      <div class="container ${(0,lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_4__.classMap)(classes)}" aria-hidden="true">
        <md-ripple
          part="ripple"
          .control=${this}
          ?disabled=${this.disabled}></md-ripple>
        <md-focus-ring part="focus-ring" .control=${this}></md-focus-ring>
        <svg class="icon" viewBox="0 0 20 20">
          <mask id="${this.maskId}">
            <rect width="100%" height="100%" fill="white" />
            <circle cx="10" cy="10" r="8" fill="black" />
          </mask>
          <circle
            class="outer circle"
            cx="10"
            cy="10"
            r="10"
            mask="url(#${this.maskId})" />
          <circle class="inner circle" cx="10" cy="10" r="5" />
        </svg>

        <div class="touch-target"></div>
      </div>
    `;
    }
    updated() {
        this[_labs_behaviors_element_internals_js__WEBPACK_IMPORTED_MODULE_7__.internals].ariaChecked = String(this.checked);
    }
    async handleClick(event) {
        if (this.disabled) {
            return;
        }
        // allow event to propagate to user code after a microtask.
        await 0;
        if (event.defaultPrevented) {
            return;
        }
        if ((0,_internal_events_form_label_activation_js__WEBPACK_IMPORTED_MODULE_5__.isActivationClick)(event)) {
            this.focus();
        }
        // Per spec, clicking on a radio input always selects it.
        this.checked = true;
        this.dispatchEvent(new Event('change', { bubbles: true }));
        this.dispatchEvent(new InputEvent('input', { bubbles: true, composed: true }));
    }
    async handleKeydown(event) {
        // allow event to propagate to user code after a microtask.
        await 0;
        if (event.key !== ' ' || event.defaultPrevented) {
            return;
        }
        this.click();
    }
    [(_a = CHECKED, _labs_behaviors_form_associated_js__WEBPACK_IMPORTED_MODULE_9__.getFormValue)]() {
        return this.checked ? this.value : null;
    }
    [_labs_behaviors_form_associated_js__WEBPACK_IMPORTED_MODULE_9__.getFormState]() {
        return String(this.checked);
    }
    formResetCallback() {
        // The checked property does not reflect, so the original attribute set by
        // the user is used to determine the default value.
        this.checked = this.hasAttribute('checked');
    }
    formStateRestoreCallback(state) {
        this.checked = state === 'true';
    }
    [_labs_behaviors_constraint_validation_js__WEBPACK_IMPORTED_MODULE_6__.createValidator]() {
        return new _labs_behaviors_validators_radio_validator_js__WEBPACK_IMPORTED_MODULE_10__.RadioValidator(() => {
            if (!this.selectionController) {
                // Validation runs on superclass construction, so selection controller
                // might not actually be ready until this class constructs.
                return [this];
            }
            return this.selectionController.controls;
        });
    }
    [_labs_behaviors_constraint_validation_js__WEBPACK_IMPORTED_MODULE_6__.getValidityAnchor]() {
        return this.container;
    }
}
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)({ type: Boolean })
], Radio.prototype, "checked", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)({ type: Boolean })
], Radio.prototype, "required", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.property)()
], Radio.prototype, "value", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_3__.query)('.container')
], Radio.prototype, "container", void 0);
//# sourceMappingURL=radio.js.map

/***/ }),

/***/ "./node_modules/@material/web/radio/internal/single-selection-controller.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@material/web/radio/internal/single-selection-controller.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SingleSelectionController: () => (/* binding */ SingleSelectionController)
/* harmony export */ });
/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * A `ReactiveController` that provides root node-scoped single selection for
 * elements, similar to native `<input type="radio">` selection.
 *
 * To use, elements should add the controller and call
 * `selectionController.handleCheckedChange()` in a getter/setter. This must
 * be synchronous to match native behavior.
 *
 * @example
 * const CHECKED = Symbol('checked');
 *
 * class MyToggle extends LitElement {
 *   get checked() { return this[CHECKED]; }
 *   set checked(checked: boolean) {
 *     const oldValue = this.checked;
 *     if (oldValue === checked) {
 *       return;
 *     }
 *
 *     this[CHECKED] = checked;
 *     this.selectionController.handleCheckedChange();
 *     this.requestUpdate('checked', oldValue);
 *   }
 *
 *   [CHECKED] = false;
 *
 *   private selectionController = new SingleSelectionController(this);
 *
 *   constructor() {
 *     super();
 *     this.addController(this.selectionController);
 *   }
 * }
 */
class SingleSelectionController {
    /**
     * All single selection elements in the host element's root with the same
     * `name` attribute, including the host element.
     */
    get controls() {
        const name = this.host.getAttribute('name');
        if (!name || !this.root || !this.host.isConnected) {
            return [this.host];
        }
        // Cast as unknown since there is not enough information for typescript to
        // know that there is always at least one element (the host).
        return Array.from(this.root.querySelectorAll(`[name="${name}"]`));
    }
    constructor(host) {
        this.host = host;
        this.focused = false;
        this.root = null;
        this.handleFocusIn = () => {
            this.focused = true;
            this.updateTabIndices();
        };
        this.handleFocusOut = () => {
            this.focused = false;
            this.updateTabIndices();
        };
        /**
         * Handles arrow key events from the host. Using the arrow keys will
         * select and check the next or previous sibling with the host's
         * `name` attribute.
         */
        this.handleKeyDown = (event) => {
            const isDown = event.key === 'ArrowDown';
            const isUp = event.key === 'ArrowUp';
            const isLeft = event.key === 'ArrowLeft';
            const isRight = event.key === 'ArrowRight';
            // Ignore non-arrow keys
            if (!isLeft && !isRight && !isDown && !isUp) {
                return;
            }
            // Don't try to select another sibling if there aren't any.
            const siblings = this.controls;
            if (!siblings.length) {
                return;
            }
            // Prevent default interactions on the element for arrow keys,
            // since this controller will introduce new behavior.
            event.preventDefault();
            // Check if moving forwards or backwards
            const isRtl = getComputedStyle(this.host).direction === 'rtl';
            const forwards = isRtl ? isLeft || isDown : isRight || isDown;
            const hostIndex = siblings.indexOf(this.host);
            let nextIndex = forwards ? hostIndex + 1 : hostIndex - 1;
            // Search for the next sibling that is not disabled to select.
            // If we return to the host index, there is nothing to select.
            while (nextIndex !== hostIndex) {
                if (nextIndex >= siblings.length) {
                    // Return to start if moving past the last item.
                    nextIndex = 0;
                }
                else if (nextIndex < 0) {
                    // Go to end if moving before the first item.
                    nextIndex = siblings.length - 1;
                }
                // Check if the next sibling is disabled. If so,
                // move the index and continue searching.
                const nextSibling = siblings[nextIndex];
                if (nextSibling.hasAttribute('disabled')) {
                    if (forwards) {
                        nextIndex++;
                    }
                    else {
                        nextIndex--;
                    }
                    continue;
                }
                // Uncheck and remove focusability from other siblings.
                for (const sibling of siblings) {
                    if (sibling !== nextSibling) {
                        sibling.checked = false;
                        sibling.tabIndex = -1;
                        sibling.blur();
                    }
                }
                // The next sibling should be checked, focused and dispatch a change event
                nextSibling.checked = true;
                nextSibling.tabIndex = 0;
                nextSibling.focus();
                // Fire a change event since the change is triggered by a user action.
                // This matches native <input type="radio"> behavior.
                nextSibling.dispatchEvent(new Event('change', { bubbles: true }));
                break;
            }
        };
    }
    hostConnected() {
        this.root = this.host.getRootNode();
        this.host.addEventListener('keydown', this.handleKeyDown);
        this.host.addEventListener('focusin', this.handleFocusIn);
        this.host.addEventListener('focusout', this.handleFocusOut);
        if (this.host.checked) {
            // Uncheck other siblings when attached if already checked. This mimics
            // native <input type="radio"> behavior.
            this.uncheckSiblings();
        }
        // Update for the newly added host.
        this.updateTabIndices();
    }
    hostDisconnected() {
        this.host.removeEventListener('keydown', this.handleKeyDown);
        this.host.removeEventListener('focusin', this.handleFocusIn);
        this.host.removeEventListener('focusout', this.handleFocusOut);
        // Update for siblings that are still connected.
        this.updateTabIndices();
        this.root = null;
    }
    /**
     * Should be called whenever the host's `checked` property changes
     * synchronously.
     */
    handleCheckedChange() {
        if (!this.host.checked) {
            return;
        }
        this.uncheckSiblings();
        this.updateTabIndices();
    }
    uncheckSiblings() {
        for (const sibling of this.controls) {
            if (sibling !== this.host) {
                sibling.checked = false;
            }
        }
    }
    /**
     * Updates the `tabindex` of the host and its siblings.
     */
    updateTabIndices() {
        // There are three tabindex states for a group of elements:
        // 1. If any are checked, that element is focusable.
        const siblings = this.controls;
        const checkedSibling = siblings.find((sibling) => sibling.checked);
        // 2. If an element is focused, the others are no longer focusable.
        if (checkedSibling || this.focused) {
            const focusable = checkedSibling || this.host;
            focusable.tabIndex = 0;
            for (const sibling of siblings) {
                if (sibling !== focusable) {
                    sibling.tabIndex = -1;
                }
            }
            return;
        }
        // 3. If none are checked or focused, all are focusable.
        for (const sibling of siblings) {
            sibling.tabIndex = 0;
        }
    }
}
//# sourceMappingURL=single-selection-controller.js.map

/***/ }),

/***/ "./node_modules/@material/web/radio/radio.js":
/*!***************************************************!*\
  !*** ./node_modules/@material/web/radio/radio.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MdRadio: () => (/* binding */ MdRadio)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ "./node_modules/lit/decorators.js");
/* harmony import */ var _internal_radio_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/radio.js */ "./node_modules/@material/web/radio/internal/radio.js");
/* harmony import */ var _internal_radio_styles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/radio-styles.js */ "./node_modules/@material/web/radio/internal/radio-styles.js");
/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */




/**
 * @summary Radio buttons allow users to select one option from a set.
 *
 * @description
 * Radio buttons are the recommended way to allow users to make a single
 * selection from a list of options.
 *
 * Only one radio button can be selected at a time.
 *
 * Use radio buttons to:
 * - Select a single option from a set
 * - Expose all available options
 *
 * @final
 * @suppress {visibility}
 */
let MdRadio = class MdRadio extends _internal_radio_js__WEBPACK_IMPORTED_MODULE_1__.Radio {
};
MdRadio.styles = [_internal_radio_styles_js__WEBPACK_IMPORTED_MODULE_2__.styles];
MdRadio = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.customElement)('md-radio')
], MdRadio);

//# sourceMappingURL=radio.js.map

/***/ }),

/***/ "./node_modules/@material/web/ripple/internal/ripple-styles.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@material/web/ripple/internal/ripple-styles.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   styles: () => (/* binding */ styles)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
// Generated stylesheet for ./ripple/internal/ripple-styles.css.

const styles = (0,lit__WEBPACK_IMPORTED_MODULE_0__.css) `:host{display:flex;margin:auto;pointer-events:none}:host([disabled]){display:none}@media(forced-colors: active){:host{display:none}}:host,.surface{border-radius:inherit;position:absolute;inset:0;overflow:hidden}.surface{-webkit-tap-highlight-color:rgba(0,0,0,0)}.surface::before,.surface::after{content:"";opacity:0;position:absolute}.surface::before{background-color:var(--md-ripple-hover-color, var(--md-sys-color-on-surface, #1d1b20));inset:0;transition:opacity 15ms linear,background-color 15ms linear}.surface::after{background:radial-gradient(closest-side, var(--md-ripple-pressed-color, var(--md-sys-color-on-surface, #1d1b20)) max(100% - 70px, 65%), transparent 100%);transform-origin:center center;transition:opacity 375ms linear}.hovered::before{background-color:var(--md-ripple-hover-color, var(--md-sys-color-on-surface, #1d1b20));opacity:var(--md-ripple-hover-opacity, 0.08)}.pressed::after{opacity:var(--md-ripple-pressed-opacity, 0.12);transition-duration:105ms}
`;
//# sourceMappingURL=ripple-styles.js.map

/***/ }),

/***/ "./node_modules/@material/web/ripple/internal/ripple.js":
/*!**************************************************************!*\
  !*** ./node_modules/@material/web/ripple/internal/ripple.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ripple: () => (/* binding */ Ripple)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit/decorators.js */ "./node_modules/lit/decorators.js");
/* harmony import */ var lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lit/directives/class-map.js */ "./node_modules/lit/directives/class-map.js");
/* harmony import */ var _internal_controller_attachable_controller_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../internal/controller/attachable-controller.js */ "./node_modules/@material/web/internal/controller/attachable-controller.js");
/* harmony import */ var _internal_motion_animation_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../internal/motion/animation.js */ "./node_modules/@material/web/internal/motion/animation.js");
/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */






const PRESS_GROW_MS = 450;
const MINIMUM_PRESS_MS = 225;
const INITIAL_ORIGIN_SCALE = 0.2;
const PADDING = 10;
const SOFT_EDGE_MINIMUM_SIZE = 75;
const SOFT_EDGE_CONTAINER_RATIO = 0.35;
const PRESS_PSEUDO = '::after';
const ANIMATION_FILL = 'forwards';
/**
 * Interaction states for the ripple.
 *
 * On Touch:
 *  - `INACTIVE -> TOUCH_DELAY -> WAITING_FOR_CLICK -> INACTIVE`
 *  - `INACTIVE -> TOUCH_DELAY -> HOLDING -> WAITING_FOR_CLICK -> INACTIVE`
 *
 * On Mouse or Pen:
 *   - `INACTIVE -> WAITING_FOR_CLICK -> INACTIVE`
 */
var State;
(function (State) {
    /**
     * Initial state of the control, no touch in progress.
     *
     * Transitions:
     *   - on touch down: transition to `TOUCH_DELAY`.
     *   - on mouse down: transition to `WAITING_FOR_CLICK`.
     */
    State[State["INACTIVE"] = 0] = "INACTIVE";
    /**
     * Touch down has been received, waiting to determine if it's a swipe or
     * scroll.
     *
     * Transitions:
     *   - on touch up: begin press; transition to `WAITING_FOR_CLICK`.
     *   - on cancel: transition to `INACTIVE`.
     *   - after `TOUCH_DELAY_MS`: begin press; transition to `HOLDING`.
     */
    State[State["TOUCH_DELAY"] = 1] = "TOUCH_DELAY";
    /**
     * A touch has been deemed to be a press
     *
     * Transitions:
     *  - on up: transition to `WAITING_FOR_CLICK`.
     */
    State[State["HOLDING"] = 2] = "HOLDING";
    /**
     * The user touch has finished, transition into rest state.
     *
     * Transitions:
     *   - on click end press; transition to `INACTIVE`.
     */
    State[State["WAITING_FOR_CLICK"] = 3] = "WAITING_FOR_CLICK";
})(State || (State = {}));
/**
 * Events that the ripple listens to.
 */
const EVENTS = [
    'click',
    'contextmenu',
    'pointercancel',
    'pointerdown',
    'pointerenter',
    'pointerleave',
    'pointerup',
];
/**
 * Delay reacting to touch so that we do not show the ripple for a swipe or
 * scroll interaction.
 */
const TOUCH_DELAY_MS = 150;
/**
 * Used to detect if HCM is active. Events do not process during HCM when the
 * ripple is not displayed.
 */
const FORCED_COLORS = lit__WEBPACK_IMPORTED_MODULE_0__.isServer
    ? null
    : window.matchMedia('(forced-colors: active)');
/**
 * A ripple component.
 */
class Ripple extends lit__WEBPACK_IMPORTED_MODULE_0__.LitElement {
    constructor() {
        super(...arguments);
        /**
         * Disables the ripple.
         */
        this.disabled = false;
        this.hovered = false;
        this.pressed = false;
        this.rippleSize = '';
        this.rippleScale = '';
        this.initialSize = 0;
        this.state = State.INACTIVE;
        this.checkBoundsAfterContextMenu = false;
        this.attachableController = new _internal_controller_attachable_controller_js__WEBPACK_IMPORTED_MODULE_3__.AttachableController(this, this.onControlChange.bind(this));
    }
    get htmlFor() {
        return this.attachableController.htmlFor;
    }
    set htmlFor(htmlFor) {
        this.attachableController.htmlFor = htmlFor;
    }
    get control() {
        return this.attachableController.control;
    }
    set control(control) {
        this.attachableController.control = control;
    }
    attach(control) {
        this.attachableController.attach(control);
    }
    detach() {
        this.attachableController.detach();
    }
    connectedCallback() {
        super.connectedCallback();
        // Needed for VoiceOver, which will create a "group" if the element is a
        // sibling to other content.
        this.setAttribute('aria-hidden', 'true');
    }
    render() {
        const classes = {
            'hovered': this.hovered,
            'pressed': this.pressed,
        };
        return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html) `<div class="surface ${(0,lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_2__.classMap)(classes)}"></div>`;
    }
    update(changedProps) {
        if (changedProps.has('disabled') && this.disabled) {
            this.hovered = false;
            this.pressed = false;
        }
        super.update(changedProps);
    }
    /**
     * TODO(b/269799771): make private
     * @private only public for slider
     */
    handlePointerenter(event) {
        if (!this.shouldReactToEvent(event)) {
            return;
        }
        this.hovered = true;
    }
    /**
     * TODO(b/269799771): make private
     * @private only public for slider
     */
    handlePointerleave(event) {
        if (!this.shouldReactToEvent(event)) {
            return;
        }
        this.hovered = false;
        // release a held mouse or pen press that moves outside the element
        if (this.state !== State.INACTIVE) {
            this.endPressAnimation();
        }
    }
    handlePointerup(event) {
        if (!this.shouldReactToEvent(event)) {
            return;
        }
        if (this.state === State.HOLDING) {
            this.state = State.WAITING_FOR_CLICK;
            return;
        }
        if (this.state === State.TOUCH_DELAY) {
            this.state = State.WAITING_FOR_CLICK;
            this.startPressAnimation(this.rippleStartEvent);
            return;
        }
    }
    async handlePointerdown(event) {
        if (!this.shouldReactToEvent(event)) {
            return;
        }
        this.rippleStartEvent = event;
        if (!this.isTouch(event)) {
            this.state = State.WAITING_FOR_CLICK;
            this.startPressAnimation(event);
            return;
        }
        // after a longpress contextmenu event, an extra `pointerdown` can be
        // dispatched to the pressed element. Check that the down is within
        // bounds of the element in this case.
        if (this.checkBoundsAfterContextMenu && !this.inBounds(event)) {
            return;
        }
        this.checkBoundsAfterContextMenu = false;
        // Wait for a hold after touch delay
        this.state = State.TOUCH_DELAY;
        await new Promise((resolve) => {
            setTimeout(resolve, TOUCH_DELAY_MS);
        });
        if (this.state !== State.TOUCH_DELAY) {
            return;
        }
        this.state = State.HOLDING;
        this.startPressAnimation(event);
    }
    handleClick() {
        // Click is a MouseEvent in Firefox and Safari, so we cannot use
        // `shouldReactToEvent`
        if (this.disabled) {
            return;
        }
        if (this.state === State.WAITING_FOR_CLICK) {
            this.endPressAnimation();
            return;
        }
        if (this.state === State.INACTIVE) {
            // keyboard synthesized click event
            this.startPressAnimation();
            this.endPressAnimation();
        }
    }
    handlePointercancel(event) {
        if (!this.shouldReactToEvent(event)) {
            return;
        }
        this.endPressAnimation();
    }
    handleContextmenu() {
        if (this.disabled) {
            return;
        }
        this.checkBoundsAfterContextMenu = true;
        this.endPressAnimation();
    }
    determineRippleSize() {
        const { height, width } = this.getBoundingClientRect();
        const maxDim = Math.max(height, width);
        const softEdgeSize = Math.max(SOFT_EDGE_CONTAINER_RATIO * maxDim, SOFT_EDGE_MINIMUM_SIZE);
        const initialSize = Math.floor(maxDim * INITIAL_ORIGIN_SCALE);
        const hypotenuse = Math.sqrt(width ** 2 + height ** 2);
        const maxRadius = hypotenuse + PADDING;
        this.initialSize = initialSize;
        this.rippleScale = `${(maxRadius + softEdgeSize) / initialSize}`;
        this.rippleSize = `${initialSize}px`;
    }
    getNormalizedPointerEventCoords(pointerEvent) {
        const { scrollX, scrollY } = window;
        const { left, top } = this.getBoundingClientRect();
        const documentX = scrollX + left;
        const documentY = scrollY + top;
        const { pageX, pageY } = pointerEvent;
        return { x: pageX - documentX, y: pageY - documentY };
    }
    getTranslationCoordinates(positionEvent) {
        const { height, width } = this.getBoundingClientRect();
        // end in the center
        const endPoint = {
            x: (width - this.initialSize) / 2,
            y: (height - this.initialSize) / 2,
        };
        let startPoint;
        if (positionEvent instanceof PointerEvent) {
            startPoint = this.getNormalizedPointerEventCoords(positionEvent);
        }
        else {
            startPoint = {
                x: width / 2,
                y: height / 2,
            };
        }
        // center around start point
        startPoint = {
            x: startPoint.x - this.initialSize / 2,
            y: startPoint.y - this.initialSize / 2,
        };
        return { startPoint, endPoint };
    }
    startPressAnimation(positionEvent) {
        if (!this.mdRoot) {
            return;
        }
        this.pressed = true;
        this.growAnimation?.cancel();
        this.determineRippleSize();
        const { startPoint, endPoint } = this.getTranslationCoordinates(positionEvent);
        const translateStart = `${startPoint.x}px, ${startPoint.y}px`;
        const translateEnd = `${endPoint.x}px, ${endPoint.y}px`;
        this.growAnimation = this.mdRoot.animate({
            top: [0, 0],
            left: [0, 0],
            height: [this.rippleSize, this.rippleSize],
            width: [this.rippleSize, this.rippleSize],
            transform: [
                `translate(${translateStart}) scale(1)`,
                `translate(${translateEnd}) scale(${this.rippleScale})`,
            ],
        }, {
            pseudoElement: PRESS_PSEUDO,
            duration: PRESS_GROW_MS,
            easing: _internal_motion_animation_js__WEBPACK_IMPORTED_MODULE_4__.EASING.STANDARD,
            fill: ANIMATION_FILL,
        });
    }
    async endPressAnimation() {
        this.rippleStartEvent = undefined;
        this.state = State.INACTIVE;
        const animation = this.growAnimation;
        let pressAnimationPlayState = Infinity;
        if (typeof animation?.currentTime === 'number') {
            pressAnimationPlayState = animation.currentTime;
        }
        else if (animation?.currentTime) {
            pressAnimationPlayState = animation.currentTime.to('ms').value;
        }
        if (pressAnimationPlayState >= MINIMUM_PRESS_MS) {
            this.pressed = false;
            return;
        }
        await new Promise((resolve) => {
            setTimeout(resolve, MINIMUM_PRESS_MS - pressAnimationPlayState);
        });
        if (this.growAnimation !== animation) {
            // A new press animation was started. The old animation was canceled and
            // should not finish the pressed state.
            return;
        }
        this.pressed = false;
    }
    /**
     * Returns `true` if
     *  - the ripple element is enabled
     *  - the pointer is primary for the input type
     *  - the pointer is the pointer that started the interaction, or will start
     * the interaction
     *  - the pointer is a touch, or the pointer state has the primary button
     * held, or the pointer is hovering
     */
    shouldReactToEvent(event) {
        if (this.disabled || !event.isPrimary) {
            return false;
        }
        if (this.rippleStartEvent &&
            this.rippleStartEvent.pointerId !== event.pointerId) {
            return false;
        }
        if (event.type === 'pointerenter' || event.type === 'pointerleave') {
            return !this.isTouch(event);
        }
        const isPrimaryButton = event.buttons === 1;
        return this.isTouch(event) || isPrimaryButton;
    }
    /**
     * Check if the event is within the bounds of the element.
     *
     * This is only needed for the "stuck" contextmenu longpress on Chrome.
     */
    inBounds({ x, y }) {
        const { top, left, bottom, right } = this.getBoundingClientRect();
        return x >= left && x <= right && y >= top && y <= bottom;
    }
    isTouch({ pointerType }) {
        return pointerType === 'touch';
    }
    /** @private */
    async handleEvent(event) {
        if (FORCED_COLORS?.matches) {
            // Skip event logic since the ripple is `display: none`.
            return;
        }
        switch (event.type) {
            case 'click':
                this.handleClick();
                break;
            case 'contextmenu':
                this.handleContextmenu();
                break;
            case 'pointercancel':
                this.handlePointercancel(event);
                break;
            case 'pointerdown':
                await this.handlePointerdown(event);
                break;
            case 'pointerenter':
                this.handlePointerenter(event);
                break;
            case 'pointerleave':
                this.handlePointerleave(event);
                break;
            case 'pointerup':
                this.handlePointerup(event);
                break;
            default:
                break;
        }
    }
    onControlChange(prev, next) {
        if (lit__WEBPACK_IMPORTED_MODULE_0__.isServer)
            return;
        for (const event of EVENTS) {
            prev?.removeEventListener(event, this);
            next?.addEventListener(event, this);
        }
    }
}
(0,tslib__WEBPACK_IMPORTED_MODULE_5__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.property)({ type: Boolean, reflect: true })
], Ripple.prototype, "disabled", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_5__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.state)()
], Ripple.prototype, "hovered", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_5__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.state)()
], Ripple.prototype, "pressed", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_5__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_1__.query)('.surface')
], Ripple.prototype, "mdRoot", void 0);
//# sourceMappingURL=ripple.js.map

/***/ }),

/***/ "./node_modules/@material/web/ripple/ripple.js":
/*!*****************************************************!*\
  !*** ./node_modules/@material/web/ripple/ripple.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MdRipple: () => (/* binding */ MdRipple)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ "./node_modules/lit/decorators.js");
/* harmony import */ var _internal_ripple_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/ripple.js */ "./node_modules/@material/web/ripple/internal/ripple.js");
/* harmony import */ var _internal_ripple_styles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/ripple-styles.js */ "./node_modules/@material/web/ripple/internal/ripple-styles.js");
/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */




/**
 * @summary Ripples, also known as state layers, are visual indicators used to
 * communicate the status of a component or interactive element.
 *
 * @description A state layer is a semi-transparent covering on an element that
 * indicates its state. State layers provide a systematic approach to
 * visualizing states by using opacity. A layer can be applied to an entire
 * element or in a circular shape and only one state layer can be applied at a
 * given time.
 *
 * @final
 * @suppress {visibility}
 */
let MdRipple = class MdRipple extends _internal_ripple_js__WEBPACK_IMPORTED_MODULE_1__.Ripple {
};
MdRipple.styles = [_internal_ripple_styles_js__WEBPACK_IMPORTED_MODULE_2__.styles];
MdRipple = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.customElement)('md-ripple')
], MdRipple);

//# sourceMappingURL=ripple.js.map

/***/ }),

/***/ "./node_modules/@material/web/select/filled-select.js":
/*!************************************************************!*\
  !*** ./node_modules/@material/web/select/filled-select.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MdFilledSelect: () => (/* binding */ MdFilledSelect)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ "./node_modules/lit/decorators.js");
/* harmony import */ var _internal_filled_select_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/filled-select.js */ "./node_modules/@material/web/select/internal/filled-select.js");
/* harmony import */ var _internal_filled_select_styles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/filled-select-styles.js */ "./node_modules/@material/web/select/internal/filled-select-styles.js");
/* harmony import */ var _internal_shared_styles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/shared-styles.js */ "./node_modules/@material/web/select/internal/shared-styles.js");
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */





/**
 * @summary
 * Select menus display a list of choices on temporary surfaces and display the
 * currently selected menu item above the menu.
 *
 * @description
 * The select component allows users to choose a value from a fixed list of
 * available options. Composed of an interactive anchor button and a menu, it is
 * analogous to the native HTML `<select>` element. This is the "filled"
 * variant.
 *
 * @example
 * ```html
 * <md-filled-select label="fruits">
 *   <!-- An empty selected option will give select an "un-filled" state -->
 *   <md-select-option selected></md-select-option>
 *   <md-select-option value="apple" headline="Apple"></md-select-option>
 *   <md-select-option value="banana" headline="Banana"></md-select-option>
 *   <md-select-option value="kiwi" headline="Kiwi"></md-select-option>
 *   <md-select-option value="orange" headline="Orange"></md-select-option>
 *   <md-select-option value="tomato" headline="Tomato"></md-select-option>
 * </md-filled-select>
 * ```
 *
 * @final
 * @suppress {visibility}
 */
let MdFilledSelect = class MdFilledSelect extends _internal_filled_select_js__WEBPACK_IMPORTED_MODULE_1__.FilledSelect {
};
MdFilledSelect.styles = [_internal_shared_styles_js__WEBPACK_IMPORTED_MODULE_3__.styles, _internal_filled_select_styles_js__WEBPACK_IMPORTED_MODULE_2__.styles];
MdFilledSelect = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.customElement)('md-filled-select')
], MdFilledSelect);

//# sourceMappingURL=filled-select.js.map

/***/ }),

/***/ "./node_modules/@material/web/select/internal/filled-select-styles.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@material/web/select/internal/filled-select-styles.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   styles: () => (/* binding */ styles)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
// Generated stylesheet for ./select/internal/filled-select-styles.css.

const styles = (0,lit__WEBPACK_IMPORTED_MODULE_0__.css) `:host{--_text-field-active-indicator-color: var(--md-filled-select-text-field-active-indicator-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-active-indicator-height: var(--md-filled-select-text-field-active-indicator-height, 1px);--_text-field-container-color: var(--md-filled-select-text-field-container-color, var(--md-sys-color-surface-container-highest, #e6e0e9));--_text-field-disabled-active-indicator-color: var(--md-filled-select-text-field-disabled-active-indicator-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-disabled-active-indicator-height: var(--md-filled-select-text-field-disabled-active-indicator-height, 1px);--_text-field-disabled-active-indicator-opacity: var(--md-filled-select-text-field-disabled-active-indicator-opacity, 0.38);--_text-field-disabled-container-color: var(--md-filled-select-text-field-disabled-container-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-disabled-container-opacity: var(--md-filled-select-text-field-disabled-container-opacity, 0.04);--_text-field-disabled-input-text-color: var(--md-filled-select-text-field-disabled-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-disabled-input-text-opacity: var(--md-filled-select-text-field-disabled-input-text-opacity, 0.38);--_text-field-disabled-label-text-color: var(--md-filled-select-text-field-disabled-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-disabled-label-text-opacity: var(--md-filled-select-text-field-disabled-label-text-opacity, 0.38);--_text-field-disabled-leading-icon-color: var(--md-filled-select-text-field-disabled-leading-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-disabled-leading-icon-opacity: var(--md-filled-select-text-field-disabled-leading-icon-opacity, 0.38);--_text-field-disabled-supporting-text-color: var(--md-filled-select-text-field-disabled-supporting-text-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-disabled-supporting-text-opacity: var(--md-filled-select-text-field-disabled-supporting-text-opacity, 0.38);--_text-field-disabled-trailing-icon-color: var(--md-filled-select-text-field-disabled-trailing-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-disabled-trailing-icon-opacity: var(--md-filled-select-text-field-disabled-trailing-icon-opacity, 0.38);--_text-field-error-active-indicator-color: var(--md-filled-select-text-field-error-active-indicator-color, var(--md-sys-color-error, #b3261e));--_text-field-error-focus-active-indicator-color: var(--md-filled-select-text-field-error-focus-active-indicator-color, var(--md-sys-color-error, #b3261e));--_text-field-error-focus-input-text-color: var(--md-filled-select-text-field-error-focus-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-error-focus-label-text-color: var(--md-filled-select-text-field-error-focus-label-text-color, var(--md-sys-color-error, #b3261e));--_text-field-error-focus-leading-icon-color: var(--md-filled-select-text-field-error-focus-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-error-focus-supporting-text-color: var(--md-filled-select-text-field-error-focus-supporting-text-color, var(--md-sys-color-error, #b3261e));--_text-field-error-focus-trailing-icon-color: var(--md-filled-select-text-field-error-focus-trailing-icon-color, var(--md-sys-color-error, #b3261e));--_text-field-error-hover-active-indicator-color: var(--md-filled-select-text-field-error-hover-active-indicator-color, var(--md-sys-color-on-error-container, #410e0b));--_text-field-error-hover-input-text-color: var(--md-filled-select-text-field-error-hover-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-error-hover-label-text-color: var(--md-filled-select-text-field-error-hover-label-text-color, var(--md-sys-color-on-error-container, #410e0b));--_text-field-error-hover-leading-icon-color: var(--md-filled-select-text-field-error-hover-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-error-hover-state-layer-color: var(--md-filled-select-text-field-error-hover-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-error-hover-state-layer-opacity: var(--md-filled-select-text-field-error-hover-state-layer-opacity, 0.08);--_text-field-error-hover-supporting-text-color: var(--md-filled-select-text-field-error-hover-supporting-text-color, var(--md-sys-color-error, #b3261e));--_text-field-error-hover-trailing-icon-color: var(--md-filled-select-text-field-error-hover-trailing-icon-color, var(--md-sys-color-on-error-container, #410e0b));--_text-field-error-input-text-color: var(--md-filled-select-text-field-error-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-error-label-text-color: var(--md-filled-select-text-field-error-label-text-color, var(--md-sys-color-error, #b3261e));--_text-field-error-leading-icon-color: var(--md-filled-select-text-field-error-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-error-supporting-text-color: var(--md-filled-select-text-field-error-supporting-text-color, var(--md-sys-color-error, #b3261e));--_text-field-error-trailing-icon-color: var(--md-filled-select-text-field-error-trailing-icon-color, var(--md-sys-color-error, #b3261e));--_text-field-focus-active-indicator-color: var(--md-filled-select-text-field-focus-active-indicator-color, var(--md-sys-color-primary, #6750a4));--_text-field-focus-active-indicator-height: var(--md-filled-select-text-field-focus-active-indicator-height, 3px);--_text-field-focus-input-text-color: var(--md-filled-select-text-field-focus-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-focus-label-text-color: var(--md-filled-select-text-field-focus-label-text-color, var(--md-sys-color-primary, #6750a4));--_text-field-focus-leading-icon-color: var(--md-filled-select-text-field-focus-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-focus-supporting-text-color: var(--md-filled-select-text-field-focus-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-focus-trailing-icon-color: var(--md-filled-select-text-field-focus-trailing-icon-color, var(--md-sys-color-primary, #6750a4));--_text-field-hover-active-indicator-color: var(--md-filled-select-text-field-hover-active-indicator-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-hover-active-indicator-height: var(--md-filled-select-text-field-hover-active-indicator-height, 1px);--_text-field-hover-input-text-color: var(--md-filled-select-text-field-hover-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-hover-label-text-color: var(--md-filled-select-text-field-hover-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-hover-leading-icon-color: var(--md-filled-select-text-field-hover-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-hover-state-layer-color: var(--md-filled-select-text-field-hover-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-hover-state-layer-opacity: var(--md-filled-select-text-field-hover-state-layer-opacity, 0.08);--_text-field-hover-supporting-text-color: var(--md-filled-select-text-field-hover-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-hover-trailing-icon-color: var(--md-filled-select-text-field-hover-trailing-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-input-text-color: var(--md-filled-select-text-field-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-input-text-font: var(--md-filled-select-text-field-input-text-font, var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto)));--_text-field-input-text-line-height: var(--md-filled-select-text-field-input-text-line-height, var(--md-sys-typescale-body-large-line-height, 1.5rem));--_text-field-input-text-size: var(--md-filled-select-text-field-input-text-size, var(--md-sys-typescale-body-large-size, 1rem));--_text-field-input-text-weight: var(--md-filled-select-text-field-input-text-weight, var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400)));--_text-field-label-text-color: var(--md-filled-select-text-field-label-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-label-text-font: var(--md-filled-select-text-field-label-text-font, var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto)));--_text-field-label-text-line-height: var(--md-filled-select-text-field-label-text-line-height, var(--md-sys-typescale-body-large-line-height, 1.5rem));--_text-field-label-text-populated-line-height: var(--md-filled-select-text-field-label-text-populated-line-height, var(--md-sys-typescale-body-small-line-height, 1rem));--_text-field-label-text-populated-size: var(--md-filled-select-text-field-label-text-populated-size, var(--md-sys-typescale-body-small-size, 0.75rem));--_text-field-label-text-size: var(--md-filled-select-text-field-label-text-size, var(--md-sys-typescale-body-large-size, 1rem));--_text-field-label-text-weight: var(--md-filled-select-text-field-label-text-weight, var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400)));--_text-field-leading-icon-color: var(--md-filled-select-text-field-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-leading-icon-size: var(--md-filled-select-text-field-leading-icon-size, 24px);--_text-field-supporting-text-color: var(--md-filled-select-text-field-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-supporting-text-font: var(--md-filled-select-text-field-supporting-text-font, var(--md-sys-typescale-body-small-font, var(--md-ref-typeface-plain, Roboto)));--_text-field-supporting-text-line-height: var(--md-filled-select-text-field-supporting-text-line-height, var(--md-sys-typescale-body-small-line-height, 1rem));--_text-field-supporting-text-size: var(--md-filled-select-text-field-supporting-text-size, var(--md-sys-typescale-body-small-size, 0.75rem));--_text-field-supporting-text-weight: var(--md-filled-select-text-field-supporting-text-weight, var(--md-sys-typescale-body-small-weight, var(--md-ref-typeface-weight-regular, 400)));--_text-field-trailing-icon-color: var(--md-filled-select-text-field-trailing-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-trailing-icon-size: var(--md-filled-select-text-field-trailing-icon-size, 24px);--_text-field-container-shape-start-start: var(--md-filled-select-text-field-container-shape-start-start, var(--md-filled-select-text-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_text-field-container-shape-start-end: var(--md-filled-select-text-field-container-shape-start-end, var(--md-filled-select-text-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_text-field-container-shape-end-end: var(--md-filled-select-text-field-container-shape-end-end, var(--md-filled-select-text-field-container-shape, var(--md-sys-shape-corner-none, 0px)));--_text-field-container-shape-end-start: var(--md-filled-select-text-field-container-shape-end-start, var(--md-filled-select-text-field-container-shape, var(--md-sys-shape-corner-none, 0px)));--md-filled-field-active-indicator-color: var(--_text-field-active-indicator-color);--md-filled-field-active-indicator-height: var(--_text-field-active-indicator-height);--md-filled-field-container-color: var(--_text-field-container-color);--md-filled-field-container-shape-end-end: var(--_text-field-container-shape-end-end);--md-filled-field-container-shape-end-start: var(--_text-field-container-shape-end-start);--md-filled-field-container-shape-start-end: var(--_text-field-container-shape-start-end);--md-filled-field-container-shape-start-start: var(--_text-field-container-shape-start-start);--md-filled-field-content-color: var(--_text-field-input-text-color);--md-filled-field-content-font: var(--_text-field-input-text-font);--md-filled-field-content-line-height: var(--_text-field-input-text-line-height);--md-filled-field-content-size: var(--_text-field-input-text-size);--md-filled-field-content-weight: var(--_text-field-input-text-weight);--md-filled-field-disabled-active-indicator-color: var(--_text-field-disabled-active-indicator-color);--md-filled-field-disabled-active-indicator-height: var(--_text-field-disabled-active-indicator-height);--md-filled-field-disabled-active-indicator-opacity: var(--_text-field-disabled-active-indicator-opacity);--md-filled-field-disabled-container-color: var(--_text-field-disabled-container-color);--md-filled-field-disabled-container-opacity: var(--_text-field-disabled-container-opacity);--md-filled-field-disabled-content-color: var(--_text-field-disabled-input-text-color);--md-filled-field-disabled-content-opacity: var(--_text-field-disabled-input-text-opacity);--md-filled-field-disabled-label-text-color: var(--_text-field-disabled-label-text-color);--md-filled-field-disabled-label-text-opacity: var(--_text-field-disabled-label-text-opacity);--md-filled-field-disabled-leading-content-color: var(--_text-field-disabled-leading-icon-color);--md-filled-field-disabled-leading-content-opacity: var(--_text-field-disabled-leading-icon-opacity);--md-filled-field-disabled-supporting-text-color: var(--_text-field-disabled-supporting-text-color);--md-filled-field-disabled-supporting-text-opacity: var(--_text-field-disabled-supporting-text-opacity);--md-filled-field-disabled-trailing-content-color: var(--_text-field-disabled-trailing-icon-color);--md-filled-field-disabled-trailing-content-opacity: var(--_text-field-disabled-trailing-icon-opacity);--md-filled-field-error-active-indicator-color: var(--_text-field-error-active-indicator-color);--md-filled-field-error-content-color: var(--_text-field-error-input-text-color);--md-filled-field-error-focus-active-indicator-color: var(--_text-field-error-focus-active-indicator-color);--md-filled-field-error-focus-content-color: var(--_text-field-error-focus-input-text-color);--md-filled-field-error-focus-label-text-color: var(--_text-field-error-focus-label-text-color);--md-filled-field-error-focus-leading-content-color: var(--_text-field-error-focus-leading-icon-color);--md-filled-field-error-focus-supporting-text-color: var(--_text-field-error-focus-supporting-text-color);--md-filled-field-error-focus-trailing-content-color: var(--_text-field-error-focus-trailing-icon-color);--md-filled-field-error-hover-active-indicator-color: var(--_text-field-error-hover-active-indicator-color);--md-filled-field-error-hover-content-color: var(--_text-field-error-hover-input-text-color);--md-filled-field-error-hover-label-text-color: var(--_text-field-error-hover-label-text-color);--md-filled-field-error-hover-leading-content-color: var(--_text-field-error-hover-leading-icon-color);--md-filled-field-error-hover-state-layer-color: var(--_text-field-error-hover-state-layer-color);--md-filled-field-error-hover-state-layer-opacity: var(--_text-field-error-hover-state-layer-opacity);--md-filled-field-error-hover-supporting-text-color: var(--_text-field-error-hover-supporting-text-color);--md-filled-field-error-hover-trailing-content-color: var(--_text-field-error-hover-trailing-icon-color);--md-filled-field-error-label-text-color: var(--_text-field-error-label-text-color);--md-filled-field-error-leading-content-color: var(--_text-field-error-leading-icon-color);--md-filled-field-error-supporting-text-color: var(--_text-field-error-supporting-text-color);--md-filled-field-error-trailing-content-color: var(--_text-field-error-trailing-icon-color);--md-filled-field-focus-active-indicator-color: var(--_text-field-focus-active-indicator-color);--md-filled-field-focus-active-indicator-height: var(--_text-field-focus-active-indicator-height);--md-filled-field-focus-content-color: var(--_text-field-focus-input-text-color);--md-filled-field-focus-label-text-color: var(--_text-field-focus-label-text-color);--md-filled-field-focus-leading-content-color: var(--_text-field-focus-leading-icon-color);--md-filled-field-focus-supporting-text-color: var(--_text-field-focus-supporting-text-color);--md-filled-field-focus-trailing-content-color: var(--_text-field-focus-trailing-icon-color);--md-filled-field-hover-active-indicator-color: var(--_text-field-hover-active-indicator-color);--md-filled-field-hover-active-indicator-height: var(--_text-field-hover-active-indicator-height);--md-filled-field-hover-content-color: var(--_text-field-hover-input-text-color);--md-filled-field-hover-label-text-color: var(--_text-field-hover-label-text-color);--md-filled-field-hover-leading-content-color: var(--_text-field-hover-leading-icon-color);--md-filled-field-hover-state-layer-color: var(--_text-field-hover-state-layer-color);--md-filled-field-hover-state-layer-opacity: var(--_text-field-hover-state-layer-opacity);--md-filled-field-hover-supporting-text-color: var(--_text-field-hover-supporting-text-color);--md-filled-field-hover-trailing-content-color: var(--_text-field-hover-trailing-icon-color);--md-filled-field-label-text-color: var(--_text-field-label-text-color);--md-filled-field-label-text-font: var(--_text-field-label-text-font);--md-filled-field-label-text-line-height: var(--_text-field-label-text-line-height);--md-filled-field-label-text-populated-line-height: var(--_text-field-label-text-populated-line-height);--md-filled-field-label-text-populated-size: var(--_text-field-label-text-populated-size);--md-filled-field-label-text-size: var(--_text-field-label-text-size);--md-filled-field-label-text-weight: var(--_text-field-label-text-weight);--md-filled-field-leading-content-color: var(--_text-field-leading-icon-color);--md-filled-field-supporting-text-color: var(--_text-field-supporting-text-color);--md-filled-field-supporting-text-font: var(--_text-field-supporting-text-font);--md-filled-field-supporting-text-line-height: var(--_text-field-supporting-text-line-height);--md-filled-field-supporting-text-size: var(--_text-field-supporting-text-size);--md-filled-field-supporting-text-weight: var(--_text-field-supporting-text-weight);--md-filled-field-trailing-content-color: var(--_text-field-trailing-icon-color)}[has-start] .icon.leading{font-size:var(--_text-field-leading-icon-size);height:var(--_text-field-leading-icon-size);width:var(--_text-field-leading-icon-size)}.icon.trailing{font-size:var(--_text-field-trailing-icon-size);height:var(--_text-field-trailing-icon-size);width:var(--_text-field-trailing-icon-size)}
`;
//# sourceMappingURL=filled-select-styles.js.map

/***/ }),

/***/ "./node_modules/@material/web/select/internal/filled-select.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@material/web/select/internal/filled-select.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FilledSelect: () => (/* binding */ FilledSelect)
/* harmony export */ });
/* harmony import */ var _field_filled_field_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../field/filled-field.js */ "./node_modules/@material/web/field/filled-field.js");
/* harmony import */ var lit_static_html_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit/static-html.js */ "./node_modules/lit/static-html.js");
/* harmony import */ var _select_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./select.js */ "./node_modules/@material/web/select/internal/select.js");
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */



// tslint:disable-next-line:enforce-comments-on-exported-symbols
class FilledSelect extends _select_js__WEBPACK_IMPORTED_MODULE_2__.Select {
    constructor() {
        super(...arguments);
        this.fieldTag = (0,lit_static_html_js__WEBPACK_IMPORTED_MODULE_1__.literal) `md-filled-field`;
    }
}
//# sourceMappingURL=filled-select.js.map

/***/ }),

/***/ "./node_modules/@material/web/select/internal/outlined-select-styles.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@material/web/select/internal/outlined-select-styles.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   styles: () => (/* binding */ styles)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
// Generated stylesheet for ./select/internal/outlined-select-styles.css.

const styles = (0,lit__WEBPACK_IMPORTED_MODULE_0__.css) `:host{--_text-field-disabled-input-text-color: var(--md-outlined-select-text-field-disabled-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-disabled-input-text-opacity: var(--md-outlined-select-text-field-disabled-input-text-opacity, 0.38);--_text-field-disabled-label-text-color: var(--md-outlined-select-text-field-disabled-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-disabled-label-text-opacity: var(--md-outlined-select-text-field-disabled-label-text-opacity, 0.38);--_text-field-disabled-leading-icon-color: var(--md-outlined-select-text-field-disabled-leading-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-disabled-leading-icon-opacity: var(--md-outlined-select-text-field-disabled-leading-icon-opacity, 0.38);--_text-field-disabled-outline-color: var(--md-outlined-select-text-field-disabled-outline-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-disabled-outline-opacity: var(--md-outlined-select-text-field-disabled-outline-opacity, 0.12);--_text-field-disabled-outline-width: var(--md-outlined-select-text-field-disabled-outline-width, 1px);--_text-field-disabled-supporting-text-color: var(--md-outlined-select-text-field-disabled-supporting-text-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-disabled-supporting-text-opacity: var(--md-outlined-select-text-field-disabled-supporting-text-opacity, 0.38);--_text-field-disabled-trailing-icon-color: var(--md-outlined-select-text-field-disabled-trailing-icon-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-disabled-trailing-icon-opacity: var(--md-outlined-select-text-field-disabled-trailing-icon-opacity, 0.38);--_text-field-error-focus-input-text-color: var(--md-outlined-select-text-field-error-focus-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-error-focus-label-text-color: var(--md-outlined-select-text-field-error-focus-label-text-color, var(--md-sys-color-error, #b3261e));--_text-field-error-focus-leading-icon-color: var(--md-outlined-select-text-field-error-focus-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-error-focus-outline-color: var(--md-outlined-select-text-field-error-focus-outline-color, var(--md-sys-color-error, #b3261e));--_text-field-error-focus-supporting-text-color: var(--md-outlined-select-text-field-error-focus-supporting-text-color, var(--md-sys-color-error, #b3261e));--_text-field-error-focus-trailing-icon-color: var(--md-outlined-select-text-field-error-focus-trailing-icon-color, var(--md-sys-color-error, #b3261e));--_text-field-error-hover-input-text-color: var(--md-outlined-select-text-field-error-hover-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-error-hover-label-text-color: var(--md-outlined-select-text-field-error-hover-label-text-color, var(--md-sys-color-on-error-container, #410e0b));--_text-field-error-hover-leading-icon-color: var(--md-outlined-select-text-field-error-hover-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-error-hover-outline-color: var(--md-outlined-select-text-field-error-hover-outline-color, var(--md-sys-color-on-error-container, #410e0b));--_text-field-error-hover-supporting-text-color: var(--md-outlined-select-text-field-error-hover-supporting-text-color, var(--md-sys-color-error, #b3261e));--_text-field-error-hover-trailing-icon-color: var(--md-outlined-select-text-field-error-hover-trailing-icon-color, var(--md-sys-color-on-error-container, #410e0b));--_text-field-error-input-text-color: var(--md-outlined-select-text-field-error-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-error-label-text-color: var(--md-outlined-select-text-field-error-label-text-color, var(--md-sys-color-error, #b3261e));--_text-field-error-leading-icon-color: var(--md-outlined-select-text-field-error-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-error-outline-color: var(--md-outlined-select-text-field-error-outline-color, var(--md-sys-color-error, #b3261e));--_text-field-error-supporting-text-color: var(--md-outlined-select-text-field-error-supporting-text-color, var(--md-sys-color-error, #b3261e));--_text-field-error-trailing-icon-color: var(--md-outlined-select-text-field-error-trailing-icon-color, var(--md-sys-color-error, #b3261e));--_text-field-focus-input-text-color: var(--md-outlined-select-text-field-focus-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-focus-label-text-color: var(--md-outlined-select-text-field-focus-label-text-color, var(--md-sys-color-primary, #6750a4));--_text-field-focus-leading-icon-color: var(--md-outlined-select-text-field-focus-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-focus-outline-color: var(--md-outlined-select-text-field-focus-outline-color, var(--md-sys-color-primary, #6750a4));--_text-field-focus-outline-width: var(--md-outlined-select-text-field-focus-outline-width, 3px);--_text-field-focus-supporting-text-color: var(--md-outlined-select-text-field-focus-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-focus-trailing-icon-color: var(--md-outlined-select-text-field-focus-trailing-icon-color, var(--md-sys-color-primary, #6750a4));--_text-field-hover-input-text-color: var(--md-outlined-select-text-field-hover-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-hover-label-text-color: var(--md-outlined-select-text-field-hover-label-text-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-hover-leading-icon-color: var(--md-outlined-select-text-field-hover-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-hover-outline-color: var(--md-outlined-select-text-field-hover-outline-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-hover-outline-width: var(--md-outlined-select-text-field-hover-outline-width, 1px);--_text-field-hover-supporting-text-color: var(--md-outlined-select-text-field-hover-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-hover-trailing-icon-color: var(--md-outlined-select-text-field-hover-trailing-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-input-text-color: var(--md-outlined-select-text-field-input-text-color, var(--md-sys-color-on-surface, #1d1b20));--_text-field-input-text-font: var(--md-outlined-select-text-field-input-text-font, var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto)));--_text-field-input-text-line-height: var(--md-outlined-select-text-field-input-text-line-height, var(--md-sys-typescale-body-large-line-height, 1.5rem));--_text-field-input-text-size: var(--md-outlined-select-text-field-input-text-size, var(--md-sys-typescale-body-large-size, 1rem));--_text-field-input-text-weight: var(--md-outlined-select-text-field-input-text-weight, var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400)));--_text-field-label-text-color: var(--md-outlined-select-text-field-label-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-label-text-font: var(--md-outlined-select-text-field-label-text-font, var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto)));--_text-field-label-text-line-height: var(--md-outlined-select-text-field-label-text-line-height, var(--md-sys-typescale-body-large-line-height, 1.5rem));--_text-field-label-text-populated-line-height: var(--md-outlined-select-text-field-label-text-populated-line-height, var(--md-sys-typescale-body-small-line-height, 1rem));--_text-field-label-text-populated-size: var(--md-outlined-select-text-field-label-text-populated-size, var(--md-sys-typescale-body-small-size, 0.75rem));--_text-field-label-text-size: var(--md-outlined-select-text-field-label-text-size, var(--md-sys-typescale-body-large-size, 1rem));--_text-field-label-text-weight: var(--md-outlined-select-text-field-label-text-weight, var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400)));--_text-field-leading-icon-color: var(--md-outlined-select-text-field-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-leading-icon-size: var(--md-outlined-select-text-field-leading-icon-size, 24px);--_text-field-outline-color: var(--md-outlined-select-text-field-outline-color, var(--md-sys-color-outline, #79747e));--_text-field-outline-width: var(--md-outlined-select-text-field-outline-width, 1px);--_text-field-supporting-text-color: var(--md-outlined-select-text-field-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-supporting-text-font: var(--md-outlined-select-text-field-supporting-text-font, var(--md-sys-typescale-body-small-font, var(--md-ref-typeface-plain, Roboto)));--_text-field-supporting-text-line-height: var(--md-outlined-select-text-field-supporting-text-line-height, var(--md-sys-typescale-body-small-line-height, 1rem));--_text-field-supporting-text-size: var(--md-outlined-select-text-field-supporting-text-size, var(--md-sys-typescale-body-small-size, 0.75rem));--_text-field-supporting-text-weight: var(--md-outlined-select-text-field-supporting-text-weight, var(--md-sys-typescale-body-small-weight, var(--md-ref-typeface-weight-regular, 400)));--_text-field-trailing-icon-color: var(--md-outlined-select-text-field-trailing-icon-color, var(--md-sys-color-on-surface-variant, #49454f));--_text-field-trailing-icon-size: var(--md-outlined-select-text-field-trailing-icon-size, 24px);--_text-field-container-shape-start-start: var(--md-outlined-select-text-field-container-shape-start-start, var(--md-outlined-select-text-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_text-field-container-shape-start-end: var(--md-outlined-select-text-field-container-shape-start-end, var(--md-outlined-select-text-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_text-field-container-shape-end-end: var(--md-outlined-select-text-field-container-shape-end-end, var(--md-outlined-select-text-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--_text-field-container-shape-end-start: var(--md-outlined-select-text-field-container-shape-end-start, var(--md-outlined-select-text-field-container-shape, var(--md-sys-shape-corner-extra-small, 4px)));--md-outlined-field-container-shape-end-end: var(--_text-field-container-shape-end-end);--md-outlined-field-container-shape-end-start: var(--_text-field-container-shape-end-start);--md-outlined-field-container-shape-start-end: var(--_text-field-container-shape-start-end);--md-outlined-field-container-shape-start-start: var(--_text-field-container-shape-start-start);--md-outlined-field-content-color: var(--_text-field-input-text-color);--md-outlined-field-content-font: var(--_text-field-input-text-font);--md-outlined-field-content-line-height: var(--_text-field-input-text-line-height);--md-outlined-field-content-size: var(--_text-field-input-text-size);--md-outlined-field-content-weight: var(--_text-field-input-text-weight);--md-outlined-field-disabled-content-color: var(--_text-field-disabled-input-text-color);--md-outlined-field-disabled-content-opacity: var(--_text-field-disabled-input-text-opacity);--md-outlined-field-disabled-label-text-color: var(--_text-field-disabled-label-text-color);--md-outlined-field-disabled-label-text-opacity: var(--_text-field-disabled-label-text-opacity);--md-outlined-field-disabled-leading-content-color: var(--_text-field-disabled-leading-icon-color);--md-outlined-field-disabled-leading-content-opacity: var(--_text-field-disabled-leading-icon-opacity);--md-outlined-field-disabled-outline-color: var(--_text-field-disabled-outline-color);--md-outlined-field-disabled-outline-opacity: var(--_text-field-disabled-outline-opacity);--md-outlined-field-disabled-outline-width: var(--_text-field-disabled-outline-width);--md-outlined-field-disabled-supporting-text-color: var(--_text-field-disabled-supporting-text-color);--md-outlined-field-disabled-supporting-text-opacity: var(--_text-field-disabled-supporting-text-opacity);--md-outlined-field-disabled-trailing-content-color: var(--_text-field-disabled-trailing-icon-color);--md-outlined-field-disabled-trailing-content-opacity: var(--_text-field-disabled-trailing-icon-opacity);--md-outlined-field-error-content-color: var(--_text-field-error-input-text-color);--md-outlined-field-error-focus-content-color: var(--_text-field-error-focus-input-text-color);--md-outlined-field-error-focus-label-text-color: var(--_text-field-error-focus-label-text-color);--md-outlined-field-error-focus-leading-content-color: var(--_text-field-error-focus-leading-icon-color);--md-outlined-field-error-focus-outline-color: var(--_text-field-error-focus-outline-color);--md-outlined-field-error-focus-supporting-text-color: var(--_text-field-error-focus-supporting-text-color);--md-outlined-field-error-focus-trailing-content-color: var(--_text-field-error-focus-trailing-icon-color);--md-outlined-field-error-hover-content-color: var(--_text-field-error-hover-input-text-color);--md-outlined-field-error-hover-label-text-color: var(--_text-field-error-hover-label-text-color);--md-outlined-field-error-hover-leading-content-color: var(--_text-field-error-hover-leading-icon-color);--md-outlined-field-error-hover-outline-color: var(--_text-field-error-hover-outline-color);--md-outlined-field-error-hover-supporting-text-color: var(--_text-field-error-hover-supporting-text-color);--md-outlined-field-error-hover-trailing-content-color: var(--_text-field-error-hover-trailing-icon-color);--md-outlined-field-error-label-text-color: var(--_text-field-error-label-text-color);--md-outlined-field-error-leading-content-color: var(--_text-field-error-leading-icon-color);--md-outlined-field-error-outline-color: var(--_text-field-error-outline-color);--md-outlined-field-error-supporting-text-color: var(--_text-field-error-supporting-text-color);--md-outlined-field-error-trailing-content-color: var(--_text-field-error-trailing-icon-color);--md-outlined-field-focus-content-color: var(--_text-field-focus-input-text-color);--md-outlined-field-focus-label-text-color: var(--_text-field-focus-label-text-color);--md-outlined-field-focus-leading-content-color: var(--_text-field-focus-leading-icon-color);--md-outlined-field-focus-outline-color: var(--_text-field-focus-outline-color);--md-outlined-field-focus-outline-width: var(--_text-field-focus-outline-width);--md-outlined-field-focus-supporting-text-color: var(--_text-field-focus-supporting-text-color);--md-outlined-field-focus-trailing-content-color: var(--_text-field-focus-trailing-icon-color);--md-outlined-field-hover-content-color: var(--_text-field-hover-input-text-color);--md-outlined-field-hover-label-text-color: var(--_text-field-hover-label-text-color);--md-outlined-field-hover-leading-content-color: var(--_text-field-hover-leading-icon-color);--md-outlined-field-hover-outline-color: var(--_text-field-hover-outline-color);--md-outlined-field-hover-outline-width: var(--_text-field-hover-outline-width);--md-outlined-field-hover-supporting-text-color: var(--_text-field-hover-supporting-text-color);--md-outlined-field-hover-trailing-content-color: var(--_text-field-hover-trailing-icon-color);--md-outlined-field-label-text-color: var(--_text-field-label-text-color);--md-outlined-field-label-text-font: var(--_text-field-label-text-font);--md-outlined-field-label-text-line-height: var(--_text-field-label-text-line-height);--md-outlined-field-label-text-populated-line-height: var(--_text-field-label-text-populated-line-height);--md-outlined-field-label-text-populated-size: var(--_text-field-label-text-populated-size);--md-outlined-field-label-text-size: var(--_text-field-label-text-size);--md-outlined-field-label-text-weight: var(--_text-field-label-text-weight);--md-outlined-field-leading-content-color: var(--_text-field-leading-icon-color);--md-outlined-field-outline-color: var(--_text-field-outline-color);--md-outlined-field-outline-width: var(--_text-field-outline-width);--md-outlined-field-supporting-text-color: var(--_text-field-supporting-text-color);--md-outlined-field-supporting-text-font: var(--_text-field-supporting-text-font);--md-outlined-field-supporting-text-line-height: var(--_text-field-supporting-text-line-height);--md-outlined-field-supporting-text-size: var(--_text-field-supporting-text-size);--md-outlined-field-supporting-text-weight: var(--_text-field-supporting-text-weight);--md-outlined-field-trailing-content-color: var(--_text-field-trailing-icon-color)}[has-start] .icon.leading{font-size:var(--_text-field-leading-icon-size);height:var(--_text-field-leading-icon-size);width:var(--_text-field-leading-icon-size)}.icon.trailing{font-size:var(--_text-field-trailing-icon-size);height:var(--_text-field-trailing-icon-size);width:var(--_text-field-trailing-icon-size)}
`;
//# sourceMappingURL=outlined-select-styles.js.map

/***/ }),

/***/ "./node_modules/@material/web/select/internal/outlined-select.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@material/web/select/internal/outlined-select.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OutlinedSelect: () => (/* binding */ OutlinedSelect)
/* harmony export */ });
/* harmony import */ var _field_outlined_field_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../field/outlined-field.js */ "./node_modules/@material/web/field/outlined-field.js");
/* harmony import */ var lit_static_html_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit/static-html.js */ "./node_modules/lit/static-html.js");
/* harmony import */ var _select_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./select.js */ "./node_modules/@material/web/select/internal/select.js");
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */



// tslint:disable-next-line:enforce-comments-on-exported-symbols
class OutlinedSelect extends _select_js__WEBPACK_IMPORTED_MODULE_2__.Select {
    constructor() {
        super(...arguments);
        this.fieldTag = (0,lit_static_html_js__WEBPACK_IMPORTED_MODULE_1__.literal) `md-outlined-field`;
    }
}
//# sourceMappingURL=outlined-select.js.map

/***/ }),

/***/ "./node_modules/@material/web/select/internal/select.js":
/*!**************************************************************!*\
  !*** ./node_modules/@material/web/select/internal/select.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Select: () => (/* binding */ Select)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _menu_menu_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../menu/menu.js */ "./node_modules/@material/web/menu/menu.js");
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lit/decorators.js */ "./node_modules/lit/decorators.js");
/* harmony import */ var lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lit/directives/class-map.js */ "./node_modules/lit/directives/class-map.js");
/* harmony import */ var lit_directives_style_map_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lit/directives/style-map.js */ "./node_modules/lit/directives/style-map.js");
/* harmony import */ var lit_static_html_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lit/static-html.js */ "./node_modules/lit/static-html.js");
/* harmony import */ var _internal_aria_delegate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../internal/aria/delegate.js */ "./node_modules/@material/web/internal/aria/delegate.js");
/* harmony import */ var _internal_events_redispatch_event_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../internal/events/redispatch-event.js */ "./node_modules/@material/web/internal/events/redispatch-event.js");
/* harmony import */ var _labs_behaviors_constraint_validation_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../labs/behaviors/constraint-validation.js */ "./node_modules/@material/web/labs/behaviors/constraint-validation.js");
/* harmony import */ var _labs_behaviors_element_internals_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../labs/behaviors/element-internals.js */ "./node_modules/@material/web/labs/behaviors/element-internals.js");
/* harmony import */ var _labs_behaviors_form_associated_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../labs/behaviors/form-associated.js */ "./node_modules/@material/web/labs/behaviors/form-associated.js");
/* harmony import */ var _labs_behaviors_on_report_validity_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../labs/behaviors/on-report-validity.js */ "./node_modules/@material/web/labs/behaviors/on-report-validity.js");
/* harmony import */ var _labs_behaviors_validators_select_validator_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../labs/behaviors/validators/select-validator.js */ "./node_modules/@material/web/labs/behaviors/validators/select-validator.js");
/* harmony import */ var _list_internal_list_navigation_helpers_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../list/internal/list-navigation-helpers.js */ "./node_modules/@material/web/list/internal/list-navigation-helpers.js");
/* harmony import */ var _menu_internal_controllers_shared_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../menu/internal/controllers/shared.js */ "./node_modules/@material/web/menu/internal/controllers/shared.js");
/* harmony import */ var _menu_internal_controllers_typeaheadController_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../menu/internal/controllers/typeaheadController.js */ "./node_modules/@material/web/menu/internal/controllers/typeaheadController.js");
/* harmony import */ var _menu_internal_menu_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../menu/internal/menu.js */ "./node_modules/@material/web/menu/internal/menu.js");
/* harmony import */ var _shared_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./shared.js */ "./node_modules/@material/web/select/internal/shared.js");
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
var _a;



















const VALUE = Symbol('value');
// Separate variable needed for closure.
const selectBaseClass = (0,_internal_aria_delegate_js__WEBPACK_IMPORTED_MODULE_6__.mixinDelegatesAria)((0,_labs_behaviors_on_report_validity_js__WEBPACK_IMPORTED_MODULE_11__.mixinOnReportValidity)((0,_labs_behaviors_constraint_validation_js__WEBPACK_IMPORTED_MODULE_8__.mixinConstraintValidation)((0,_labs_behaviors_form_associated_js__WEBPACK_IMPORTED_MODULE_10__.mixinFormAssociated)((0,_labs_behaviors_element_internals_js__WEBPACK_IMPORTED_MODULE_9__.mixinElementInternals)(lit__WEBPACK_IMPORTED_MODULE_1__.LitElement)))));
/**
 * @fires change {Event} The native `change` event on
 * [`<input>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)
 * --bubbles
 * @fires input {InputEvent} The native `input` event on
 * [`<input>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)
 * --bubbles --composed
 * @fires opening {Event} Fired when the select's menu is about to open.
 * @fires opened {Event} Fired when the select's menu has finished animations
 * and opened.
 * @fires closing {Event} Fired when the select's menu is about to close.
 * @fires closed {Event} Fired when the select's menu has finished animations
 * and closed.
 */
class Select extends selectBaseClass {
    /**
     * The value of the currently selected option.
     *
     * Note: For SSR, set `[selected]` on the requested option and `displayText`
     * rather than setting `value` setting `value` will incur a DOM query.
     */
    get value() {
        return this[VALUE];
    }
    set value(value) {
        if (lit__WEBPACK_IMPORTED_MODULE_1__.isServer)
            return;
        this.lastUserSetValue = value;
        this.select(value);
    }
    get options() {
        // NOTE: this does a DOM query.
        return (this.menu?.items ?? []);
    }
    /**
     * The index of the currently selected option.
     *
     * Note: For SSR, set `[selected]` on the requested option and `displayText`
     * rather than setting `selectedIndex` setting `selectedIndex` will incur a
     * DOM query.
     */
    get selectedIndex() {
        // tslint:disable-next-line:enforce-name-casing
        const [_option, index] = (this.getSelectedOptions() ?? [])[0] ?? [];
        return index ?? -1;
    }
    set selectedIndex(index) {
        this.lastUserSetSelectedIndex = index;
        this.selectIndex(index);
    }
    /**
     * Returns an array of selected options.
     *
     * NOTE: md-select only supports single selection.
     */
    get selectedOptions() {
        return (this.getSelectedOptions() ?? []).map(([option]) => option);
    }
    get hasError() {
        return this.error || this.nativeError;
    }
    constructor() {
        super();
        /**
         * Opens the menu synchronously with no animation.
         */
        this.quick = false;
        /**
         * Whether or not the select is required.
         */
        this.required = false;
        /**
         * The error message that replaces supporting text when `error` is true. If
         * `errorText` is an empty string, then the supporting text will continue to
         * show.
         *
         * This error message overrides the error message displayed by
         * `reportValidity()`.
         */
        this.errorText = '';
        /**
         * The floating label for the field.
         */
        this.label = '';
        /**
         * Disables the asterisk on the floating label, when the select is
         * required.
         */
        this.noAsterisk = false;
        /**
         * Conveys additional information below the select, such as how it should
         * be used.
         */
        this.supportingText = '';
        /**
         * Gets or sets whether or not the select is in a visually invalid state.
         *
         * This error state overrides the error state controlled by
         * `reportValidity()`.
         */
        this.error = false;
        /**
         * Whether or not the underlying md-menu should be position: fixed to display
         * in a top-level manner, or position: absolute.
         *
         * position:fixed is useful for cases where select is inside of another
         * element with stacking context and hidden overflows such as `md-dialog`.
         */
        this.menuPositioning = 'popover';
        /**
         * Clamps the menu-width to the width of the select.
         */
        this.clampMenuWidth = false;
        /**
         * The max time between the keystrokes of the typeahead select / menu behavior
         * before it clears the typeahead buffer.
         */
        this.typeaheadDelay = _menu_internal_menu_js__WEBPACK_IMPORTED_MODULE_16__.DEFAULT_TYPEAHEAD_BUFFER_TIME;
        /**
         * Whether or not the text field has a leading icon. Used for SSR.
         */
        this.hasLeadingIcon = false;
        /**
         * Text to display in the field. Only set for SSR.
         */
        this.displayText = '';
        /**
         * Whether the menu should be aligned to the start or the end of the select's
         * textbox.
         */
        this.menuAlign = 'start';
        this[_a] = '';
        /**
         * Used for initializing select when the user sets the `value` directly.
         */
        this.lastUserSetValue = null;
        /**
         * Used for initializing select when the user sets the `selectedIndex`
         * directly.
         */
        this.lastUserSetSelectedIndex = null;
        /**
         * Used for `input` and `change` event change detection.
         */
        this.lastSelectedOption = null;
        // tslint:disable-next-line:enforce-name-casing
        this.lastSelectedOptionRecords = [];
        /**
         * Whether or not a native error has been reported via `reportValidity()`.
         */
        this.nativeError = false;
        /**
         * The validation message displayed from a native error via
         * `reportValidity()`.
         */
        this.nativeErrorText = '';
        this.focused = false;
        this.open = false;
        this.defaultFocus = _menu_internal_controllers_shared_js__WEBPACK_IMPORTED_MODULE_14__.FocusState.NONE;
        // Have to keep track of previous open because it's state and private and thus
        // cannot be tracked in PropertyValues<this> map.
        this.prevOpen = this.open;
        this.selectWidth = 0;
        if (lit__WEBPACK_IMPORTED_MODULE_1__.isServer) {
            return;
        }
        this.addEventListener('focus', this.handleFocus.bind(this));
        this.addEventListener('blur', this.handleBlur.bind(this));
    }
    /**
     * Selects an option given the value of the option, and updates MdSelect's
     * value.
     */
    select(value) {
        const optionToSelect = this.options.find((option) => option.value === value);
        if (optionToSelect) {
            this.selectItem(optionToSelect);
        }
    }
    /**
     * Selects an option given the index of the option, and updates MdSelect's
     * value.
     */
    selectIndex(index) {
        const optionToSelect = this.options[index];
        if (optionToSelect) {
            this.selectItem(optionToSelect);
        }
    }
    /**
     * Reset the select to its default value.
     */
    reset() {
        for (const option of this.options) {
            option.selected = option.hasAttribute('selected');
        }
        this.updateValueAndDisplayText();
        this.nativeError = false;
        this.nativeErrorText = '';
    }
    [(_a = VALUE, _labs_behaviors_on_report_validity_js__WEBPACK_IMPORTED_MODULE_11__.onReportValidity)](invalidEvent) {
        // Prevent default pop-up behavior.
        invalidEvent?.preventDefault();
        const prevMessage = this.getErrorText();
        this.nativeError = !!invalidEvent;
        this.nativeErrorText = this.validationMessage;
        if (prevMessage === this.getErrorText()) {
            this.field?.reannounceError();
        }
    }
    update(changed) {
        // In SSR the options will be ready to query, so try to figure out what
        // the value and display text should be.
        if (!this.hasUpdated) {
            this.initUserSelection();
        }
        // We have just opened the menu.
        // We are only able to check for the select's rect in `update()` instead of
        // having to wait for `updated()` because the menu can never be open on
        // first render since it is not settable and Lit SSR does not support click
        // events which would open the menu.
        if (this.prevOpen !== this.open && this.open) {
            const selectRect = this.getBoundingClientRect();
            this.selectWidth = selectRect.width;
        }
        this.prevOpen = this.open;
        super.update(changed);
    }
    render() {
        return (0,lit__WEBPACK_IMPORTED_MODULE_1__.html) `
      <span
        class="select ${(0,lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_3__.classMap)(this.getRenderClasses())}"
        @focusout=${this.handleFocusout}>
        ${this.renderField()} ${this.renderMenu()}
      </span>
    `;
    }
    async firstUpdated(changed) {
        await this.menu?.updateComplete;
        // If this has been handled on update already due to SSR, try again.
        if (!this.lastSelectedOptionRecords.length) {
            this.initUserSelection();
        }
        // Case for when the DOM is streaming, there are no children, and a child
        // has [selected] set on it, we need to wait for DOM to render something.
        if (!this.lastSelectedOptionRecords.length &&
            !lit__WEBPACK_IMPORTED_MODULE_1__.isServer &&
            !this.options.length) {
            setTimeout(() => {
                this.updateValueAndDisplayText();
            });
        }
        super.firstUpdated(changed);
    }
    getRenderClasses() {
        return {
            'disabled': this.disabled,
            'error': this.error,
            'open': this.open,
        };
    }
    renderField() {
        const ariaLabel = this.ariaLabel || this.label;
        return (0,lit_static_html_js__WEBPACK_IMPORTED_MODULE_5__.html) `
      <${this.fieldTag}
          aria-haspopup="listbox"
          role="combobox"
          part="field"
          id="field"
          tabindex=${this.disabled ? '-1' : '0'}
          aria-label=${ariaLabel || lit__WEBPACK_IMPORTED_MODULE_1__.nothing}
          aria-describedby="description"
          aria-expanded=${this.open ? 'true' : 'false'}
          aria-controls="listbox"
          class="field"
          label=${this.label}
          ?no-asterisk=${this.noAsterisk}
          .focused=${this.focused || this.open}
          .populated=${!!this.displayText}
          .disabled=${this.disabled}
          .required=${this.required}
          .error=${this.hasError}
          ?has-start=${this.hasLeadingIcon}
          has-end
          supporting-text=${this.supportingText}
          error-text=${this.getErrorText()}
          @keydown=${this.handleKeydown}
          @click=${this.handleClick}>
         ${this.renderFieldContent()}
         <div id="description" slot="aria-describedby"></div>
      </${this.fieldTag}>`;
    }
    renderFieldContent() {
        return [
            this.renderLeadingIcon(),
            this.renderLabel(),
            this.renderTrailingIcon(),
        ];
    }
    renderLeadingIcon() {
        return (0,lit__WEBPACK_IMPORTED_MODULE_1__.html) `
      <span class="icon leading" slot="start">
        <slot name="leading-icon" @slotchange=${this.handleIconChange}></slot>
      </span>
    `;
    }
    renderTrailingIcon() {
        return (0,lit__WEBPACK_IMPORTED_MODULE_1__.html) `
      <span class="icon trailing" slot="end">
        <slot name="trailing-icon" @slotchange=${this.handleIconChange}>
          <svg height="5" viewBox="7 10 10 5" focusable="false">
            <polygon
              class="down"
              stroke="none"
              fill-rule="evenodd"
              points="7 10 12 15 17 10"></polygon>
            <polygon
              class="up"
              stroke="none"
              fill-rule="evenodd"
              points="7 15 12 10 17 15"></polygon>
          </svg>
        </slot>
      </span>
    `;
    }
    renderLabel() {
        // need to render &nbsp; so that line-height can apply and give it a
        // non-zero height
        return (0,lit__WEBPACK_IMPORTED_MODULE_1__.html) `<div id="label">${this.displayText || (0,lit__WEBPACK_IMPORTED_MODULE_1__.html) `&nbsp;`}</div>`;
    }
    renderMenu() {
        const ariaLabel = this.label || this.ariaLabel;
        return (0,lit__WEBPACK_IMPORTED_MODULE_1__.html) `<div class="menu-wrapper">
      <md-menu
        id="listbox"
        .defaultFocus=${this.defaultFocus}
        role="listbox"
        tabindex="-1"
        aria-label=${ariaLabel || lit__WEBPACK_IMPORTED_MODULE_1__.nothing}
        stay-open-on-focusout
        part="menu"
        exportparts="focus-ring: menu-focus-ring"
        anchor="field"
        style=${(0,lit_directives_style_map_js__WEBPACK_IMPORTED_MODULE_4__.styleMap)({
            '--__menu-min-width': `${this.selectWidth}px`,
            '--__menu-max-width': this.clampMenuWidth
                ? `${this.selectWidth}px`
                : undefined,
        })}
        no-navigation-wrap
        .open=${this.open}
        .quick=${this.quick}
        .positioning=${this.menuPositioning}
        .typeaheadDelay=${this.typeaheadDelay}
        .anchorCorner=${this.menuAlign === 'start' ? 'end-start' : 'end-end'}
        .menuCorner=${this.menuAlign === 'start' ? 'start-start' : 'start-end'}
        @opening=${this.handleOpening}
        @opened=${this.redispatchEvent}
        @closing=${this.redispatchEvent}
        @closed=${this.handleClosed}
        @close-menu=${this.handleCloseMenu}
        @request-selection=${this.handleRequestSelection}
        @request-deselection=${this.handleRequestDeselection}>
        ${this.renderMenuContent()}
      </md-menu>
    </div>`;
    }
    renderMenuContent() {
        return (0,lit__WEBPACK_IMPORTED_MODULE_1__.html) `<slot></slot>`;
    }
    /**
     * Handles opening the select on keydown and typahead selection when the menu
     * is closed.
     */
    handleKeydown(event) {
        if (this.open || this.disabled || !this.menu) {
            return;
        }
        const typeaheadController = this.menu.typeaheadController;
        const isOpenKey = event.code === 'Space' ||
            event.code === 'ArrowDown' ||
            event.code === 'ArrowUp' ||
            event.code === 'End' ||
            event.code === 'Home' ||
            event.code === 'Enter';
        // Do not open if currently typing ahead because the user may be typing the
        // spacebar to match a word with a space
        if (!typeaheadController.isTypingAhead && isOpenKey) {
            event.preventDefault();
            this.open = true;
            // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/#kbd_label
            switch (event.code) {
                case 'Space':
                case 'ArrowDown':
                case 'Enter':
                    // We will handle focusing last selected item in this.handleOpening()
                    this.defaultFocus = _menu_internal_controllers_shared_js__WEBPACK_IMPORTED_MODULE_14__.FocusState.NONE;
                    break;
                case 'End':
                    this.defaultFocus = _menu_internal_controllers_shared_js__WEBPACK_IMPORTED_MODULE_14__.FocusState.LAST_ITEM;
                    break;
                case 'ArrowUp':
                case 'Home':
                    this.defaultFocus = _menu_internal_controllers_shared_js__WEBPACK_IMPORTED_MODULE_14__.FocusState.FIRST_ITEM;
                    break;
                default:
                    break;
            }
            return;
        }
        const isPrintableKey = event.key.length === 1;
        // Handles typing ahead when the menu is closed by delegating the event to
        // the underlying menu's typeaheadController
        if (isPrintableKey) {
            typeaheadController.onKeydown(event);
            event.preventDefault();
            const { lastActiveRecord } = typeaheadController;
            if (!lastActiveRecord) {
                return;
            }
            this.labelEl?.setAttribute?.('aria-live', 'polite');
            const hasChanged = this.selectItem(lastActiveRecord[_menu_internal_controllers_typeaheadController_js__WEBPACK_IMPORTED_MODULE_15__.TYPEAHEAD_RECORD.ITEM]);
            if (hasChanged) {
                this.dispatchInteractionEvents();
            }
        }
    }
    handleClick() {
        this.open = !this.open;
    }
    handleFocus() {
        this.focused = true;
    }
    handleBlur() {
        this.focused = false;
    }
    /**
     * Handles closing the menu when the focus leaves the select's subtree.
     */
    handleFocusout(event) {
        // Don't close the menu if we are switching focus between menu,
        // select-option, and field
        if (event.relatedTarget && (0,_menu_internal_controllers_shared_js__WEBPACK_IMPORTED_MODULE_14__.isElementInSubtree)(event.relatedTarget, this)) {
            return;
        }
        this.open = false;
    }
    /**
     * Gets a list of all selected select options as a list item record array.
     *
     * @return An array of selected list option records.
     */
    getSelectedOptions() {
        if (!this.menu) {
            this.lastSelectedOptionRecords = [];
            return null;
        }
        const items = this.menu.items;
        this.lastSelectedOptionRecords = (0,_shared_js__WEBPACK_IMPORTED_MODULE_17__.getSelectedItems)(items);
        return this.lastSelectedOptionRecords;
    }
    async getUpdateComplete() {
        await this.menu?.updateComplete;
        return super.getUpdateComplete();
    }
    /**
     * Gets the selected options from the DOM, and updates the value and display
     * text to the first selected option's value and headline respectively.
     *
     * @return Whether or not the selected option has changed since last update.
     */
    updateValueAndDisplayText() {
        const selectedOptions = this.getSelectedOptions() ?? [];
        // Used to determine whether or not we need to fire an input / change event
        // which fire whenever the option element changes (value or selectedIndex)
        // on user interaction.
        let hasSelectedOptionChanged = false;
        if (selectedOptions.length) {
            const [firstSelectedOption] = selectedOptions[0];
            hasSelectedOptionChanged =
                this.lastSelectedOption !== firstSelectedOption;
            this.lastSelectedOption = firstSelectedOption;
            this[VALUE] = firstSelectedOption.value;
            this.displayText = firstSelectedOption.displayText;
        }
        else {
            hasSelectedOptionChanged = this.lastSelectedOption !== null;
            this.lastSelectedOption = null;
            this[VALUE] = '';
            this.displayText = '';
        }
        return hasSelectedOptionChanged;
    }
    /**
     * Focuses and activates the last selected item upon opening, and resets other
     * active items.
     */
    async handleOpening(e) {
        this.labelEl?.removeAttribute?.('aria-live');
        this.redispatchEvent(e);
        // FocusState.NONE means we want to handle focus ourselves and focus the
        // last selected item.
        if (this.defaultFocus !== _menu_internal_controllers_shared_js__WEBPACK_IMPORTED_MODULE_14__.FocusState.NONE) {
            return;
        }
        const items = this.menu.items;
        const activeItem = (0,_list_internal_list_navigation_helpers_js__WEBPACK_IMPORTED_MODULE_13__.getActiveItem)(items)?.item;
        let [selectedItem] = this.lastSelectedOptionRecords[0] ?? [null];
        // This is true if the user keys through the list but clicks out of the menu
        // thus no close-menu event is fired by an item and we can't clean up in
        // handleCloseMenu.
        if (activeItem && activeItem !== selectedItem) {
            activeItem.tabIndex = -1;
        }
        // in the case that nothing is selected, focus the first item
        selectedItem = selectedItem ?? items[0];
        if (selectedItem) {
            selectedItem.tabIndex = 0;
            selectedItem.focus();
        }
    }
    redispatchEvent(e) {
        (0,_internal_events_redispatch_event_js__WEBPACK_IMPORTED_MODULE_7__.redispatchEvent)(this, e);
    }
    handleClosed(e) {
        this.open = false;
        this.redispatchEvent(e);
    }
    /**
     * Determines the reason for closing, and updates the UI accordingly.
     */
    handleCloseMenu(event) {
        const reason = event.detail.reason;
        const item = event.detail.itemPath[0];
        this.open = false;
        let hasChanged = false;
        if (reason.kind === 'click-selection') {
            hasChanged = this.selectItem(item);
        }
        else if (reason.kind === 'keydown' && (0,_menu_internal_controllers_shared_js__WEBPACK_IMPORTED_MODULE_14__.isSelectableKey)(reason.key)) {
            hasChanged = this.selectItem(item);
        }
        else {
            // This can happen on ESC being pressed
            item.tabIndex = -1;
            item.blur();
        }
        // Dispatch interaction events since selection has been made via keyboard
        // or mouse.
        if (hasChanged) {
            this.dispatchInteractionEvents();
        }
    }
    /**
     * Selects a given option, deselects other options, and updates the UI.
     *
     * @return Whether the last selected option has changed.
     */
    selectItem(item) {
        const selectedOptions = this.getSelectedOptions() ?? [];
        selectedOptions.forEach(([option]) => {
            if (item !== option) {
                option.selected = false;
            }
        });
        item.selected = true;
        return this.updateValueAndDisplayText();
    }
    /**
     * Handles updating selection when an option element requests selection via
     * property / attribute change.
     */
    handleRequestSelection(event) {
        const requestingOptionEl = event.target;
        // No-op if this item is already selected.
        if (this.lastSelectedOptionRecords.some(([option]) => option === requestingOptionEl)) {
            return;
        }
        this.selectItem(requestingOptionEl);
    }
    /**
     * Handles updating selection when an option element requests deselection via
     * property / attribute change.
     */
    handleRequestDeselection(event) {
        const requestingOptionEl = event.target;
        // No-op if this item is not even in the list of tracked selected items.
        if (!this.lastSelectedOptionRecords.some(([option]) => option === requestingOptionEl)) {
            return;
        }
        this.updateValueAndDisplayText();
    }
    /**
     * Attempts to initialize the selected option from user-settable values like
     * SSR, setting `value`, or `selectedIndex` at startup.
     */
    initUserSelection() {
        // User has set `.value` directly, but internals have not yet booted up.
        if (this.lastUserSetValue && !this.lastSelectedOptionRecords.length) {
            this.select(this.lastUserSetValue);
            // User has set `.selectedIndex` directly, but internals have not yet
            // booted up.
        }
        else if (this.lastUserSetSelectedIndex !== null &&
            !this.lastSelectedOptionRecords.length) {
            this.selectIndex(this.lastUserSetSelectedIndex);
            // Regular boot up!
        }
        else {
            this.updateValueAndDisplayText();
        }
    }
    handleIconChange() {
        this.hasLeadingIcon = this.leadingIcons.length > 0;
    }
    /**
     * Dispatches the `input` and `change` events.
     */
    dispatchInteractionEvents() {
        this.dispatchEvent(new Event('input', { bubbles: true, composed: true }));
        this.dispatchEvent(new Event('change', { bubbles: true }));
    }
    getErrorText() {
        return this.error ? this.errorText : this.nativeErrorText;
    }
    [_labs_behaviors_form_associated_js__WEBPACK_IMPORTED_MODULE_10__.getFormValue]() {
        return this.value;
    }
    formResetCallback() {
        this.reset();
    }
    formStateRestoreCallback(state) {
        this.value = state;
    }
    click() {
        this.field?.click();
    }
    [_labs_behaviors_constraint_validation_js__WEBPACK_IMPORTED_MODULE_8__.createValidator]() {
        return new _labs_behaviors_validators_select_validator_js__WEBPACK_IMPORTED_MODULE_12__.SelectValidator(() => this);
    }
    [_labs_behaviors_constraint_validation_js__WEBPACK_IMPORTED_MODULE_8__.getValidityAnchor]() {
        return this.field;
    }
}
/** @nocollapse */
Select.shadowRootOptions = {
    ...lit__WEBPACK_IMPORTED_MODULE_1__.LitElement.shadowRootOptions,
    delegatesFocus: true,
};
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.property)({ type: Boolean })
], Select.prototype, "quick", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.property)({ type: Boolean })
], Select.prototype, "required", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.property)({ type: String, attribute: 'error-text' })
], Select.prototype, "errorText", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.property)()
], Select.prototype, "label", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.property)({ type: Boolean, attribute: 'no-asterisk' })
], Select.prototype, "noAsterisk", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.property)({ type: String, attribute: 'supporting-text' })
], Select.prototype, "supportingText", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.property)({ type: Boolean, reflect: true })
], Select.prototype, "error", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.property)({ attribute: 'menu-positioning' })
], Select.prototype, "menuPositioning", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.property)({ type: Boolean, attribute: 'clamp-menu-width' })
], Select.prototype, "clampMenuWidth", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.property)({ type: Number, attribute: 'typeahead-delay' })
], Select.prototype, "typeaheadDelay", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.property)({ type: Boolean, attribute: 'has-leading-icon' })
], Select.prototype, "hasLeadingIcon", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.property)({ attribute: 'display-text' })
], Select.prototype, "displayText", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.property)({ attribute: 'menu-align' })
], Select.prototype, "menuAlign", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.property)()
], Select.prototype, "value", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.property)({ type: Number, attribute: 'selected-index' })
], Select.prototype, "selectedIndex", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.state)()
], Select.prototype, "nativeError", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.state)()
], Select.prototype, "nativeErrorText", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.state)()
], Select.prototype, "focused", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.state)()
], Select.prototype, "open", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.state)()
], Select.prototype, "defaultFocus", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.query)('.field')
], Select.prototype, "field", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.query)('md-menu')
], Select.prototype, "menu", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.query)('#label')
], Select.prototype, "labelEl", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_2__.queryAssignedElements)({ slot: 'leading-icon', flatten: true })
], Select.prototype, "leadingIcons", void 0);
//# sourceMappingURL=select.js.map

/***/ }),

/***/ "./node_modules/@material/web/select/internal/shared-styles.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@material/web/select/internal/shared-styles.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   styles: () => (/* binding */ styles)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");
/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
// Generated stylesheet for ./select/internal/shared-styles.css.

const styles = (0,lit__WEBPACK_IMPORTED_MODULE_0__.css) `:host{color:unset;min-width:210px;display:flex}.field{cursor:default;outline:none}.select{position:relative;flex-direction:column}.icon.trailing svg,.icon ::slotted(*){fill:currentColor}.icon ::slotted(*){width:inherit;height:inherit;font-size:inherit}.icon slot{display:flex;height:100%;width:100%;align-items:center;justify-content:center}.icon.trailing :is(.up,.down){opacity:0;transition:opacity 75ms linear 75ms}.select:not(.open) .down,.select.open .up{opacity:1}.field,.select,md-menu{min-width:inherit;width:inherit;max-width:inherit;display:flex}md-menu{min-width:var(--__menu-min-width);max-width:var(--__menu-max-width, inherit)}.menu-wrapper{width:0px;height:0px;max-width:inherit}md-menu ::slotted(:not[disabled]){cursor:pointer}.field,.select{width:100%}:host{display:inline-flex}:host([disabled]){pointer-events:none}
`;
//# sourceMappingURL=shared-styles.js.map

/***/ }),

/***/ "./node_modules/@material/web/select/internal/shared.js":
/*!**************************************************************!*\
  !*** ./node_modules/@material/web/select/internal/shared.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getSelectedItems: () => (/* binding */ getSelectedItems)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Given a list of select options, this function will return an array of
 * SelectOptionRecords that are selected.
 *
 * @return An array of SelectOptionRecords describing the options that are
 * selected.
 */
function getSelectedItems(items) {
    const selectedItemRecords = [];
    for (let i = 0; i < items.length; i++) {
        const item = items[i];
        if (item.selected) {
            selectedItemRecords.push([item, i]);
        }
    }
    return selectedItemRecords;
}
//# sourceMappingURL=shared.js.map

/***/ }),

/***/ "./node_modules/@material/web/select/outlined-select.js":
/*!**************************************************************!*\
  !*** ./node_modules/@material/web/select/outlined-select.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MdOutlinedSelect: () => (/* binding */ MdOutlinedSelect)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit/decorators.js */ "./node_modules/lit/decorators.js");
/* harmony import */ var _internal_outlined_select_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/outlined-select.js */ "./node_modules/@material/web/select/internal/outlined-select.js");
/* harmony import */ var _internal_outlined_select_styles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/outlined-select-styles.js */ "./node_modules/@material/web/select/internal/outlined-select-styles.js");
/* harmony import */ var _internal_shared_styles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/shared-styles.js */ "./node_modules/@material/web/select/internal/shared-styles.js");
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */





/**
 * @summary
 * Select menus display a list of choices on temporary surfaces and display the
 * currently selected menu item above the menu.
 *
 * @description
 * The select component allows users to choose a value from a fixed list of
 * available options. Composed of an interactive anchor button and a menu, it is
 * analogous to the native HTML `<select>` element. This is the "outlined"
 * variant.
 *
 * @example
 * ```html
 * <md-outlined-select label="fruits">
 *   <!-- An empty selected option will give select an "un-filled" state -->
 *   <md-select-option selected></md-select-option>
 *   <md-select-option value="apple" headline="Apple"></md-select-option>
 *   <md-select-option value="banana" headline="Banana"></md-select-option>
 *   <md-select-option value="kiwi" headline="Kiwi"></md-select-option>
 *   <md-select-option value="orange" headline="Orange"></md-select-option>
 *   <md-select-option value="tomato" headline="Tomato"></md-select-option>
 * </md-outlined-select>
 * ```
 *
 * @final
 * @suppress {visibility}
 */
let MdOutlinedSelect = class MdOutlinedSelect extends _internal_outlined_select_js__WEBPACK_IMPORTED_MODULE_1__.OutlinedSelect {
};
MdOutlinedSelect.styles = [_internal_shared_styles_js__WEBPACK_IMPORTED_MODULE_3__.styles, _internal_outlined_select_styles_js__WEBPACK_IMPORTED_MODULE_2__.styles];
MdOutlinedSelect = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_0__.customElement)('md-outlined-select')
], MdOutlinedSelect);

//# sourceMappingURL=outlined-select.js.map

/***/ }),

/***/ "./node_modules/lit-element/development/lit-element.js":
/*!*************************************************************!*\
  !*** ./node_modules/lit-element/development/lit-element.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSSResult: () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.CSSResult),
/* harmony export */   LitElement: () => (/* binding */ LitElement),
/* harmony export */   ReactiveElement: () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.ReactiveElement),
/* harmony export */   _$LE: () => (/* binding */ _$LE),
/* harmony export */   _$LH: () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__._$LH),
/* harmony export */   adoptStyles: () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.adoptStyles),
/* harmony export */   css: () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.css),
/* harmony export */   defaultConverter: () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.defaultConverter),
/* harmony export */   getCompatibleStyle: () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.getCompatibleStyle),
/* harmony export */   html: () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.html),
/* harmony export */   mathml: () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.mathml),
/* harmony export */   noChange: () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.noChange),
/* harmony export */   notEqual: () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.notEqual),
/* harmony export */   nothing: () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.nothing),
/* harmony export */   render: () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.render),
/* harmony export */   supportsAdoptingStyleSheets: () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.supportsAdoptingStyleSheets),
/* harmony export */   svg: () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.svg),
/* harmony export */   unsafeCSS: () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.unsafeCSS)
/* harmony export */ });
/* harmony import */ var _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lit/reactive-element */ "./node_modules/@lit/reactive-element/development/reactive-element.js");
/* harmony import */ var lit_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit-html */ "./node_modules/lit-html/development/lit-html.js");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * The main LitElement module, which defines the {@linkcode LitElement} base
 * class and related APIs.
 *
 * LitElement components can define a template and a set of observed
 * properties. Changing an observed property triggers a re-render of the
 * element.
 *
 * Import {@linkcode LitElement} and {@linkcode html} from this module to
 * create a component:
 *
 *  ```js
 * import {LitElement, html} from 'lit-element';
 *
 * class MyElement extends LitElement {
 *
 *   // Declare observed properties
 *   static get properties() {
 *     return {
 *       adjective: {}
 *     }
 *   }
 *
 *   constructor() {
 *     this.adjective = 'awesome';
 *   }
 *
 *   // Define the element's template
 *   render() {
 *     return html`<p>your ${adjective} template here</p>`;
 *   }
 * }
 *
 * customElements.define('my-element', MyElement);
 * ```
 *
 * `LitElement` extends {@linkcode ReactiveElement} and adds lit-html
 * templating. The `ReactiveElement` class is provided for users that want to
 * build their own custom element base classes that don't use lit-html.
 *
 * @packageDocumentation
 */




/*
 * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
 * replaced at compile time by the munged name for object[property]. We cannot
 * alias this function, so we have to use a small shim that has the same
 * behavior when not compiling.
 */
/*@__INLINE__*/
const JSCompiler_renameProperty = (prop, _obj) => prop;
const DEV_MODE = true;
let issueWarning;
if (DEV_MODE) {
    // Ensure warnings are issued only 1x, even if multiple versions of Lit
    // are loaded.
    const issuedWarnings = (globalThis.litIssuedWarnings ??= new Set());
    // Issue a warning, if we haven't already.
    issueWarning = (code, warning) => {
        warning += ` See https://lit.dev/msg/${code} for more information.`;
        if (!issuedWarnings.has(warning)) {
            console.warn(warning);
            issuedWarnings.add(warning);
        }
    };
}
/**
 * Base element class that manages element properties and attributes, and
 * renders a lit-html template.
 *
 * To define a component, subclass `LitElement` and implement a
 * `render` method to provide the component's template. Define properties
 * using the {@linkcode LitElement.properties properties} property or the
 * {@linkcode property} decorator.
 */
class LitElement extends _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.ReactiveElement {
    constructor() {
        super(...arguments);
        /**
         * @category rendering
         */
        this.renderOptions = { host: this };
        this.__childPart = undefined;
    }
    /**
     * @category rendering
     */
    createRenderRoot() {
        const renderRoot = super.createRenderRoot();
        // When adoptedStyleSheets are shimmed, they are inserted into the
        // shadowRoot by createRenderRoot. Adjust the renderBefore node so that
        // any styles in Lit content render before adoptedStyleSheets. This is
        // important so that adoptedStyleSheets have precedence over styles in
        // the shadowRoot.
        this.renderOptions.renderBefore ??= renderRoot.firstChild;
        return renderRoot;
    }
    /**
     * Updates the element. This method reflects property values to attributes
     * and calls `render` to render DOM via lit-html. Setting properties inside
     * this method will *not* trigger another update.
     * @param changedProperties Map of changed properties with old values
     * @category updates
     */
    update(changedProperties) {
        // Setting properties in `render` should not trigger an update. Since
        // updates are allowed after super.update, it's important to call `render`
        // before that.
        const value = this.render();
        if (!this.hasUpdated) {
            this.renderOptions.isConnected = this.isConnected;
        }
        super.update(changedProperties);
        this.__childPart = (0,lit_html__WEBPACK_IMPORTED_MODULE_1__.render)(value, this.renderRoot, this.renderOptions);
    }
    /**
     * Invoked when the component is added to the document's DOM.
     *
     * In `connectedCallback()` you should setup tasks that should only occur when
     * the element is connected to the document. The most common of these is
     * adding event listeners to nodes external to the element, like a keydown
     * event handler added to the window.
     *
     * ```ts
     * connectedCallback() {
     *   super.connectedCallback();
     *   addEventListener('keydown', this._handleKeydown);
     * }
     * ```
     *
     * Typically, anything done in `connectedCallback()` should be undone when the
     * element is disconnected, in `disconnectedCallback()`.
     *
     * @category lifecycle
     */
    connectedCallback() {
        super.connectedCallback();
        this.__childPart?.setConnected(true);
    }
    /**
     * Invoked when the component is removed from the document's DOM.
     *
     * This callback is the main signal to the element that it may no longer be
     * used. `disconnectedCallback()` should ensure that nothing is holding a
     * reference to the element (such as event listeners added to nodes external
     * to the element), so that it is free to be garbage collected.
     *
     * ```ts
     * disconnectedCallback() {
     *   super.disconnectedCallback();
     *   window.removeEventListener('keydown', this._handleKeydown);
     * }
     * ```
     *
     * An element may be re-connected after being disconnected.
     *
     * @category lifecycle
     */
    disconnectedCallback() {
        super.disconnectedCallback();
        this.__childPart?.setConnected(false);
    }
    /**
     * Invoked on each update to perform rendering tasks. This method may return
     * any value renderable by lit-html's `ChildPart` - typically a
     * `TemplateResult`. Setting properties inside this method will *not* trigger
     * the element to update.
     * @category rendering
     */
    render() {
        return lit_html__WEBPACK_IMPORTED_MODULE_1__.noChange;
    }
}
// This property needs to remain unminified.
LitElement['_$litElement$'] = true;
/**
 * Ensure this class is marked as `finalized` as an optimization ensuring
 * it will not needlessly try to `finalize`.
 *
 * Note this property name is a string to prevent breaking Closure JS Compiler
 * optimizations. See @lit/reactive-element for more information.
 */
LitElement[JSCompiler_renameProperty('finalized', LitElement)] = true;
// Install hydration if available
globalThis.litElementHydrateSupport?.({ LitElement });
// Apply polyfills if available
const polyfillSupport = DEV_MODE
    ? globalThis.litElementPolyfillSupportDevMode
    : globalThis.litElementPolyfillSupport;
polyfillSupport?.({ LitElement });
/**
 * END USERS SHOULD NOT RELY ON THIS OBJECT.
 *
 * Private exports for use by other Lit packages, not intended for use by
 * external users.
 *
 * We currently do not make a mangled rollup build of the lit-ssr code. In order
 * to keep a number of (otherwise private) top-level exports  mangled in the
 * client side code, we export a _$LE object containing those members (or
 * helper methods for accessing private fields of those members), and then
 * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the
 * client-side code is being used in `dev` mode or `prod` mode.
 *
 * This has a unique name, to disambiguate it from private exports in
 * lit-html, since this module re-exports all of lit-html.
 *
 * @private
 */
const _$LE = {
    _$attributeToProperty: (el, name, value) => {
        // eslint-disable-next-line
        el._$attributeToProperty(name, value);
    },
    // eslint-disable-next-line
    _$changedProperties: (el) => el._$changedProperties,
};
// IMPORTANT: do not change the property name or the assignment expression.
// This line will be used in regexes to search for LitElement usage.
(globalThis.litElementVersions ??= []).push('4.1.1');
if (DEV_MODE && globalThis.litElementVersions.length > 1) {
    issueWarning('multiple-versions', `Multiple versions of Lit loaded. Loading multiple versions ` +
        `is not recommended.`);
}
//# sourceMappingURL=lit-element.js.map

/***/ }),

/***/ "./node_modules/lit-html/development/directive.js":
/*!********************************************************!*\
  !*** ./node_modules/lit-html/development/directive.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Directive: () => (/* binding */ Directive),
/* harmony export */   PartType: () => (/* binding */ PartType),
/* harmony export */   directive: () => (/* binding */ directive)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const PartType = {
    ATTRIBUTE: 1,
    CHILD: 2,
    PROPERTY: 3,
    BOOLEAN_ATTRIBUTE: 4,
    EVENT: 5,
    ELEMENT: 6,
};
/**
 * Creates a user-facing directive function from a Directive class. This
 * function has the same parameters as the directive's render() method.
 */
const directive = (c) => (...values) => ({
    // This property needs to remain unminified.
    ['_$litDirective$']: c,
    values,
});
/**
 * Base class for creating custom directives. Users should extend this class,
 * implement `render` and/or `update`, and then pass their subclass to
 * `directive`.
 */
class Directive {
    constructor(_partInfo) { }
    // See comment in Disconnectable interface for why this is a getter
    get _$isConnected() {
        return this._$parent._$isConnected;
    }
    /** @internal */
    _$initialize(part, parent, attributeIndex) {
        this.__part = part;
        this._$parent = parent;
        this.__attributeIndex = attributeIndex;
    }
    /** @internal */
    _$resolve(part, props) {
        return this.update(part, props);
    }
    update(_part, props) {
        return this.render(...props);
    }
}
//# sourceMappingURL=directive.js.map

/***/ }),

/***/ "./node_modules/lit-html/development/directives/class-map.js":
/*!*******************************************************************!*\
  !*** ./node_modules/lit-html/development/directives/class-map.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   classMap: () => (/* binding */ classMap)
/* harmony export */ });
/* harmony import */ var _lit_html_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lit-html.js */ "./node_modules/lit-html/development/lit-html.js");
/* harmony import */ var _directive_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../directive.js */ "./node_modules/lit-html/development/directive.js");
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */


class ClassMapDirective extends _directive_js__WEBPACK_IMPORTED_MODULE_1__.Directive {
    constructor(partInfo) {
        super(partInfo);
        if (partInfo.type !== _directive_js__WEBPACK_IMPORTED_MODULE_1__.PartType.ATTRIBUTE ||
            partInfo.name !== 'class' ||
            partInfo.strings?.length > 2) {
            throw new Error('`classMap()` can only be used in the `class` attribute ' +
                'and must be the only part in the attribute.');
        }
    }
    render(classInfo) {
        // Add spaces to ensure separation from static classes
        return (' ' +
            Object.keys(classInfo)
                .filter((key) => classInfo[key])
                .join(' ') +
            ' ');
    }
    update(part, [classInfo]) {
        // Remember dynamic classes on the first render
        if (this._previousClasses === undefined) {
            this._previousClasses = new Set();
            if (part.strings !== undefined) {
                this._staticClasses = new Set(part.strings
                    .join(' ')
                    .split(/\s/)
                    .filter((s) => s !== ''));
            }
            for (const name in classInfo) {
                if (classInfo[name] && !this._staticClasses?.has(name)) {
                    this._previousClasses.add(name);
                }
            }
            return this.render(classInfo);
        }
        const classList = part.element.classList;
        // Remove old classes that no longer apply
        for (const name of this._previousClasses) {
            if (!(name in classInfo)) {
                classList.remove(name);
                this._previousClasses.delete(name);
            }
        }
        // Add or remove classes based on their classMap value
        for (const name in classInfo) {
            // We explicitly want a loose truthy check of `value` because it seems
            // more convenient that '' and 0 are skipped.
            const value = !!classInfo[name];
            if (value !== this._previousClasses.has(name) &&
                !this._staticClasses?.has(name)) {
                if (value) {
                    classList.add(name);
                    this._previousClasses.add(name);
                }
                else {
                    classList.remove(name);
                    this._previousClasses.delete(name);
                }
            }
        }
        return _lit_html_js__WEBPACK_IMPORTED_MODULE_0__.noChange;
    }
}
/**
 * A directive that applies dynamic CSS classes.
 *
 * This must be used in the `class` attribute and must be the only part used in
 * the attribute. It takes each property in the `classInfo` argument and adds
 * the property name to the element's `classList` if the property value is
 * truthy; if the property value is falsy, the property name is removed from
 * the element's `class`.
 *
 * For example `{foo: bar}` applies the class `foo` if the value of `bar` is
 * truthy.
 *
 * @param classInfo
 */
const classMap = (0,_directive_js__WEBPACK_IMPORTED_MODULE_1__.directive)(ClassMapDirective);
//# sourceMappingURL=class-map.js.map

/***/ }),

/***/ "./node_modules/lit-html/development/directives/style-map.js":
/*!*******************************************************************!*\
  !*** ./node_modules/lit-html/development/directives/style-map.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   styleMap: () => (/* binding */ styleMap)
/* harmony export */ });
/* harmony import */ var _lit_html_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lit-html.js */ "./node_modules/lit-html/development/lit-html.js");
/* harmony import */ var _directive_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../directive.js */ "./node_modules/lit-html/development/directive.js");
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */


const important = 'important';
// The leading space is important
const importantFlag = ' !' + important;
// How many characters to remove from a value, as a negative number
const flagTrim = 0 - importantFlag.length;
class StyleMapDirective extends _directive_js__WEBPACK_IMPORTED_MODULE_1__.Directive {
    constructor(partInfo) {
        super(partInfo);
        if (partInfo.type !== _directive_js__WEBPACK_IMPORTED_MODULE_1__.PartType.ATTRIBUTE ||
            partInfo.name !== 'style' ||
            partInfo.strings?.length > 2) {
            throw new Error('The `styleMap` directive must be used in the `style` attribute ' +
                'and must be the only part in the attribute.');
        }
    }
    render(styleInfo) {
        return Object.keys(styleInfo).reduce((style, prop) => {
            const value = styleInfo[prop];
            if (value == null) {
                return style;
            }
            // Convert property names from camel-case to dash-case, i.e.:
            //  `backgroundColor` -> `background-color`
            // Vendor-prefixed names need an extra `-` appended to front:
            //  `webkitAppearance` -> `-webkit-appearance`
            // Exception is any property name containing a dash, including
            // custom properties; we assume these are already dash-cased i.e.:
            //  `--my-button-color` --> `--my-button-color`
            prop = prop.includes('-')
                ? prop
                : prop
                    .replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, '-$&')
                    .toLowerCase();
            return style + `${prop}:${value};`;
        }, '');
    }
    update(part, [styleInfo]) {
        const { style } = part.element;
        if (this._previousStyleProperties === undefined) {
            this._previousStyleProperties = new Set(Object.keys(styleInfo));
            return this.render(styleInfo);
        }
        // Remove old properties that no longer exist in styleInfo
        for (const name of this._previousStyleProperties) {
            // If the name isn't in styleInfo or it's null/undefined
            if (styleInfo[name] == null) {
                this._previousStyleProperties.delete(name);
                if (name.includes('-')) {
                    style.removeProperty(name);
                }
                else {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    style[name] = null;
                }
            }
        }
        // Add or update properties
        for (const name in styleInfo) {
            const value = styleInfo[name];
            if (value != null) {
                this._previousStyleProperties.add(name);
                const isImportant = typeof value === 'string' && value.endsWith(importantFlag);
                if (name.includes('-') || isImportant) {
                    style.setProperty(name, isImportant
                        ? value.slice(0, flagTrim)
                        : value, isImportant ? important : '');
                }
                else {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    style[name] = value;
                }
            }
        }
        return _lit_html_js__WEBPACK_IMPORTED_MODULE_0__.noChange;
    }
}
/**
 * A directive that applies CSS properties to an element.
 *
 * `styleMap` can only be used in the `style` attribute and must be the only
 * expression in the attribute. It takes the property names in the
 * {@link StyleInfo styleInfo} object and adds the properties to the inline
 * style of the element.
 *
 * Property names with dashes (`-`) are assumed to be valid CSS
 * property names and set on the element's style object using `setProperty()`.
 * Names without dashes are assumed to be camelCased JavaScript property names
 * and set on the element's style object using property assignment, allowing the
 * style object to translate JavaScript-style names to CSS property names.
 *
 * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':
 * '0'})` sets the `background-color`, `border-top` and `--size` properties.
 *
 * @param styleInfo
 * @see {@link https://lit.dev/docs/templates/directives/#stylemap styleMap code samples on Lit.dev}
 */
const styleMap = (0,_directive_js__WEBPACK_IMPORTED_MODULE_1__.directive)(StyleMapDirective);
//# sourceMappingURL=style-map.js.map

/***/ }),

/***/ "./node_modules/lit-html/development/is-server.js":
/*!********************************************************!*\
  !*** ./node_modules/lit-html/development/is-server.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isServer: () => (/* binding */ isServer)
/* harmony export */ });
/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * @fileoverview
 *
 * This file exports a boolean const whose value will depend on what environment
 * the module is being imported from.
 */
const NODE_MODE = false;
/**
 * A boolean that will be `true` in server environments like Node, and `false`
 * in browser environments. Note that your server environment or toolchain must
 * support the `"node"` export condition for this to be `true`.
 *
 * This can be used when authoring components to change behavior based on
 * whether or not the component is executing in an SSR context.
 */
const isServer = NODE_MODE;
//# sourceMappingURL=is-server.js.map

/***/ }),

/***/ "./node_modules/lit-html/development/lit-html.js":
/*!*******************************************************!*\
  !*** ./node_modules/lit-html/development/lit-html.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _$LH: () => (/* binding */ _$LH),
/* harmony export */   html: () => (/* binding */ html),
/* harmony export */   mathml: () => (/* binding */ mathml),
/* harmony export */   noChange: () => (/* binding */ noChange),
/* harmony export */   nothing: () => (/* binding */ nothing),
/* harmony export */   render: () => (/* binding */ render),
/* harmony export */   svg: () => (/* binding */ svg)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const DEV_MODE = true;
const ENABLE_EXTRA_SECURITY_HOOKS = true;
const ENABLE_SHADYDOM_NOPATCH = true;
const NODE_MODE = false;
// Allows minifiers to rename references to globalThis
const global = globalThis;
/**
 * Useful for visualizing and logging insights into what the Lit template system is doing.
 *
 * Compiled out of prod mode builds.
 */
const debugLogEvent = DEV_MODE
    ? (event) => {
        const shouldEmit = global
            .emitLitDebugLogEvents;
        if (!shouldEmit) {
            return;
        }
        global.dispatchEvent(new CustomEvent('lit-debug', {
            detail: event,
        }));
    }
    : undefined;
// Used for connecting beginRender and endRender events when there are nested
// renders when errors are thrown preventing an endRender event from being
// called.
let debugLogRenderId = 0;
let issueWarning;
if (DEV_MODE) {
    global.litIssuedWarnings ??= new Set();
    // Issue a warning, if we haven't already.
    issueWarning = (code, warning) => {
        warning += code
            ? ` See https://lit.dev/msg/${code} for more information.`
            : '';
        if (!global.litIssuedWarnings.has(warning)) {
            console.warn(warning);
            global.litIssuedWarnings.add(warning);
        }
    };
    issueWarning('dev-mode', `Lit is in dev mode. Not recommended for production!`);
}
const wrap = ENABLE_SHADYDOM_NOPATCH &&
    global.ShadyDOM?.inUse &&
    global.ShadyDOM?.noPatch === true
    ? global.ShadyDOM.wrap
    : (node) => node;
const trustedTypes = global.trustedTypes;
/**
 * Our TrustedTypePolicy for HTML which is declared using the html template
 * tag function.
 *
 * That HTML is a developer-authored constant, and is parsed with innerHTML
 * before any untrusted expressions have been mixed in. Therefor it is
 * considered safe by construction.
 */
const policy = trustedTypes
    ? trustedTypes.createPolicy('lit-html', {
        createHTML: (s) => s,
    })
    : undefined;
const identityFunction = (value) => value;
const noopSanitizer = (_node, _name, _type) => identityFunction;
/** Sets the global sanitizer factory. */
const setSanitizer = (newSanitizer) => {
    if (!ENABLE_EXTRA_SECURITY_HOOKS) {
        return;
    }
    if (sanitizerFactoryInternal !== noopSanitizer) {
        throw new Error(`Attempted to overwrite existing lit-html security policy.` +
            ` setSanitizeDOMValueFactory should be called at most once.`);
    }
    sanitizerFactoryInternal = newSanitizer;
};
/**
 * Only used in internal tests, not a part of the public API.
 */
const _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {
    sanitizerFactoryInternal = noopSanitizer;
};
const createSanitizer = (node, name, type) => {
    return sanitizerFactoryInternal(node, name, type);
};
// Added to an attribute name to mark the attribute as bound so we can find
// it easily.
const boundAttributeSuffix = '$lit$';
// This marker is used in many syntactic positions in HTML, so it must be
// a valid element name and attribute name. We don't support dynamic names (yet)
// but this at least ensures that the parse tree is closer to the template
// intention.
const marker = `lit$${Math.random().toFixed(9).slice(2)}$`;
// String used to tell if a comment is a marker comment
const markerMatch = '?' + marker;
// Text used to insert a comment marker node. We use processing instruction
// syntax because it's slightly smaller, but parses as a comment node.
const nodeMarker = `<${markerMatch}>`;
const d = NODE_MODE && global.document === undefined
    ? {
        createTreeWalker() {
            return {};
        },
    }
    : document;
// Creates a dynamic marker. We never have to search for these in the DOM.
const createMarker = () => d.createComment('');
const isPrimitive = (value) => value === null || (typeof value != 'object' && typeof value != 'function');
const isArray = Array.isArray;
const isIterable = (value) => isArray(value) ||
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    typeof value?.[Symbol.iterator] === 'function';
const SPACE_CHAR = `[ \t\n\f\r]`;
const ATTR_VALUE_CHAR = `[^ \t\n\f\r"'\`<>=]`;
const NAME_CHAR = `[^\\s"'>=/]`;
// These regexes represent the five parsing states that we care about in the
// Template's HTML scanner. They match the *end* of the state they're named
// after.
// Depending on the match, we transition to a new state. If there's no match,
// we stay in the same state.
// Note that the regexes are stateful. We utilize lastIndex and sync it
// across the multiple regexes used. In addition to the five regexes below
// we also dynamically create a regex to find the matching end tags for raw
// text elements.
/**
 * End of text is: `<` followed by:
 *   (comment start) or (tag) or (dynamic tag binding)
 */
const textEndRegex = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
const COMMENT_START = 1;
const TAG_NAME = 2;
const DYNAMIC_TAG_NAME = 3;
const commentEndRegex = /-->/g;
/**
 * Comments not started with <!--, like </{, can be ended by a single `>`
 */
const comment2EndRegex = />/g;
/**
 * The tagEnd regex matches the end of the "inside an opening" tag syntax
 * position. It either matches a `>`, an attribute-like sequence, or the end
 * of the string after a space (attribute-name position ending).
 *
 * See attributes in the HTML spec:
 * https://www.w3.org/TR/html5/syntax.html#elements-attributes
 *
 * " \t\n\f\r" are HTML space characters:
 * https://infra.spec.whatwg.org/#ascii-whitespace
 *
 * So an attribute is:
 *  * The name: any character except a whitespace character, ("), ('), ">",
 *    "=", or "/". Note: this is different from the HTML spec which also excludes control characters.
 *  * Followed by zero or more space characters
 *  * Followed by "="
 *  * Followed by zero or more space characters
 *  * Followed by:
 *    * Any character except space, ('), ("), "<", ">", "=", (`), or
 *    * (") then any non-("), or
 *    * (') then any non-(')
 */
const tagEndRegex = new RegExp(`>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|("|')|))|$)`, 'g');
const ENTIRE_MATCH = 0;
const ATTRIBUTE_NAME = 1;
const SPACES_AND_EQUALS = 2;
const QUOTE_CHAR = 3;
const singleQuoteAttrEndRegex = /'/g;
const doubleQuoteAttrEndRegex = /"/g;
/**
 * Matches the raw text elements.
 *
 * Comments are not parsed within raw text elements, so we need to search their
 * text content for marker strings.
 */
const rawTextElement = /^(?:script|style|textarea|title)$/i;
/** TemplateResult types */
const HTML_RESULT = 1;
const SVG_RESULT = 2;
const MATHML_RESULT = 3;
// TemplatePart types
// IMPORTANT: these must match the values in PartType
const ATTRIBUTE_PART = 1;
const CHILD_PART = 2;
const PROPERTY_PART = 3;
const BOOLEAN_ATTRIBUTE_PART = 4;
const EVENT_PART = 5;
const ELEMENT_PART = 6;
const COMMENT_PART = 7;
/**
 * Generates a template literal tag function that returns a TemplateResult with
 * the given result type.
 */
const tag = (type) => (strings, ...values) => {
    // Warn against templates octal escape sequences
    // We do this here rather than in render so that the warning is closer to the
    // template definition.
    if (DEV_MODE && strings.some((s) => s === undefined)) {
        console.warn('Some template strings are undefined.\n' +
            'This is probably caused by illegal octal escape sequences.');
    }
    if (DEV_MODE) {
        // Import static-html.js results in a circular dependency which g3 doesn't
        // handle. Instead we know that static values must have the field
        // `_$litStatic$`.
        if (values.some((val) => val?.['_$litStatic$'])) {
            issueWarning('', `Static values 'literal' or 'unsafeStatic' cannot be used as values to non-static templates.\n` +
                `Please use the static 'html' tag function. See https://lit.dev/docs/templates/expressions/#static-expressions`);
        }
    }
    return {
        // This property needs to remain unminified.
        ['_$litType$']: type,
        strings,
        values,
    };
};
/**
 * Interprets a template literal as an HTML template that can efficiently
 * render to and update a container.
 *
 * ```ts
 * const header = (title: string) => html`<h1>${title}</h1>`;
 * ```
 *
 * The `html` tag returns a description of the DOM to render as a value. It is
 * lazy, meaning no work is done until the template is rendered. When rendering,
 * if a template comes from the same expression as a previously rendered result,
 * it's efficiently updated instead of replaced.
 */
const html = tag(HTML_RESULT);
/**
 * Interprets a template literal as an SVG fragment that can efficiently render
 * to and update a container.
 *
 * ```ts
 * const rect = svg`<rect width="10" height="10"></rect>`;
 *
 * const myImage = html`
 *   <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
 *     ${rect}
 *   </svg>`;
 * ```
 *
 * The `svg` *tag function* should only be used for SVG fragments, or elements
 * that would be contained **inside** an `<svg>` HTML element. A common error is
 * placing an `<svg>` *element* in a template tagged with the `svg` tag
 * function. The `<svg>` element is an HTML element and should be used within a
 * template tagged with the {@linkcode html} tag function.
 *
 * In LitElement usage, it's invalid to return an SVG fragment from the
 * `render()` method, as the SVG fragment will be contained within the element's
 * shadow root and thus not be properly contained within an `<svg>` HTML
 * element.
 */
const svg = tag(SVG_RESULT);
/**
 * Interprets a template literal as MathML fragment that can efficiently render
 * to and update a container.
 *
 * ```ts
 * const num = mathml`<mn>1</mn>`;
 *
 * const eq = html`
 *   <math>
 *     ${num}
 *   </math>`;
 * ```
 *
 * The `mathml` *tag function* should only be used for MathML fragments, or
 * elements that would be contained **inside** a `<math>` HTML element. A common
 * error is placing a `<math>` *element* in a template tagged with the `mathml`
 * tag function. The `<math>` element is an HTML element and should be used
 * within a template tagged with the {@linkcode html} tag function.
 *
 * In LitElement usage, it's invalid to return an MathML fragment from the
 * `render()` method, as the MathML fragment will be contained within the
 * element's shadow root and thus not be properly contained within a `<math>`
 * HTML element.
 */
const mathml = tag(MATHML_RESULT);
/**
 * A sentinel value that signals that a value was handled by a directive and
 * should not be written to the DOM.
 */
const noChange = Symbol.for('lit-noChange');
/**
 * A sentinel value that signals a ChildPart to fully clear its content.
 *
 * ```ts
 * const button = html`${
 *  user.isAdmin
 *    ? html`<button>DELETE</button>`
 *    : nothing
 * }`;
 * ```
 *
 * Prefer using `nothing` over other falsy values as it provides a consistent
 * behavior between various expression binding contexts.
 *
 * In child expressions, `undefined`, `null`, `''`, and `nothing` all behave the
 * same and render no nodes. In attribute expressions, `nothing` _removes_ the
 * attribute, while `undefined` and `null` will render an empty string. In
 * property expressions `nothing` becomes `undefined`.
 */
const nothing = Symbol.for('lit-nothing');
/**
 * The cache of prepared templates, keyed by the tagged TemplateStringsArray
 * and _not_ accounting for the specific template tag used. This means that
 * template tags cannot be dynamic - they must statically be one of html, svg,
 * or attr. This restriction simplifies the cache lookup, which is on the hot
 * path for rendering.
 */
const templateCache = new WeakMap();
const walker = d.createTreeWalker(d, 129 /* NodeFilter.SHOW_{ELEMENT|COMMENT} */);
let sanitizerFactoryInternal = noopSanitizer;
function trustFromTemplateString(tsa, stringFromTSA) {
    // A security check to prevent spoofing of Lit template results.
    // In the future, we may be able to replace this with Array.isTemplateObject,
    // though we might need to make that check inside of the html and svg
    // functions, because precompiled templates don't come in as
    // TemplateStringArray objects.
    if (!isArray(tsa) || !tsa.hasOwnProperty('raw')) {
        let message = 'invalid template strings array';
        if (DEV_MODE) {
            message = `
          Internal Error: expected template strings to be an array
          with a 'raw' field. Faking a template strings array by
          calling html or svg like an ordinary function is effectively
          the same as calling unsafeHtml and can lead to major security
          issues, e.g. opening your code up to XSS attacks.
          If you're using the html or svg tagged template functions normally
          and still seeing this error, please file a bug at
          https://github.com/lit/lit/issues/new?template=bug_report.md
          and include information about your build tooling, if any.
        `
                .trim()
                .replace(/\n */g, '\n');
        }
        throw new Error(message);
    }
    return policy !== undefined
        ? policy.createHTML(stringFromTSA)
        : stringFromTSA;
}
/**
 * Returns an HTML string for the given TemplateStringsArray and result type
 * (HTML or SVG), along with the case-sensitive bound attribute names in
 * template order. The HTML contains comment markers denoting the `ChildPart`s
 * and suffixes on bound attributes denoting the `AttributeParts`.
 *
 * @param strings template strings array
 * @param type HTML or SVG
 * @return Array containing `[html, attrNames]` (array returned for terseness,
 *     to avoid object fields since this code is shared with non-minified SSR
 *     code)
 */
const getTemplateHtml = (strings, type) => {
    // Insert makers into the template HTML to represent the position of
    // bindings. The following code scans the template strings to determine the
    // syntactic position of the bindings. They can be in text position, where
    // we insert an HTML comment, attribute value position, where we insert a
    // sentinel string and re-write the attribute name, or inside a tag where
    // we insert the sentinel string.
    const l = strings.length - 1;
    // Stores the case-sensitive bound attribute names in the order of their
    // parts. ElementParts are also reflected in this array as undefined
    // rather than a string, to disambiguate from attribute bindings.
    const attrNames = [];
    let html = type === SVG_RESULT ? '<svg>' : type === MATHML_RESULT ? '<math>' : '';
    // When we're inside a raw text tag (not it's text content), the regex
    // will still be tagRegex so we can find attributes, but will switch to
    // this regex when the tag ends.
    let rawTextEndRegex;
    // The current parsing state, represented as a reference to one of the
    // regexes
    let regex = textEndRegex;
    for (let i = 0; i < l; i++) {
        const s = strings[i];
        // The index of the end of the last attribute name. When this is
        // positive at end of a string, it means we're in an attribute value
        // position and need to rewrite the attribute name.
        // We also use a special value of -2 to indicate that we encountered
        // the end of a string in attribute name position.
        let attrNameEndIndex = -1;
        let attrName;
        let lastIndex = 0;
        let match;
        // The conditions in this loop handle the current parse state, and the
        // assignments to the `regex` variable are the state transitions.
        while (lastIndex < s.length) {
            // Make sure we start searching from where we previously left off
            regex.lastIndex = lastIndex;
            match = regex.exec(s);
            if (match === null) {
                break;
            }
            lastIndex = regex.lastIndex;
            if (regex === textEndRegex) {
                if (match[COMMENT_START] === '!--') {
                    regex = commentEndRegex;
                }
                else if (match[COMMENT_START] !== undefined) {
                    // We started a weird comment, like </{
                    regex = comment2EndRegex;
                }
                else if (match[TAG_NAME] !== undefined) {
                    if (rawTextElement.test(match[TAG_NAME])) {
                        // Record if we encounter a raw-text element. We'll switch to
                        // this regex at the end of the tag.
                        rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');
                    }
                    regex = tagEndRegex;
                }
                else if (match[DYNAMIC_TAG_NAME] !== undefined) {
                    if (DEV_MODE) {
                        throw new Error('Bindings in tag names are not supported. Please use static templates instead. ' +
                            'See https://lit.dev/docs/templates/expressions/#static-expressions');
                    }
                    regex = tagEndRegex;
                }
            }
            else if (regex === tagEndRegex) {
                if (match[ENTIRE_MATCH] === '>') {
                    // End of a tag. If we had started a raw-text element, use that
                    // regex
                    regex = rawTextEndRegex ?? textEndRegex;
                    // We may be ending an unquoted attribute value, so make sure we
                    // clear any pending attrNameEndIndex
                    attrNameEndIndex = -1;
                }
                else if (match[ATTRIBUTE_NAME] === undefined) {
                    // Attribute name position
                    attrNameEndIndex = -2;
                }
                else {
                    attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;
                    attrName = match[ATTRIBUTE_NAME];
                    regex =
                        match[QUOTE_CHAR] === undefined
                            ? tagEndRegex
                            : match[QUOTE_CHAR] === '"'
                                ? doubleQuoteAttrEndRegex
                                : singleQuoteAttrEndRegex;
                }
            }
            else if (regex === doubleQuoteAttrEndRegex ||
                regex === singleQuoteAttrEndRegex) {
                regex = tagEndRegex;
            }
            else if (regex === commentEndRegex || regex === comment2EndRegex) {
                regex = textEndRegex;
            }
            else {
                // Not one of the five state regexes, so it must be the dynamically
                // created raw text regex and we're at the close of that element.
                regex = tagEndRegex;
                rawTextEndRegex = undefined;
            }
        }
        if (DEV_MODE) {
            // If we have a attrNameEndIndex, which indicates that we should
            // rewrite the attribute name, assert that we're in a valid attribute
            // position - either in a tag, or a quoted attribute value.
            console.assert(attrNameEndIndex === -1 ||
                regex === tagEndRegex ||
                regex === singleQuoteAttrEndRegex ||
                regex === doubleQuoteAttrEndRegex, 'unexpected parse state B');
        }
        // We have four cases:
        //  1. We're in text position, and not in a raw text element
        //     (regex === textEndRegex): insert a comment marker.
        //  2. We have a non-negative attrNameEndIndex which means we need to
        //     rewrite the attribute name to add a bound attribute suffix.
        //  3. We're at the non-first binding in a multi-binding attribute, use a
        //     plain marker.
        //  4. We're somewhere else inside the tag. If we're in attribute name
        //     position (attrNameEndIndex === -2), add a sequential suffix to
        //     generate a unique attribute name.
        // Detect a binding next to self-closing tag end and insert a space to
        // separate the marker from the tag end:
        const end = regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';
        html +=
            regex === textEndRegex
                ? s + nodeMarker
                : attrNameEndIndex >= 0
                    ? (attrNames.push(attrName),
                        s.slice(0, attrNameEndIndex) +
                            boundAttributeSuffix +
                            s.slice(attrNameEndIndex)) +
                        marker +
                        end
                    : s + marker + (attrNameEndIndex === -2 ? i : end);
    }
    const htmlResult = html +
        (strings[l] || '<?>') +
        (type === SVG_RESULT ? '</svg>' : type === MATHML_RESULT ? '</math>' : '');
    // Returned as an array for terseness
    return [trustFromTemplateString(strings, htmlResult), attrNames];
};
class Template {
    constructor(
    // This property needs to remain unminified.
    { strings, ['_$litType$']: type }, options) {
        this.parts = [];
        let node;
        let nodeIndex = 0;
        let attrNameIndex = 0;
        const partCount = strings.length - 1;
        const parts = this.parts;
        // Create template element
        const [html, attrNames] = getTemplateHtml(strings, type);
        this.el = Template.createElement(html, options);
        walker.currentNode = this.el.content;
        // Re-parent SVG or MathML nodes into template root
        if (type === SVG_RESULT || type === MATHML_RESULT) {
            const wrapper = this.el.content.firstChild;
            wrapper.replaceWith(...wrapper.childNodes);
        }
        // Walk the template to find binding markers and create TemplateParts
        while ((node = walker.nextNode()) !== null && parts.length < partCount) {
            if (node.nodeType === 1) {
                if (DEV_MODE) {
                    const tag = node.localName;
                    // Warn if `textarea` includes an expression and throw if `template`
                    // does since these are not supported. We do this by checking
                    // innerHTML for anything that looks like a marker. This catches
                    // cases like bindings in textarea there markers turn into text nodes.
                    if (/^(?:textarea|template)$/i.test(tag) &&
                        node.innerHTML.includes(marker)) {
                        const m = `Expressions are not supported inside \`${tag}\` ` +
                            `elements. See https://lit.dev/msg/expression-in-${tag} for more ` +
                            `information.`;
                        if (tag === 'template') {
                            throw new Error(m);
                        }
                        else
                            issueWarning('', m);
                    }
                }
                // TODO (justinfagnani): for attempted dynamic tag names, we don't
                // increment the bindingIndex, and it'll be off by 1 in the element
                // and off by two after it.
                if (node.hasAttributes()) {
                    for (const name of node.getAttributeNames()) {
                        if (name.endsWith(boundAttributeSuffix)) {
                            const realName = attrNames[attrNameIndex++];
                            const value = node.getAttribute(name);
                            const statics = value.split(marker);
                            const m = /([.?@])?(.*)/.exec(realName);
                            parts.push({
                                type: ATTRIBUTE_PART,
                                index: nodeIndex,
                                name: m[2],
                                strings: statics,
                                ctor: m[1] === '.'
                                    ? PropertyPart
                                    : m[1] === '?'
                                        ? BooleanAttributePart
                                        : m[1] === '@'
                                            ? EventPart
                                            : AttributePart,
                            });
                            node.removeAttribute(name);
                        }
                        else if (name.startsWith(marker)) {
                            parts.push({
                                type: ELEMENT_PART,
                                index: nodeIndex,
                            });
                            node.removeAttribute(name);
                        }
                    }
                }
                // TODO (justinfagnani): benchmark the regex against testing for each
                // of the 3 raw text element names.
                if (rawTextElement.test(node.tagName)) {
                    // For raw text elements we need to split the text content on
                    // markers, create a Text node for each segment, and create
                    // a TemplatePart for each marker.
                    const strings = node.textContent.split(marker);
                    const lastIndex = strings.length - 1;
                    if (lastIndex > 0) {
                        node.textContent = trustedTypes
                            ? trustedTypes.emptyScript
                            : '';
                        // Generate a new text node for each literal section
                        // These nodes are also used as the markers for node parts
                        // We can't use empty text nodes as markers because they're
                        // normalized when cloning in IE (could simplify when
                        // IE is no longer supported)
                        for (let i = 0; i < lastIndex; i++) {
                            node.append(strings[i], createMarker());
                            // Walk past the marker node we just added
                            walker.nextNode();
                            parts.push({ type: CHILD_PART, index: ++nodeIndex });
                        }
                        // Note because this marker is added after the walker's current
                        // node, it will be walked to in the outer loop (and ignored), so
                        // we don't need to adjust nodeIndex here
                        node.append(strings[lastIndex], createMarker());
                    }
                }
            }
            else if (node.nodeType === 8) {
                const data = node.data;
                if (data === markerMatch) {
                    parts.push({ type: CHILD_PART, index: nodeIndex });
                }
                else {
                    let i = -1;
                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {
                        // Comment node has a binding marker inside, make an inactive part
                        // The binding won't work, but subsequent bindings will
                        parts.push({ type: COMMENT_PART, index: nodeIndex });
                        // Move to the end of the match
                        i += marker.length - 1;
                    }
                }
            }
            nodeIndex++;
        }
        if (DEV_MODE) {
            // If there was a duplicate attribute on a tag, then when the tag is
            // parsed into an element the attribute gets de-duplicated. We can detect
            // this mismatch if we haven't precisely consumed every attribute name
            // when preparing the template. This works because `attrNames` is built
            // from the template string and `attrNameIndex` comes from processing the
            // resulting DOM.
            if (attrNames.length !== attrNameIndex) {
                throw new Error(`Detected duplicate attribute bindings. This occurs if your template ` +
                    `has duplicate attributes on an element tag. For example ` +
                    `"<input ?disabled=\${true} ?disabled=\${false}>" contains a ` +
                    `duplicate "disabled" attribute. The error was detected in ` +
                    `the following template: \n` +
                    '`' +
                    strings.join('${...}') +
                    '`');
            }
        }
        // We could set walker.currentNode to another node here to prevent a memory
        // leak, but every time we prepare a template, we immediately render it
        // and re-use the walker in new TemplateInstance._clone().
        debugLogEvent &&
            debugLogEvent({
                kind: 'template prep',
                template: this,
                clonableTemplate: this.el,
                parts: this.parts,
                strings,
            });
    }
    // Overridden via `litHtmlPolyfillSupport` to provide platform support.
    /** @nocollapse */
    static createElement(html, _options) {
        const el = d.createElement('template');
        el.innerHTML = html;
        return el;
    }
}
function resolveDirective(part, value, parent = part, attributeIndex) {
    // Bail early if the value is explicitly noChange. Note, this means any
    // nested directive is still attached and is not run.
    if (value === noChange) {
        return value;
    }
    let currentDirective = attributeIndex !== undefined
        ? parent.__directives?.[attributeIndex]
        : parent.__directive;
    const nextDirectiveConstructor = isPrimitive(value)
        ? undefined
        : // This property needs to remain unminified.
            value['_$litDirective$'];
    if (currentDirective?.constructor !== nextDirectiveConstructor) {
        // This property needs to remain unminified.
        currentDirective?.['_$notifyDirectiveConnectionChanged']?.(false);
        if (nextDirectiveConstructor === undefined) {
            currentDirective = undefined;
        }
        else {
            currentDirective = new nextDirectiveConstructor(part);
            currentDirective._$initialize(part, parent, attributeIndex);
        }
        if (attributeIndex !== undefined) {
            (parent.__directives ??= [])[attributeIndex] =
                currentDirective;
        }
        else {
            parent.__directive = currentDirective;
        }
    }
    if (currentDirective !== undefined) {
        value = resolveDirective(part, currentDirective._$resolve(part, value.values), currentDirective, attributeIndex);
    }
    return value;
}
/**
 * An updateable instance of a Template. Holds references to the Parts used to
 * update the template instance.
 */
class TemplateInstance {
    constructor(template, parent) {
        this._$parts = [];
        /** @internal */
        this._$disconnectableChildren = undefined;
        this._$template = template;
        this._$parent = parent;
    }
    // Called by ChildPart parentNode getter
    get parentNode() {
        return this._$parent.parentNode;
    }
    // See comment in Disconnectable interface for why this is a getter
    get _$isConnected() {
        return this._$parent._$isConnected;
    }
    // This method is separate from the constructor because we need to return a
    // DocumentFragment and we don't want to hold onto it with an instance field.
    _clone(options) {
        const { el: { content }, parts: parts, } = this._$template;
        const fragment = (options?.creationScope ?? d).importNode(content, true);
        walker.currentNode = fragment;
        let node = walker.nextNode();
        let nodeIndex = 0;
        let partIndex = 0;
        let templatePart = parts[0];
        while (templatePart !== undefined) {
            if (nodeIndex === templatePart.index) {
                let part;
                if (templatePart.type === CHILD_PART) {
                    part = new ChildPart(node, node.nextSibling, this, options);
                }
                else if (templatePart.type === ATTRIBUTE_PART) {
                    part = new templatePart.ctor(node, templatePart.name, templatePart.strings, this, options);
                }
                else if (templatePart.type === ELEMENT_PART) {
                    part = new ElementPart(node, this, options);
                }
                this._$parts.push(part);
                templatePart = parts[++partIndex];
            }
            if (nodeIndex !== templatePart?.index) {
                node = walker.nextNode();
                nodeIndex++;
            }
        }
        // We need to set the currentNode away from the cloned tree so that we
        // don't hold onto the tree even if the tree is detached and should be
        // freed.
        walker.currentNode = d;
        return fragment;
    }
    _update(values) {
        let i = 0;
        for (const part of this._$parts) {
            if (part !== undefined) {
                debugLogEvent &&
                    debugLogEvent({
                        kind: 'set part',
                        part,
                        value: values[i],
                        valueIndex: i,
                        values,
                        templateInstance: this,
                    });
                if (part.strings !== undefined) {
                    part._$setValue(values, part, i);
                    // The number of values the part consumes is part.strings.length - 1
                    // since values are in between template spans. We increment i by 1
                    // later in the loop, so increment it by part.strings.length - 2 here
                    i += part.strings.length - 2;
                }
                else {
                    part._$setValue(values[i]);
                }
            }
            i++;
        }
    }
}
class ChildPart {
    // See comment in Disconnectable interface for why this is a getter
    get _$isConnected() {
        // ChildParts that are not at the root should always be created with a
        // parent; only RootChildNode's won't, so they return the local isConnected
        // state
        return this._$parent?._$isConnected ?? this.__isConnected;
    }
    constructor(startNode, endNode, parent, options) {
        this.type = CHILD_PART;
        this._$committedValue = nothing;
        // The following fields will be patched onto ChildParts when required by
        // AsyncDirective
        /** @internal */
        this._$disconnectableChildren = undefined;
        this._$startNode = startNode;
        this._$endNode = endNode;
        this._$parent = parent;
        this.options = options;
        // Note __isConnected is only ever accessed on RootParts (i.e. when there is
        // no _$parent); the value on a non-root-part is "don't care", but checking
        // for parent would be more code
        this.__isConnected = options?.isConnected ?? true;
        if (ENABLE_EXTRA_SECURITY_HOOKS) {
            // Explicitly initialize for consistent class shape.
            this._textSanitizer = undefined;
        }
    }
    /**
     * The parent node into which the part renders its content.
     *
     * A ChildPart's content consists of a range of adjacent child nodes of
     * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and
     * `.endNode`).
     *
     * - If both `.startNode` and `.endNode` are non-null, then the part's content
     * consists of all siblings between `.startNode` and `.endNode`, exclusively.
     *
     * - If `.startNode` is non-null but `.endNode` is null, then the part's
     * content consists of all siblings following `.startNode`, up to and
     * including the last child of `.parentNode`. If `.endNode` is non-null, then
     * `.startNode` will always be non-null.
     *
     * - If both `.endNode` and `.startNode` are null, then the part's content
     * consists of all child nodes of `.parentNode`.
     */
    get parentNode() {
        let parentNode = wrap(this._$startNode).parentNode;
        const parent = this._$parent;
        if (parent !== undefined &&
            parentNode?.nodeType === 11 /* Node.DOCUMENT_FRAGMENT */) {
            // If the parentNode is a DocumentFragment, it may be because the DOM is
            // still in the cloned fragment during initial render; if so, get the real
            // parentNode the part will be committed into by asking the parent.
            parentNode = parent.parentNode;
        }
        return parentNode;
    }
    /**
     * The part's leading marker node, if any. See `.parentNode` for more
     * information.
     */
    get startNode() {
        return this._$startNode;
    }
    /**
     * The part's trailing marker node, if any. See `.parentNode` for more
     * information.
     */
    get endNode() {
        return this._$endNode;
    }
    _$setValue(value, directiveParent = this) {
        if (DEV_MODE && this.parentNode === null) {
            throw new Error(`This \`ChildPart\` has no \`parentNode\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \`innerHTML\` or \`textContent\` can do this.`);
        }
        value = resolveDirective(this, value, directiveParent);
        if (isPrimitive(value)) {
            // Non-rendering child values. It's important that these do not render
            // empty text nodes to avoid issues with preventing default <slot>
            // fallback content.
            if (value === nothing || value == null || value === '') {
                if (this._$committedValue !== nothing) {
                    debugLogEvent &&
                        debugLogEvent({
                            kind: 'commit nothing to child',
                            start: this._$startNode,
                            end: this._$endNode,
                            parent: this._$parent,
                            options: this.options,
                        });
                    this._$clear();
                }
                this._$committedValue = nothing;
            }
            else if (value !== this._$committedValue && value !== noChange) {
                this._commitText(value);
            }
            // This property needs to remain unminified.
        }
        else if (value['_$litType$'] !== undefined) {
            this._commitTemplateResult(value);
        }
        else if (value.nodeType !== undefined) {
            if (DEV_MODE && this.options?.host === value) {
                this._commitText(`[probable mistake: rendered a template's host in itself ` +
                    `(commonly caused by writing \${this} in a template]`);
                console.warn(`Attempted to render the template host`, value, `inside itself. This is almost always a mistake, and in dev mode `, `we render some warning text. In production however, we'll `, `render it, which will usually result in an error, and sometimes `, `in the element disappearing from the DOM.`);
                return;
            }
            this._commitNode(value);
        }
        else if (isIterable(value)) {
            this._commitIterable(value);
        }
        else {
            // Fallback, will render the string representation
            this._commitText(value);
        }
    }
    _insert(node) {
        return wrap(wrap(this._$startNode).parentNode).insertBefore(node, this._$endNode);
    }
    _commitNode(value) {
        if (this._$committedValue !== value) {
            this._$clear();
            if (ENABLE_EXTRA_SECURITY_HOOKS &&
                sanitizerFactoryInternal !== noopSanitizer) {
                const parentNodeName = this._$startNode.parentNode?.nodeName;
                if (parentNodeName === 'STYLE' || parentNodeName === 'SCRIPT') {
                    let message = 'Forbidden';
                    if (DEV_MODE) {
                        if (parentNodeName === 'STYLE') {
                            message =
                                `Lit does not support binding inside style nodes. ` +
                                    `This is a security risk, as style injection attacks can ` +
                                    `exfiltrate data and spoof UIs. ` +
                                    `Consider instead using css\`...\` literals ` +
                                    `to compose styles, and do dynamic styling with ` +
                                    `css custom properties, ::parts, <slot>s, ` +
                                    `and by mutating the DOM rather than stylesheets.`;
                        }
                        else {
                            message =
                                `Lit does not support binding inside script nodes. ` +
                                    `This is a security risk, as it could allow arbitrary ` +
                                    `code execution.`;
                        }
                    }
                    throw new Error(message);
                }
            }
            debugLogEvent &&
                debugLogEvent({
                    kind: 'commit node',
                    start: this._$startNode,
                    parent: this._$parent,
                    value: value,
                    options: this.options,
                });
            this._$committedValue = this._insert(value);
        }
    }
    _commitText(value) {
        // If the committed value is a primitive it means we called _commitText on
        // the previous render, and we know that this._$startNode.nextSibling is a
        // Text node. We can now just replace the text content (.data) of the node.
        if (this._$committedValue !== nothing &&
            isPrimitive(this._$committedValue)) {
            const node = wrap(this._$startNode).nextSibling;
            if (ENABLE_EXTRA_SECURITY_HOOKS) {
                if (this._textSanitizer === undefined) {
                    this._textSanitizer = createSanitizer(node, 'data', 'property');
                }
                value = this._textSanitizer(value);
            }
            debugLogEvent &&
                debugLogEvent({
                    kind: 'commit text',
                    node,
                    value,
                    options: this.options,
                });
            node.data = value;
        }
        else {
            if (ENABLE_EXTRA_SECURITY_HOOKS) {
                const textNode = d.createTextNode('');
                this._commitNode(textNode);
                // When setting text content, for security purposes it matters a lot
                // what the parent is. For example, <style> and <script> need to be
                // handled with care, while <span> does not. So first we need to put a
                // text node into the document, then we can sanitize its content.
                if (this._textSanitizer === undefined) {
                    this._textSanitizer = createSanitizer(textNode, 'data', 'property');
                }
                value = this._textSanitizer(value);
                debugLogEvent &&
                    debugLogEvent({
                        kind: 'commit text',
                        node: textNode,
                        value,
                        options: this.options,
                    });
                textNode.data = value;
            }
            else {
                this._commitNode(d.createTextNode(value));
                debugLogEvent &&
                    debugLogEvent({
                        kind: 'commit text',
                        node: wrap(this._$startNode).nextSibling,
                        value,
                        options: this.options,
                    });
            }
        }
        this._$committedValue = value;
    }
    _commitTemplateResult(result) {
        // This property needs to remain unminified.
        const { values, ['_$litType$']: type } = result;
        // If $litType$ is a number, result is a plain TemplateResult and we get
        // the template from the template cache. If not, result is a
        // CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need
        // to create the <template> element the first time we see it.
        const template = typeof type === 'number'
            ? this._$getTemplate(result)
            : (type.el === undefined &&
                (type.el = Template.createElement(trustFromTemplateString(type.h, type.h[0]), this.options)),
                type);
        if (this._$committedValue?._$template === template) {
            debugLogEvent &&
                debugLogEvent({
                    kind: 'template updating',
                    template,
                    instance: this._$committedValue,
                    parts: this._$committedValue._$parts,
                    options: this.options,
                    values,
                });
            this._$committedValue._update(values);
        }
        else {
            const instance = new TemplateInstance(template, this);
            const fragment = instance._clone(this.options);
            debugLogEvent &&
                debugLogEvent({
                    kind: 'template instantiated',
                    template,
                    instance,
                    parts: instance._$parts,
                    options: this.options,
                    fragment,
                    values,
                });
            instance._update(values);
            debugLogEvent &&
                debugLogEvent({
                    kind: 'template instantiated and updated',
                    template,
                    instance,
                    parts: instance._$parts,
                    options: this.options,
                    fragment,
                    values,
                });
            this._commitNode(fragment);
            this._$committedValue = instance;
        }
    }
    // Overridden via `litHtmlPolyfillSupport` to provide platform support.
    /** @internal */
    _$getTemplate(result) {
        let template = templateCache.get(result.strings);
        if (template === undefined) {
            templateCache.set(result.strings, (template = new Template(result)));
        }
        return template;
    }
    _commitIterable(value) {
        // For an Iterable, we create a new InstancePart per item, then set its
        // value to the item. This is a little bit of overhead for every item in
        // an Iterable, but it lets us recurse easily and efficiently update Arrays
        // of TemplateResults that will be commonly returned from expressions like:
        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.
        // If value is an array, then the previous render was of an
        // iterable and value will contain the ChildParts from the previous
        // render. If value is not an array, clear this part and make a new
        // array for ChildParts.
        if (!isArray(this._$committedValue)) {
            this._$committedValue = [];
            this._$clear();
        }
        // Lets us keep track of how many items we stamped so we can clear leftover
        // items from a previous render
        const itemParts = this._$committedValue;
        let partIndex = 0;
        let itemPart;
        for (const item of value) {
            if (partIndex === itemParts.length) {
                // If no existing part, create a new one
                // TODO (justinfagnani): test perf impact of always creating two parts
                // instead of sharing parts between nodes
                // https://github.com/lit/lit/issues/1266
                itemParts.push((itemPart = new ChildPart(this._insert(createMarker()), this._insert(createMarker()), this, this.options)));
            }
            else {
                // Reuse an existing part
                itemPart = itemParts[partIndex];
            }
            itemPart._$setValue(item);
            partIndex++;
        }
        if (partIndex < itemParts.length) {
            // itemParts always have end nodes
            this._$clear(itemPart && wrap(itemPart._$endNode).nextSibling, partIndex);
            // Truncate the parts array so _value reflects the current state
            itemParts.length = partIndex;
        }
    }
    /**
     * Removes the nodes contained within this Part from the DOM.
     *
     * @param start Start node to clear from, for clearing a subset of the part's
     *     DOM (used when truncating iterables)
     * @param from  When `start` is specified, the index within the iterable from
     *     which ChildParts are being removed, used for disconnecting directives in
     *     those Parts.
     *
     * @internal
     */
    _$clear(start = wrap(this._$startNode).nextSibling, from) {
        this._$notifyConnectionChanged?.(false, true, from);
        while (start && start !== this._$endNode) {
            const n = wrap(start).nextSibling;
            wrap(start).remove();
            start = n;
        }
    }
    /**
     * Implementation of RootPart's `isConnected`. Note that this method
     * should only be called on `RootPart`s (the `ChildPart` returned from a
     * top-level `render()` call). It has no effect on non-root ChildParts.
     * @param isConnected Whether to set
     * @internal
     */
    setConnected(isConnected) {
        if (this._$parent === undefined) {
            this.__isConnected = isConnected;
            this._$notifyConnectionChanged?.(isConnected);
        }
        else if (DEV_MODE) {
            throw new Error('part.setConnected() may only be called on a ' +
                'RootPart returned from render().');
        }
    }
}
class AttributePart {
    get tagName() {
        return this.element.tagName;
    }
    // See comment in Disconnectable interface for why this is a getter
    get _$isConnected() {
        return this._$parent._$isConnected;
    }
    constructor(element, name, strings, parent, options) {
        this.type = ATTRIBUTE_PART;
        /** @internal */
        this._$committedValue = nothing;
        /** @internal */
        this._$disconnectableChildren = undefined;
        this.element = element;
        this.name = name;
        this._$parent = parent;
        this.options = options;
        if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {
            this._$committedValue = new Array(strings.length - 1).fill(new String());
            this.strings = strings;
        }
        else {
            this._$committedValue = nothing;
        }
        if (ENABLE_EXTRA_SECURITY_HOOKS) {
            this._sanitizer = undefined;
        }
    }
    /**
     * Sets the value of this part by resolving the value from possibly multiple
     * values and static strings and committing it to the DOM.
     * If this part is single-valued, `this._strings` will be undefined, and the
     * method will be called with a single value argument. If this part is
     * multi-value, `this._strings` will be defined, and the method is called
     * with the value array of the part's owning TemplateInstance, and an offset
     * into the value array from which the values should be read.
     * This method is overloaded this way to eliminate short-lived array slices
     * of the template instance values, and allow a fast-path for single-valued
     * parts.
     *
     * @param value The part value, or an array of values for multi-valued parts
     * @param valueIndex the index to start reading values from. `undefined` for
     *   single-valued parts
     * @param noCommit causes the part to not commit its value to the DOM. Used
     *   in hydration to prime attribute parts with their first-rendered value,
     *   but not set the attribute, and in SSR to no-op the DOM operation and
     *   capture the value for serialization.
     *
     * @internal
     */
    _$setValue(value, directiveParent = this, valueIndex, noCommit) {
        const strings = this.strings;
        // Whether any of the values has changed, for dirty-checking
        let change = false;
        if (strings === undefined) {
            // Single-value binding case
            value = resolveDirective(this, value, directiveParent, 0);
            change =
                !isPrimitive(value) ||
                    (value !== this._$committedValue && value !== noChange);
            if (change) {
                this._$committedValue = value;
            }
        }
        else {
            // Interpolation case
            const values = value;
            value = strings[0];
            let i, v;
            for (i = 0; i < strings.length - 1; i++) {
                v = resolveDirective(this, values[valueIndex + i], directiveParent, i);
                if (v === noChange) {
                    // If the user-provided value is `noChange`, use the previous value
                    v = this._$committedValue[i];
                }
                change ||=
                    !isPrimitive(v) || v !== this._$committedValue[i];
                if (v === nothing) {
                    value = nothing;
                }
                else if (value !== nothing) {
                    value += (v ?? '') + strings[i + 1];
                }
                // We always record each value, even if one is `nothing`, for future
                // change detection.
                this._$committedValue[i] = v;
            }
        }
        if (change && !noCommit) {
            this._commitValue(value);
        }
    }
    /** @internal */
    _commitValue(value) {
        if (value === nothing) {
            wrap(this.element).removeAttribute(this.name);
        }
        else {
            if (ENABLE_EXTRA_SECURITY_HOOKS) {
                if (this._sanitizer === undefined) {
                    this._sanitizer = sanitizerFactoryInternal(this.element, this.name, 'attribute');
                }
                value = this._sanitizer(value ?? '');
            }
            debugLogEvent &&
                debugLogEvent({
                    kind: 'commit attribute',
                    element: this.element,
                    name: this.name,
                    value,
                    options: this.options,
                });
            wrap(this.element).setAttribute(this.name, (value ?? ''));
        }
    }
}
class PropertyPart extends AttributePart {
    constructor() {
        super(...arguments);
        this.type = PROPERTY_PART;
    }
    /** @internal */
    _commitValue(value) {
        if (ENABLE_EXTRA_SECURITY_HOOKS) {
            if (this._sanitizer === undefined) {
                this._sanitizer = sanitizerFactoryInternal(this.element, this.name, 'property');
            }
            value = this._sanitizer(value);
        }
        debugLogEvent &&
            debugLogEvent({
                kind: 'commit property',
                element: this.element,
                name: this.name,
                value,
                options: this.options,
            });
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.element[this.name] = value === nothing ? undefined : value;
    }
}
class BooleanAttributePart extends AttributePart {
    constructor() {
        super(...arguments);
        this.type = BOOLEAN_ATTRIBUTE_PART;
    }
    /** @internal */
    _commitValue(value) {
        debugLogEvent &&
            debugLogEvent({
                kind: 'commit boolean attribute',
                element: this.element,
                name: this.name,
                value: !!(value && value !== nothing),
                options: this.options,
            });
        wrap(this.element).toggleAttribute(this.name, !!value && value !== nothing);
    }
}
class EventPart extends AttributePart {
    constructor(element, name, strings, parent, options) {
        super(element, name, strings, parent, options);
        this.type = EVENT_PART;
        if (DEV_MODE && this.strings !== undefined) {
            throw new Error(`A \`<${element.localName}>\` has a \`@${name}=...\` listener with ` +
                'invalid content. Event listeners in templates must have exactly ' +
                'one expression and no surrounding text.');
        }
    }
    // EventPart does not use the base _$setValue/_resolveValue implementation
    // since the dirty checking is more complex
    /** @internal */
    _$setValue(newListener, directiveParent = this) {
        newListener =
            resolveDirective(this, newListener, directiveParent, 0) ?? nothing;
        if (newListener === noChange) {
            return;
        }
        const oldListener = this._$committedValue;
        // If the new value is nothing or any options change we have to remove the
        // part as a listener.
        const shouldRemoveListener = (newListener === nothing && oldListener !== nothing) ||
            newListener.capture !==
                oldListener.capture ||
            newListener.once !==
                oldListener.once ||
            newListener.passive !==
                oldListener.passive;
        // If the new value is not nothing and we removed the listener, we have
        // to add the part as a listener.
        const shouldAddListener = newListener !== nothing &&
            (oldListener === nothing || shouldRemoveListener);
        debugLogEvent &&
            debugLogEvent({
                kind: 'commit event listener',
                element: this.element,
                name: this.name,
                value: newListener,
                options: this.options,
                removeListener: shouldRemoveListener,
                addListener: shouldAddListener,
                oldListener,
            });
        if (shouldRemoveListener) {
            this.element.removeEventListener(this.name, this, oldListener);
        }
        if (shouldAddListener) {
            // Beware: IE11 and Chrome 41 don't like using the listener as the
            // options object. Figure out how to deal w/ this in IE11 - maybe
            // patch addEventListener?
            this.element.addEventListener(this.name, this, newListener);
        }
        this._$committedValue = newListener;
    }
    handleEvent(event) {
        if (typeof this._$committedValue === 'function') {
            this._$committedValue.call(this.options?.host ?? this.element, event);
        }
        else {
            this._$committedValue.handleEvent(event);
        }
    }
}
class ElementPart {
    constructor(element, parent, options) {
        this.element = element;
        this.type = ELEMENT_PART;
        /** @internal */
        this._$disconnectableChildren = undefined;
        this._$parent = parent;
        this.options = options;
    }
    // See comment in Disconnectable interface for why this is a getter
    get _$isConnected() {
        return this._$parent._$isConnected;
    }
    _$setValue(value) {
        debugLogEvent &&
            debugLogEvent({
                kind: 'commit to element binding',
                element: this.element,
                value,
                options: this.options,
            });
        resolveDirective(this, value);
    }
}
/**
 * END USERS SHOULD NOT RELY ON THIS OBJECT.
 *
 * Private exports for use by other Lit packages, not intended for use by
 * external users.
 *
 * We currently do not make a mangled rollup build of the lit-ssr code. In order
 * to keep a number of (otherwise private) top-level exports mangled in the
 * client side code, we export a _$LH object containing those members (or
 * helper methods for accessing private fields of those members), and then
 * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the
 * client-side code is being used in `dev` mode or `prod` mode.
 *
 * This has a unique name, to disambiguate it from private exports in
 * lit-element, which re-exports all of lit-html.
 *
 * @private
 */
const _$LH = {
    // Used in lit-ssr
    _boundAttributeSuffix: boundAttributeSuffix,
    _marker: marker,
    _markerMatch: markerMatch,
    _HTML_RESULT: HTML_RESULT,
    _getTemplateHtml: getTemplateHtml,
    // Used in tests and private-ssr-support
    _TemplateInstance: TemplateInstance,
    _isIterable: isIterable,
    _resolveDirective: resolveDirective,
    _ChildPart: ChildPart,
    _AttributePart: AttributePart,
    _BooleanAttributePart: BooleanAttributePart,
    _EventPart: EventPart,
    _PropertyPart: PropertyPart,
    _ElementPart: ElementPart,
};
// Apply polyfills if available
const polyfillSupport = DEV_MODE
    ? global.litHtmlPolyfillSupportDevMode
    : global.litHtmlPolyfillSupport;
polyfillSupport?.(Template, ChildPart);
// IMPORTANT: do not change the property name or the assignment expression.
// This line will be used in regexes to search for lit-html usage.
(global.litHtmlVersions ??= []).push('3.2.1');
if (DEV_MODE && global.litHtmlVersions.length > 1) {
    issueWarning('multiple-versions', `Multiple versions of Lit loaded. ` +
        `Loading multiple versions is not recommended.`);
}
/**
 * Renders a value, usually a lit-html TemplateResult, to the container.
 *
 * This example renders the text "Hello, Zoe!" inside a paragraph tag, appending
 * it to the container `document.body`.
 *
 * ```js
 * import {html, render} from 'lit';
 *
 * const name = "Zoe";
 * render(html`<p>Hello, ${name}!</p>`, document.body);
 * ```
 *
 * @param value Any [renderable
 *   value](https://lit.dev/docs/templates/expressions/#child-expressions),
 *   typically a {@linkcode TemplateResult} created by evaluating a template tag
 *   like {@linkcode html} or {@linkcode svg}.
 * @param container A DOM container to render to. The first render will append
 *   the rendered value to the container, and subsequent renders will
 *   efficiently update the rendered value if the same result type was
 *   previously rendered there.
 * @param options See {@linkcode RenderOptions} for options documentation.
 * @see
 * {@link https://lit.dev/docs/libraries/standalone-templates/#rendering-lit-html-templates| Rendering Lit HTML Templates}
 */
const render = (value, container, options) => {
    if (DEV_MODE && container == null) {
        // Give a clearer error message than
        //     Uncaught TypeError: Cannot read properties of null (reading
        //     '_$litPart$')
        // which reads like an internal Lit error.
        throw new TypeError(`The container to render into may not be ${container}`);
    }
    const renderId = DEV_MODE ? debugLogRenderId++ : 0;
    const partOwnerNode = options?.renderBefore ?? container;
    // This property needs to remain unminified.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let part = partOwnerNode['_$litPart$'];
    debugLogEvent &&
        debugLogEvent({
            kind: 'begin render',
            id: renderId,
            value,
            container,
            options,
            part,
        });
    if (part === undefined) {
        const endNode = options?.renderBefore ?? null;
        // This property needs to remain unminified.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        partOwnerNode['_$litPart$'] = part = new ChildPart(container.insertBefore(createMarker(), endNode), endNode, undefined, options ?? {});
    }
    part._$setValue(value);
    debugLogEvent &&
        debugLogEvent({
            kind: 'end render',
            id: renderId,
            value,
            container,
            options,
            part,
        });
    return part;
};
if (ENABLE_EXTRA_SECURITY_HOOKS) {
    render.setSanitizer = setSanitizer;
    render.createSanitizer = createSanitizer;
    if (DEV_MODE) {
        render._testOnlyClearSanitizerFactoryDoNotCallOrElse =
            _testOnlyClearSanitizerFactoryDoNotCallOrElse;
    }
}
//# sourceMappingURL=lit-html.js.map

/***/ }),

/***/ "./node_modules/lit-html/development/static.js":
/*!*****************************************************!*\
  !*** ./node_modules/lit-html/development/static.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   html: () => (/* binding */ html),
/* harmony export */   literal: () => (/* binding */ literal),
/* harmony export */   mathml: () => (/* binding */ mathml),
/* harmony export */   svg: () => (/* binding */ svg),
/* harmony export */   unsafeStatic: () => (/* binding */ unsafeStatic),
/* harmony export */   withStatic: () => (/* binding */ withStatic)
/* harmony export */ });
/* harmony import */ var _lit_html_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lit-html.js */ "./node_modules/lit-html/development/lit-html.js");
/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
// Any new exports need to be added to the export statement in
// `packages/lit/src/index.all.ts`.

/**
 * Prevents JSON injection attacks.
 *
 * The goals of this brand:
 *   1) fast to check
 *   2) code is small on the wire
 *   3) multiple versions of Lit in a single page will all produce mutually
 *      interoperable StaticValues
 *   4) normal JSON.parse (without an unusual reviver) can not produce a
 *      StaticValue
 *
 * Symbols satisfy (1), (2), and (4). We use Symbol.for to satisfy (3), but
 * we don't care about the key, so we break ties via (2) and use the empty
 * string.
 */
const brand = Symbol.for('');
/** Safely extracts the string part of a StaticValue. */
const unwrapStaticValue = (value) => {
    if (value?.r !== brand) {
        return undefined;
    }
    return value?.['_$litStatic$'];
};
/**
 * Wraps a string so that it behaves like part of the static template
 * strings instead of a dynamic value.
 *
 * Users must take care to ensure that adding the static string to the template
 * results in well-formed HTML, or else templates may break unexpectedly.
 *
 * Note that this function is unsafe to use on untrusted content, as it will be
 * directly parsed into HTML. Do not pass user input to this function
 * without sanitizing it.
 *
 * Static values can be changed, but they will cause a complete re-render
 * since they effectively create a new template.
 */
const unsafeStatic = (value) => ({
    ['_$litStatic$']: value,
    r: brand,
});
const textFromStatic = (value) => {
    if (value['_$litStatic$'] !== undefined) {
        return value['_$litStatic$'];
    }
    else {
        throw new Error(`Value passed to 'literal' function must be a 'literal' result: ${value}. Use 'unsafeStatic' to pass non-literal values, but
            take care to ensure page security.`);
    }
};
/**
 * Tags a string literal so that it behaves like part of the static template
 * strings instead of a dynamic value.
 *
 * The only values that may be used in template expressions are other tagged
 * `literal` results or `unsafeStatic` values (note that untrusted content
 * should never be passed to `unsafeStatic`).
 *
 * Users must take care to ensure that adding the static string to the template
 * results in well-formed HTML, or else templates may break unexpectedly.
 *
 * Static values can be changed, but they will cause a complete re-render since
 * they effectively create a new template.
 */
const literal = (strings, ...values) => ({
    ['_$litStatic$']: values.reduce((acc, v, idx) => acc + textFromStatic(v) + strings[idx + 1], strings[0]),
    r: brand,
});
const stringsCache = new Map();
/**
 * Wraps a lit-html template tag (`html` or `svg`) to add static value support.
 */
const withStatic = (coreTag) => (strings, ...values) => {
    const l = values.length;
    let staticValue;
    let dynamicValue;
    const staticStrings = [];
    const dynamicValues = [];
    let i = 0;
    let hasStatics = false;
    let s;
    while (i < l) {
        s = strings[i];
        // Collect any unsafeStatic values, and their following template strings
        // so that we treat a run of template strings and unsafe static values as
        // a single template string.
        while (i < l &&
            ((dynamicValue = values[i]),
                (staticValue = unwrapStaticValue(dynamicValue))) !== undefined) {
            s += staticValue + strings[++i];
            hasStatics = true;
        }
        // If the last value is static, we don't need to push it.
        if (i !== l) {
            dynamicValues.push(dynamicValue);
        }
        staticStrings.push(s);
        i++;
    }
    // If the last value isn't static (which would have consumed the last
    // string), then we need to add the last string.
    if (i === l) {
        staticStrings.push(strings[l]);
    }
    if (hasStatics) {
        const key = staticStrings.join('$$lit$$');
        strings = stringsCache.get(key);
        if (strings === undefined) {
            // Beware: in general this pattern is unsafe, and doing so may bypass
            // lit's security checks and allow an attacker to execute arbitrary
            // code and inject arbitrary content.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            staticStrings.raw = staticStrings;
            stringsCache.set(key, (strings = staticStrings));
        }
        values = dynamicValues;
    }
    return coreTag(strings, ...values);
};
/**
 * Interprets a template literal as an HTML template that can efficiently
 * render to and update a container.
 *
 * Includes static value support from `lit-html/static.js`.
 */
const html = withStatic(_lit_html_js__WEBPACK_IMPORTED_MODULE_0__.html);
/**
 * Interprets a template literal as an SVG template that can efficiently
 * render to and update a container.
 *
 * Includes static value support from `lit-html/static.js`.
 */
const svg = withStatic(_lit_html_js__WEBPACK_IMPORTED_MODULE_0__.svg);
/**
 * Interprets a template literal as MathML fragment that can efficiently render
 * to and update a container.
 *
 * Includes static value support from `lit-html/static.js`.
 */
const mathml = withStatic(_lit_html_js__WEBPACK_IMPORTED_MODULE_0__.mathml);
//# sourceMappingURL=static.js.map

/***/ }),

/***/ "./node_modules/lit/decorators.js":
/*!****************************************!*\
  !*** ./node_modules/lit/decorators.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   customElement: () => (/* reexport safe */ _lit_reactive_element_decorators_custom_element_js__WEBPACK_IMPORTED_MODULE_0__.customElement),
/* harmony export */   eventOptions: () => (/* reexport safe */ _lit_reactive_element_decorators_event_options_js__WEBPACK_IMPORTED_MODULE_3__.eventOptions),
/* harmony export */   property: () => (/* reexport safe */ _lit_reactive_element_decorators_property_js__WEBPACK_IMPORTED_MODULE_1__.property),
/* harmony export */   query: () => (/* reexport safe */ _lit_reactive_element_decorators_query_js__WEBPACK_IMPORTED_MODULE_4__.query),
/* harmony export */   queryAll: () => (/* reexport safe */ _lit_reactive_element_decorators_query_all_js__WEBPACK_IMPORTED_MODULE_5__.queryAll),
/* harmony export */   queryAssignedElements: () => (/* reexport safe */ _lit_reactive_element_decorators_query_assigned_elements_js__WEBPACK_IMPORTED_MODULE_7__.queryAssignedElements),
/* harmony export */   queryAssignedNodes: () => (/* reexport safe */ _lit_reactive_element_decorators_query_assigned_nodes_js__WEBPACK_IMPORTED_MODULE_8__.queryAssignedNodes),
/* harmony export */   queryAsync: () => (/* reexport safe */ _lit_reactive_element_decorators_query_async_js__WEBPACK_IMPORTED_MODULE_6__.queryAsync),
/* harmony export */   standardProperty: () => (/* reexport safe */ _lit_reactive_element_decorators_property_js__WEBPACK_IMPORTED_MODULE_1__.standardProperty),
/* harmony export */   state: () => (/* reexport safe */ _lit_reactive_element_decorators_state_js__WEBPACK_IMPORTED_MODULE_2__.state)
/* harmony export */ });
/* harmony import */ var _lit_reactive_element_decorators_custom_element_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lit/reactive-element/decorators/custom-element.js */ "./node_modules/@lit/reactive-element/development/decorators/custom-element.js");
/* harmony import */ var _lit_reactive_element_decorators_property_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lit/reactive-element/decorators/property.js */ "./node_modules/@lit/reactive-element/development/decorators/property.js");
/* harmony import */ var _lit_reactive_element_decorators_state_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lit/reactive-element/decorators/state.js */ "./node_modules/@lit/reactive-element/development/decorators/state.js");
/* harmony import */ var _lit_reactive_element_decorators_event_options_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lit/reactive-element/decorators/event-options.js */ "./node_modules/@lit/reactive-element/development/decorators/event-options.js");
/* harmony import */ var _lit_reactive_element_decorators_query_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lit/reactive-element/decorators/query.js */ "./node_modules/@lit/reactive-element/development/decorators/query.js");
/* harmony import */ var _lit_reactive_element_decorators_query_all_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @lit/reactive-element/decorators/query-all.js */ "./node_modules/@lit/reactive-element/development/decorators/query-all.js");
/* harmony import */ var _lit_reactive_element_decorators_query_async_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @lit/reactive-element/decorators/query-async.js */ "./node_modules/@lit/reactive-element/development/decorators/query-async.js");
/* harmony import */ var _lit_reactive_element_decorators_query_assigned_elements_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @lit/reactive-element/decorators/query-assigned-elements.js */ "./node_modules/@lit/reactive-element/development/decorators/query-assigned-elements.js");
/* harmony import */ var _lit_reactive_element_decorators_query_assigned_nodes_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @lit/reactive-element/decorators/query-assigned-nodes.js */ "./node_modules/@lit/reactive-element/development/decorators/query-assigned-nodes.js");

//# sourceMappingURL=decorators.js.map


/***/ }),

/***/ "./node_modules/lit/directives/class-map.js":
/*!**************************************************!*\
  !*** ./node_modules/lit/directives/class-map.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   classMap: () => (/* reexport safe */ lit_html_directives_class_map_js__WEBPACK_IMPORTED_MODULE_0__.classMap)
/* harmony export */ });
/* harmony import */ var lit_html_directives_class_map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit-html/directives/class-map.js */ "./node_modules/lit-html/development/directives/class-map.js");

//# sourceMappingURL=class-map.js.map


/***/ }),

/***/ "./node_modules/lit/directives/style-map.js":
/*!**************************************************!*\
  !*** ./node_modules/lit/directives/style-map.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   styleMap: () => (/* reexport safe */ lit_html_directives_style_map_js__WEBPACK_IMPORTED_MODULE_0__.styleMap)
/* harmony export */ });
/* harmony import */ var lit_html_directives_style_map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit-html/directives/style-map.js */ "./node_modules/lit-html/development/directives/style-map.js");

//# sourceMappingURL=style-map.js.map


/***/ }),

/***/ "./node_modules/lit/index.js":
/*!***********************************!*\
  !*** ./node_modules/lit/index.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSSResult: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.CSSResult),
/* harmony export */   LitElement: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.LitElement),
/* harmony export */   ReactiveElement: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.ReactiveElement),
/* harmony export */   _$LE: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__._$LE),
/* harmony export */   _$LH: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__._$LH),
/* harmony export */   adoptStyles: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.adoptStyles),
/* harmony export */   css: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.css),
/* harmony export */   defaultConverter: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.defaultConverter),
/* harmony export */   getCompatibleStyle: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.getCompatibleStyle),
/* harmony export */   html: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.html),
/* harmony export */   isServer: () => (/* reexport safe */ lit_html_is_server_js__WEBPACK_IMPORTED_MODULE_3__.isServer),
/* harmony export */   mathml: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.mathml),
/* harmony export */   noChange: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.noChange),
/* harmony export */   notEqual: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.notEqual),
/* harmony export */   nothing: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.nothing),
/* harmony export */   render: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.render),
/* harmony export */   supportsAdoptingStyleSheets: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.supportsAdoptingStyleSheets),
/* harmony export */   svg: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.svg),
/* harmony export */   unsafeCSS: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.unsafeCSS)
/* harmony export */ });
/* harmony import */ var _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lit/reactive-element */ "./node_modules/@lit/reactive-element/development/reactive-element.js");
/* harmony import */ var lit_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit-html */ "./node_modules/lit-html/development/lit-html.js");
/* harmony import */ var lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lit-element/lit-element.js */ "./node_modules/lit-element/development/lit-element.js");
/* harmony import */ var lit_html_is_server_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lit-html/is-server.js */ "./node_modules/lit-html/development/is-server.js");

//# sourceMappingURL=index.js.map


/***/ }),

/***/ "./node_modules/lit/static-html.js":
/*!*****************************************!*\
  !*** ./node_modules/lit/static-html.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   html: () => (/* reexport safe */ lit_html_static_js__WEBPACK_IMPORTED_MODULE_0__.html),
/* harmony export */   literal: () => (/* reexport safe */ lit_html_static_js__WEBPACK_IMPORTED_MODULE_0__.literal),
/* harmony export */   mathml: () => (/* reexport safe */ lit_html_static_js__WEBPACK_IMPORTED_MODULE_0__.mathml),
/* harmony export */   svg: () => (/* reexport safe */ lit_html_static_js__WEBPACK_IMPORTED_MODULE_0__.svg),
/* harmony export */   unsafeStatic: () => (/* reexport safe */ lit_html_static_js__WEBPACK_IMPORTED_MODULE_0__.unsafeStatic),
/* harmony export */   withStatic: () => (/* reexport safe */ lit_html_static_js__WEBPACK_IMPORTED_MODULE_0__.withStatic)
/* harmony export */ });
/* harmony import */ var lit_html_static_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit-html/static.js */ "./node_modules/lit-html/development/static.js");

//# sourceMappingURL=static-html.js.map


/***/ }),

/***/ "./node_modules/tslib/tslib.es6.mjs":
/*!******************************************!*\
  !*** ./node_modules/tslib/tslib.es6.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __addDisposableResource: () => (/* binding */ __addDisposableResource),
/* harmony export */   __assign: () => (/* binding */ __assign),
/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),
/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),
/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),
/* harmony export */   __await: () => (/* binding */ __await),
/* harmony export */   __awaiter: () => (/* binding */ __awaiter),
/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   __classPrivateFieldIn: () => (/* binding */ __classPrivateFieldIn),
/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   __createBinding: () => (/* binding */ __createBinding),
/* harmony export */   __decorate: () => (/* binding */ __decorate),
/* harmony export */   __disposeResources: () => (/* binding */ __disposeResources),
/* harmony export */   __esDecorate: () => (/* binding */ __esDecorate),
/* harmony export */   __exportStar: () => (/* binding */ __exportStar),
/* harmony export */   __extends: () => (/* binding */ __extends),
/* harmony export */   __generator: () => (/* binding */ __generator),
/* harmony export */   __importDefault: () => (/* binding */ __importDefault),
/* harmony export */   __importStar: () => (/* binding */ __importStar),
/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),
/* harmony export */   __metadata: () => (/* binding */ __metadata),
/* harmony export */   __param: () => (/* binding */ __param),
/* harmony export */   __propKey: () => (/* binding */ __propKey),
/* harmony export */   __read: () => (/* binding */ __read),
/* harmony export */   __rest: () => (/* binding */ __rest),
/* harmony export */   __rewriteRelativeImportExtension: () => (/* binding */ __rewriteRelativeImportExtension),
/* harmony export */   __runInitializers: () => (/* binding */ __runInitializers),
/* harmony export */   __setFunctionName: () => (/* binding */ __setFunctionName),
/* harmony export */   __spread: () => (/* binding */ __spread),
/* harmony export */   __spreadArray: () => (/* binding */ __spreadArray),
/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),
/* harmony export */   __values: () => (/* binding */ __values),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */

var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
  __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  }
  return __assign.apply(this, arguments);
}

function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
      }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
      var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
      if (kind === "accessor") {
          if (result === void 0) continue;
          if (result === null || typeof result !== "object") throw new TypeError("Object expected");
          if (_ = accept(result.get)) descriptor.get = _;
          if (_ = accept(result.set)) descriptor.set = _;
          if (_ = accept(result.init)) initializers.unshift(_);
      }
      else if (_ = accept(result)) {
          if (kind === "field") initializers.unshift(_);
          else descriptor[key] = _;
      }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
};

function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
};

function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
};

function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
  function verb(n) { return function (v) { return step([n, v]); }; }
  function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
              case 0: case 1: t = op; break;
              case 4: _.label++; return { value: op[1], done: false };
              case 5: _.label++; y = op[1]; op = [0]; continue;
              case 7: op = _.ops.pop(); _.trys.pop(); continue;
              default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
          }
          op = body.call(thisArg, _);
      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
  }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
  }
  Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
      next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
      }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  }
  catch (error) { e = { error: error }; }
  finally {
      try {
          if (r && !r.done && (m = i["return"])) m.call(i);
      }
      finally { if (e) throw e.error; }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
  return r;
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
  function fulfill(value) { resume("next", value); }
  function reject(value) { resume("throw", value); }
  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
  return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
  o["default"] = v;
};

var ownKeys = function(o) {
  ownKeys = Object.getOwnPropertyNames || function (o) {
    var ar = [];
    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
    return ar;
  };
  return ownKeys(o);
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
  __setModuleDefault(result, mod);
  return result;
}

function __importDefault(mod) {
  return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}

function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };
    env.stack.push({ value: value, dispose: dispose, async: async });
  }
  else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}

var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  var r, s = 0;
  function next() {
    while (r = env.stack.pop()) {
      try {
        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
        if (r.dispose) {
          var result = r.dispose.call(r.value);
          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
        }
        else s |= 1;
      }
      catch (e) {
        fail(e);
      }
    }
    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
    if (env.hasError) throw env.error;
  }
  return next();
}

function __rewriteRelativeImportExtension(path, preserveJsx) {
  if (typeof path === "string" && /^\.\.?\//.test(path)) {
      return path.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {
          return tsx ? preserveJsx ? ".jsx" : ".js" : d && (!ext || !cm) ? m : (d + ext + "." + cm.toLowerCase() + "js");
      });
  }
  return path;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __esDecorate,
  __runInitializers,
  __propKey,
  __setFunctionName,
  __metadata,
  __awaiter,
  __generator,
  __createBinding,
  __exportStar,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn,
  __addDisposableResource,
  __disposeResources,
  __rewriteRelativeImportExtension,
});


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _google_glue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/glue */ "./_glue/index.js");
// UI Components

document.addEventListener("DOMContentLoaded", () => {
    // @Initializers..
    const headerEl = document.querySelector(".glue-header");
    if (headerEl)
        new _google_glue__WEBPACK_IMPORTED_MODULE_0__.Header(headerEl);
});

})();

/******/ })()
;
//# sourceMappingURL=bundle.js.map